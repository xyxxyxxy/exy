/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { OpenAPIConfig } from './core/OpenAPI';
import { AxiosHttpRequest } from './core/AxiosHttpRequest';
import { ActivityLogServiceService } from './services/ActivityLogServiceService';
import { ArtistsServiceService } from './services/ArtistsServiceService';
import { AudioServiceService } from './services/AudioServiceService';
import { BifServiceService } from './services/BifServiceService';
import { BrandingServiceService } from './services/BrandingServiceService';
import { ChannelServiceService } from './services/ChannelServiceService';
import { CollectionServiceService } from './services/CollectionServiceService';
import { ConfigurationServiceService } from './services/ConfigurationServiceService';
import { ConnectServiceService } from './services/ConnectServiceService';
import { DashboardServiceService } from './services/DashboardServiceService';
import { DeviceServiceService } from './services/DeviceServiceService';
import { DisplayPreferencesServiceService } from './services/DisplayPreferencesServiceService';
import { DlnaServerServiceService } from './services/DlnaServerServiceService';
import { DlnaServiceService } from './services/DlnaServiceService';
import { DynamicHlsServiceService } from './services/DynamicHlsServiceService';
import { EncodingInfoServiceService } from './services/EncodingInfoServiceService';
import { EnvironmentServiceService } from './services/EnvironmentServiceService';
import { FilterServiceService } from './services/FilterServiceService';
import { GameGenresServiceService } from './services/GameGenresServiceService';
import { GamesServiceService } from './services/GamesServiceService';
import { GenresServiceService } from './services/GenresServiceService';
import { HlsSegmentServiceService } from './services/HlsSegmentServiceService';
import { ImageByNameServiceService } from './services/ImageByNameServiceService';
import { ImageServiceService } from './services/ImageServiceService';
import { InstantMixServiceService } from './services/InstantMixServiceService';
import { ItemLookupServiceService } from './services/ItemLookupServiceService';
import { ItemRefreshServiceService } from './services/ItemRefreshServiceService';
import { ItemsServiceService } from './services/ItemsServiceService';
import { ItemUpdateServiceService } from './services/ItemUpdateServiceService';
import { LibraryServiceService } from './services/LibraryServiceService';
import { LibraryStructureServiceService } from './services/LibraryStructureServiceService';
import { LiveTvServiceService } from './services/LiveTvServiceService';
import { LocalizationServiceService } from './services/LocalizationServiceService';
import { MediaInfoServiceService } from './services/MediaInfoServiceService';
import { MoviesServiceService } from './services/MoviesServiceService';
import { MusicGenresServiceService } from './services/MusicGenresServiceService';
import { NewsServiceService } from './services/NewsServiceService';
import { NotificationsServiceService } from './services/NotificationsServiceService';
import { OfficialRatingServiceService } from './services/OfficialRatingServiceService';
import { OpenApiServiceService } from './services/OpenApiServiceService';
import { PackageServiceService } from './services/PackageServiceService';
import { PersonsServiceService } from './services/PersonsServiceService';
import { PlaylistServiceService } from './services/PlaylistServiceService';
import { PlaystateServiceService } from './services/PlaystateServiceService';
import { PluginServiceService } from './services/PluginServiceService';
import { RemoteImageServiceService } from './services/RemoteImageServiceService';
import { ReportsServiceService } from './services/ReportsServiceService';
import { ScheduledTaskServiceService } from './services/ScheduledTaskServiceService';
import { SearchServiceService } from './services/SearchServiceService';
import { ServerApiEndpointsService } from './services/ServerApiEndpointsService';
import { SessionsServiceService } from './services/SessionsServiceService';
import { StudiosServiceService } from './services/StudiosServiceService';
import { SubtitleServiceService } from './services/SubtitleServiceService';
import { SuggestionsServiceService } from './services/SuggestionsServiceService';
import { SyncServiceService } from './services/SyncServiceService';
import { SystemServiceService } from './services/SystemServiceService';
import { TagServiceService } from './services/TagServiceService';
import { TrailersServiceService } from './services/TrailersServiceService';
import { TvShowsServiceService } from './services/TvShowsServiceService';
import { UniversalAudioServiceService } from './services/UniversalAudioServiceService';
import { UserActivityApiService } from './services/UserActivityApiService';
import { UserLibraryServiceService } from './services/UserLibraryServiceService';
import { UserServiceService } from './services/UserServiceService';
import { UserViewsServiceService } from './services/UserViewsServiceService';
import { VideoHlsServiceService } from './services/VideoHlsServiceService';
import { VideoServiceService } from './services/VideoServiceService';
import { VideosServiceService } from './services/VideosServiceService';
type HttpRequestConstructor = new (config: OpenAPIConfig) => BaseHttpRequest;
export class EmbyClient {
    public readonly activityLogService: ActivityLogServiceService;
    public readonly artistsService: ArtistsServiceService;
    public readonly audioService: AudioServiceService;
    public readonly bifService: BifServiceService;
    public readonly brandingService: BrandingServiceService;
    public readonly channelService: ChannelServiceService;
    public readonly collectionService: CollectionServiceService;
    public readonly configurationService: ConfigurationServiceService;
    public readonly connectService: ConnectServiceService;
    public readonly dashboardService: DashboardServiceService;
    public readonly deviceService: DeviceServiceService;
    public readonly displayPreferencesService: DisplayPreferencesServiceService;
    public readonly dlnaServerService: DlnaServerServiceService;
    public readonly dlnaService: DlnaServiceService;
    public readonly dynamicHlsService: DynamicHlsServiceService;
    public readonly encodingInfoService: EncodingInfoServiceService;
    public readonly environmentService: EnvironmentServiceService;
    public readonly filterService: FilterServiceService;
    public readonly gameGenresService: GameGenresServiceService;
    public readonly gamesService: GamesServiceService;
    public readonly genresService: GenresServiceService;
    public readonly hlsSegmentService: HlsSegmentServiceService;
    public readonly imageByNameService: ImageByNameServiceService;
    public readonly imageService: ImageServiceService;
    public readonly instantMixService: InstantMixServiceService;
    public readonly itemLookupService: ItemLookupServiceService;
    public readonly itemRefreshService: ItemRefreshServiceService;
    public readonly itemsService: ItemsServiceService;
    public readonly itemUpdateService: ItemUpdateServiceService;
    public readonly libraryService: LibraryServiceService;
    public readonly libraryStructureService: LibraryStructureServiceService;
    public readonly liveTvService: LiveTvServiceService;
    public readonly localizationService: LocalizationServiceService;
    public readonly mediaInfoService: MediaInfoServiceService;
    public readonly moviesService: MoviesServiceService;
    public readonly musicGenresService: MusicGenresServiceService;
    public readonly newsService: NewsServiceService;
    public readonly notificationsService: NotificationsServiceService;
    public readonly officialRatingService: OfficialRatingServiceService;
    public readonly openApiService: OpenApiServiceService;
    public readonly packageService: PackageServiceService;
    public readonly personsService: PersonsServiceService;
    public readonly playlistService: PlaylistServiceService;
    public readonly playstateService: PlaystateServiceService;
    public readonly pluginService: PluginServiceService;
    public readonly remoteImageService: RemoteImageServiceService;
    public readonly reportsService: ReportsServiceService;
    public readonly scheduledTaskService: ScheduledTaskServiceService;
    public readonly searchService: SearchServiceService;
    public readonly serverApiEndpoints: ServerApiEndpointsService;
    public readonly sessionsService: SessionsServiceService;
    public readonly studiosService: StudiosServiceService;
    public readonly subtitleService: SubtitleServiceService;
    public readonly suggestionsService: SuggestionsServiceService;
    public readonly syncService: SyncServiceService;
    public readonly systemService: SystemServiceService;
    public readonly tagService: TagServiceService;
    public readonly trailersService: TrailersServiceService;
    public readonly tvShowsService: TvShowsServiceService;
    public readonly universalAudioService: UniversalAudioServiceService;
    public readonly userActivityApi: UserActivityApiService;
    public readonly userLibraryService: UserLibraryServiceService;
    public readonly userService: UserServiceService;
    public readonly userViewsService: UserViewsServiceService;
    public readonly videoHlsService: VideoHlsServiceService;
    public readonly videoService: VideoServiceService;
    public readonly videosService: VideosServiceService;
    public readonly request: BaseHttpRequest;
    constructor(config?: Partial<OpenAPIConfig>, HttpRequest: HttpRequestConstructor = AxiosHttpRequest) {
        this.request = new HttpRequest({
            BASE: config?.BASE ?? 'https://home.ourflix.de:32865/emby',
            VERSION: config?.VERSION ?? '4.1.1.0',
            WITH_CREDENTIALS: config?.WITH_CREDENTIALS ?? false,
            CREDENTIALS: config?.CREDENTIALS ?? 'include',
            TOKEN: config?.TOKEN,
            USERNAME: config?.USERNAME,
            PASSWORD: config?.PASSWORD,
            HEADERS: config?.HEADERS,
            ENCODE_PATH: config?.ENCODE_PATH,
        });
        this.activityLogService = new ActivityLogServiceService(this.request);
        this.artistsService = new ArtistsServiceService(this.request);
        this.audioService = new AudioServiceService(this.request);
        this.bifService = new BifServiceService(this.request);
        this.brandingService = new BrandingServiceService(this.request);
        this.channelService = new ChannelServiceService(this.request);
        this.collectionService = new CollectionServiceService(this.request);
        this.configurationService = new ConfigurationServiceService(this.request);
        this.connectService = new ConnectServiceService(this.request);
        this.dashboardService = new DashboardServiceService(this.request);
        this.deviceService = new DeviceServiceService(this.request);
        this.displayPreferencesService = new DisplayPreferencesServiceService(this.request);
        this.dlnaServerService = new DlnaServerServiceService(this.request);
        this.dlnaService = new DlnaServiceService(this.request);
        this.dynamicHlsService = new DynamicHlsServiceService(this.request);
        this.encodingInfoService = new EncodingInfoServiceService(this.request);
        this.environmentService = new EnvironmentServiceService(this.request);
        this.filterService = new FilterServiceService(this.request);
        this.gameGenresService = new GameGenresServiceService(this.request);
        this.gamesService = new GamesServiceService(this.request);
        this.genresService = new GenresServiceService(this.request);
        this.hlsSegmentService = new HlsSegmentServiceService(this.request);
        this.imageByNameService = new ImageByNameServiceService(this.request);
        this.imageService = new ImageServiceService(this.request);
        this.instantMixService = new InstantMixServiceService(this.request);
        this.itemLookupService = new ItemLookupServiceService(this.request);
        this.itemRefreshService = new ItemRefreshServiceService(this.request);
        this.itemsService = new ItemsServiceService(this.request);
        this.itemUpdateService = new ItemUpdateServiceService(this.request);
        this.libraryService = new LibraryServiceService(this.request);
        this.libraryStructureService = new LibraryStructureServiceService(this.request);
        this.liveTvService = new LiveTvServiceService(this.request);
        this.localizationService = new LocalizationServiceService(this.request);
        this.mediaInfoService = new MediaInfoServiceService(this.request);
        this.moviesService = new MoviesServiceService(this.request);
        this.musicGenresService = new MusicGenresServiceService(this.request);
        this.newsService = new NewsServiceService(this.request);
        this.notificationsService = new NotificationsServiceService(this.request);
        this.officialRatingService = new OfficialRatingServiceService(this.request);
        this.openApiService = new OpenApiServiceService(this.request);
        this.packageService = new PackageServiceService(this.request);
        this.personsService = new PersonsServiceService(this.request);
        this.playlistService = new PlaylistServiceService(this.request);
        this.playstateService = new PlaystateServiceService(this.request);
        this.pluginService = new PluginServiceService(this.request);
        this.remoteImageService = new RemoteImageServiceService(this.request);
        this.reportsService = new ReportsServiceService(this.request);
        this.scheduledTaskService = new ScheduledTaskServiceService(this.request);
        this.searchService = new SearchServiceService(this.request);
        this.serverApiEndpoints = new ServerApiEndpointsService(this.request);
        this.sessionsService = new SessionsServiceService(this.request);
        this.studiosService = new StudiosServiceService(this.request);
        this.subtitleService = new SubtitleServiceService(this.request);
        this.suggestionsService = new SuggestionsServiceService(this.request);
        this.syncService = new SyncServiceService(this.request);
        this.systemService = new SystemServiceService(this.request);
        this.tagService = new TagServiceService(this.request);
        this.trailersService = new TrailersServiceService(this.request);
        this.tvShowsService = new TvShowsServiceService(this.request);
        this.universalAudioService = new UniversalAudioServiceService(this.request);
        this.userActivityApi = new UserActivityApiService(this.request);
        this.userLibraryService = new UserLibraryServiceService(this.request);
        this.userService = new UserServiceService(this.request);
        this.userViewsService = new UserViewsServiceService(this.request);
        this.videoHlsService = new VideoHlsServiceService(this.request);
        this.videoService = new VideoServiceService(this.request);
        this.videosService = new VideosServiceService(this.request);
    }
}

