// This file is auto-generated by @hey-api/openapi-ts

export const $QueryResult_BaseItemDto = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BaseItemDto'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $BaseItemDto = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        OriginalTitle: {
            type: 'string'
        },
        ServerId: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        Etag: {
            type: 'string'
        },
        PlaylistItemId: {
            type: 'string'
        },
        DateCreated: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        ExtraType: {
            type: 'string'
        },
        AirsBeforeSeasonNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        AirsAfterSeasonNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        AirsBeforeEpisodeNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        DisplaySpecialsWithSeasons: {
            type: 'boolean',
            nullable: true
        },
        CanDelete: {
            type: 'boolean',
            nullable: true
        },
        CanDownload: {
            type: 'boolean',
            nullable: true
        },
        HasSubtitles: {
            type: 'boolean',
            nullable: true
        },
        SupportsResume: {
            type: 'boolean',
            nullable: true
        },
        PreferredMetadataLanguage: {
            type: 'string'
        },
        PreferredMetadataCountryCode: {
            type: 'string'
        },
        SupportsSync: {
            type: 'boolean',
            nullable: true
        },
        Container: {
            type: 'string'
        },
        SortName: {
            type: 'string'
        },
        ForcedSortName: {
            type: 'string'
        },
        Video3DFormat: {
            enum: ['HalfSideBySide', 'FullSideBySide', 'FullTopAndBottom', 'HalfTopAndBottom', 'MVC'],
            type: 'string'
        },
        PremiereDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        ExternalUrls: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ExternalUrl'
            }
        },
        MediaSources: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MediaSourceInfo'
            }
        },
        CriticRating: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        GameSystemId: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        GameSystem: {
            type: 'string'
        },
        ProductionLocations: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        Path: {
            type: 'string'
        },
        OfficialRating: {
            type: 'string'
        },
        CustomRating: {
            type: 'string'
        },
        ChannelId: {
            type: 'string'
        },
        ChannelName: {
            type: 'string'
        },
        Overview: {
            type: 'string'
        },
        Taglines: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        Genres: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        CommunityRating: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        RunTimeTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        PlayAccess: {
            enum: ['Full', 'None'],
            type: 'string'
        },
        AspectRatio: {
            type: 'string'
        },
        ProductionYear: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        Number: {
            type: 'string'
        },
        ChannelNumber: {
            type: 'string'
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        IndexNumberEnd: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        RemoteTrailers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MediaUrl'
            }
        },
        ProviderIds: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        IsFolder: {
            type: 'boolean',
            nullable: true
        },
        ParentId: {
            type: 'string'
        },
        Type: {
            type: 'string'
        },
        People: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BaseItemPerson'
            }
        },
        Studios: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NameLongIdPair'
            }
        },
        GenreItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NameLongIdPair'
            }
        },
        ParentLogoItemId: {
            type: 'string'
        },
        ParentBackdropItemId: {
            type: 'string'
        },
        ParentBackdropImageTags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        LocalTrailerCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        UserData: {
            '$ref': '#/components/schemas/UserItemDataDto'
        },
        RecursiveItemCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ChildCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        SeriesName: {
            type: 'string'
        },
        SeriesId: {
            type: 'string'
        },
        SeasonId: {
            type: 'string'
        },
        SpecialFeatureCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        DisplayPreferencesId: {
            type: 'string'
        },
        Status: {
            type: 'string'
        },
        AirTime: {
            type: 'string'
        },
        AirDays: {
            type: 'array',
            items: {
                enum: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
                type: 'string'
            }
        },
        Tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        PrimaryImageAspectRatio: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        Artists: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ArtistItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NameIdPair'
            }
        },
        Album: {
            type: 'string'
        },
        CollectionType: {
            type: 'string'
        },
        DisplayOrder: {
            type: 'string'
        },
        AlbumId: {
            type: 'string'
        },
        AlbumPrimaryImageTag: {
            type: 'string'
        },
        SeriesPrimaryImageTag: {
            type: 'string'
        },
        AlbumArtist: {
            type: 'string'
        },
        AlbumArtists: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NameIdPair'
            }
        },
        SeasonName: {
            type: 'string'
        },
        MediaStreams: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MediaStream'
            }
        },
        PartCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ImageTags: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        BackdropImageTags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ParentLogoImageTag: {
            type: 'string'
        },
        ParentArtItemId: {
            type: 'string'
        },
        ParentArtImageTag: {
            type: 'string'
        },
        SeriesThumbImageTag: {
            type: 'string'
        },
        SeriesStudio: {
            type: 'string'
        },
        ParentThumbItemId: {
            type: 'string'
        },
        ParentThumbImageTag: {
            type: 'string'
        },
        ParentPrimaryImageItemId: {
            type: 'string'
        },
        ParentPrimaryImageTag: {
            type: 'string'
        },
        Chapters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ChapterInfo'
            }
        },
        LocationType: {
            enum: ['FileSystem', 'Virtual'],
            type: 'string'
        },
        MediaType: {
            type: 'string'
        },
        EndDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        LockedFields: {
            type: 'array',
            items: {
                enum: ['Cast', 'Genres', 'ProductionLocations', 'Studios', 'Tags', 'Name', 'Overview', 'Runtime', 'OfficialRating'],
                type: 'string'
            }
        },
        LockData: {
            type: 'boolean',
            nullable: true
        },
        Width: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        Height: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        CameraMake: {
            type: 'string'
        },
        CameraModel: {
            type: 'string'
        },
        Software: {
            type: 'string'
        },
        ExposureTime: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        FocalLength: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        ImageOrientation: {
            enum: ['TopLeft', 'TopRight', 'BottomRight', 'BottomLeft', 'LeftTop', 'RightTop', 'RightBottom', 'LeftBottom'],
            type: 'string'
        },
        Aperture: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        ShutterSpeed: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        Latitude: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        Longitude: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        Altitude: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        IsoSpeedRating: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        SeriesTimerId: {
            type: 'string'
        },
        ChannelPrimaryImageTag: {
            type: 'string'
        },
        StartDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        CompletionPercentage: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        IsRepeat: {
            type: 'boolean',
            nullable: true
        },
        IsNew: {
            type: 'boolean',
            nullable: true
        },
        EpisodeTitle: {
            type: 'string'
        },
        IsMovie: {
            type: 'boolean',
            nullable: true
        },
        IsSports: {
            type: 'boolean',
            nullable: true
        },
        IsSeries: {
            type: 'boolean',
            nullable: true
        },
        IsLive: {
            type: 'boolean',
            nullable: true
        },
        IsNews: {
            type: 'boolean',
            nullable: true
        },
        IsKids: {
            type: 'boolean',
            nullable: true
        },
        IsPremiere: {
            type: 'boolean',
            nullable: true
        },
        TimerId: {
            type: 'string'
        },
        CurrentProgram: {
            '$ref': '#/components/schemas/BaseItemDto'
        },
        MovieCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        SeriesCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        AlbumCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        SongCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MusicVideoCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        }
    }
} as const;

export const $ExternalUrl = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Url: {
            type: 'string'
        }
    }
} as const;

export const $MediaSourceInfo = {
    type: 'object',
    properties: {
        Protocol: {
            enum: ['File', 'Http', 'Rtmp', 'Rtsp', 'Udp', 'Rtp', 'Ftp', 'Mms'],
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        Path: {
            type: 'string'
        },
        EncoderPath: {
            type: 'string'
        },
        EncoderProtocol: {
            enum: ['File', 'Http', 'Rtmp', 'Rtsp', 'Udp', 'Rtp', 'Ftp', 'Mms'],
            type: 'string'
        },
        Type: {
            enum: ['Default', 'Grouping', 'Placeholder'],
            type: 'string'
        },
        Container: {
            type: 'string'
        },
        Size: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        Name: {
            type: 'string'
        },
        IsRemote: {
            type: 'boolean'
        },
        RunTimeTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        SupportsTranscoding: {
            type: 'boolean'
        },
        SupportsDirectStream: {
            type: 'boolean'
        },
        SupportsDirectPlay: {
            type: 'boolean'
        },
        IsInfiniteStream: {
            type: 'boolean'
        },
        RequiresOpening: {
            type: 'boolean'
        },
        OpenToken: {
            type: 'string'
        },
        RequiresClosing: {
            type: 'boolean'
        },
        LiveStreamId: {
            type: 'string'
        },
        BufferMs: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        RequiresLooping: {
            type: 'boolean'
        },
        SupportsProbing: {
            type: 'boolean'
        },
        Video3DFormat: {
            enum: ['HalfSideBySide', 'FullSideBySide', 'FullTopAndBottom', 'HalfTopAndBottom', 'MVC'],
            type: 'string'
        },
        MediaStreams: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MediaStream'
            }
        },
        Formats: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        Bitrate: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        Timestamp: {
            enum: ['None', 'Zero', 'Valid'],
            type: 'string'
        },
        RequiredHttpHeaders: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        TranscodingUrl: {
            type: 'string'
        },
        TranscodingSubProtocol: {
            type: 'string'
        },
        TranscodingContainer: {
            type: 'string'
        },
        AnalyzeDurationMs: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ReadAtNativeFramerate: {
            type: 'boolean'
        },
        DefaultAudioStreamIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        DefaultSubtitleStreamIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        }
    }
} as const;

export const $MediaStream = {
    type: 'object',
    properties: {
        Codec: {
            type: 'string'
        },
        CodecTag: {
            type: 'string'
        },
        Language: {
            type: 'string'
        },
        ColorTransfer: {
            type: 'string'
        },
        ColorPrimaries: {
            type: 'string'
        },
        ColorSpace: {
            type: 'string'
        },
        Comment: {
            type: 'string'
        },
        TimeBase: {
            type: 'string'
        },
        CodecTimeBase: {
            type: 'string'
        },
        Title: {
            type: 'string'
        },
        Extradata: {
            type: 'string'
        },
        VideoRange: {
            type: 'string'
        },
        DisplayTitle: {
            type: 'string'
        },
        DisplayLanguage: {
            type: 'string'
        },
        NalLengthSize: {
            type: 'string'
        },
        IsInterlaced: {
            type: 'boolean'
        },
        IsAVC: {
            type: 'boolean',
            nullable: true
        },
        ChannelLayout: {
            type: 'string'
        },
        BitRate: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        BitDepth: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        RefFrames: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PacketLength: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        Channels: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        SampleRate: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        IsDefault: {
            type: 'boolean'
        },
        IsForced: {
            type: 'boolean'
        },
        Height: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        Width: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        AverageFrameRate: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        RealFrameRate: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        Profile: {
            type: 'string'
        },
        Type: {
            enum: ['Audio', 'Video', 'Subtitle', 'EmbeddedImage'],
            type: 'string'
        },
        AspectRatio: {
            type: 'string'
        },
        Index: {
            type: 'integer',
            format: 'int32'
        },
        Score: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        IsExternal: {
            type: 'boolean'
        },
        DeliveryMethod: {
            enum: ['Encode', 'Embed', 'External', 'Hls'],
            type: 'string'
        },
        DeliveryUrl: {
            type: 'string'
        },
        IsExternalUrl: {
            type: 'boolean',
            nullable: true
        },
        IsTextSubtitleStream: {
            type: 'boolean'
        },
        SupportsExternalStream: {
            type: 'boolean'
        },
        Path: {
            type: 'string'
        },
        PixelFormat: {
            type: 'string'
        },
        Level: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        IsAnamorphic: {
            type: 'boolean',
            nullable: true
        }
    }
} as const;

export const $MediaUrl = {
    type: 'object',
    properties: {
        Url: {
            type: 'string'
        },
        Name: {
            type: 'string'
        }
    }
} as const;

export const $BaseItemPerson = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        Role: {
            type: 'string'
        },
        Type: {
            enum: ['Actor', 'Director', 'Writer', 'Producer', 'GuestStar', 'Composer', 'Conductor', 'Lyricist'],
            type: 'string'
        },
        PrimaryImageTag: {
            type: 'string'
        }
    }
} as const;

export const $NameLongIdPair = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Id: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $UserItemDataDto = {
    type: 'object',
    properties: {
        Rating: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        PlayedPercentage: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        UnplayedItemCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PlaybackPositionTicks: {
            type: 'integer',
            format: 'int64'
        },
        PlayCount: {
            type: 'integer',
            format: 'int32'
        },
        IsFavorite: {
            type: 'boolean'
        },
        Likes: {
            type: 'boolean',
            nullable: true
        },
        LastPlayedDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        Played: {
            type: 'boolean'
        },
        Key: {
            type: 'string'
        },
        ItemId: {
            type: 'string'
        }
    }
} as const;

export const $NameIdPair = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Id: {
            type: 'string'
        }
    }
} as const;

export const $ChapterInfo = {
    type: 'object',
    properties: {
        StartPositionTicks: {
            type: 'integer',
            format: 'int64'
        },
        Name: {
            type: 'string'
        },
        ImageTag: {
            type: 'string'
        }
    }
} as const;

export const $QueryResult_UserLibrary_TagItem = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UserLibrary.TagItem'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $UserLibrary_TagItem = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        }
    }
} as const;

export const $Collections_CollectionCreationResult = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        }
    }
} as const;

export const $QueryResult_Devices_DeviceInfo = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Devices.DeviceInfo'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $Devices_DeviceInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        LastUserName: {
            type: 'string'
        },
        AppName: {
            type: 'string'
        },
        AppVersion: {
            type: 'string'
        },
        LastUserId: {
            type: 'string',
            format: 'guid'
        },
        DateLastActivity: {
            type: 'string',
            format: 'date-time'
        },
        IconUrl: {
            type: 'string'
        }
    }
} as const;

export const $QueryResult_UserLibrary_OfficialRatingItem = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UserLibrary.OfficialRatingItem'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $UserLibrary_OfficialRatingItem = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        }
    }
} as const;

export const $Updates_PackageInfo = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        shortDescription: {
            type: 'string'
        },
        overview: {
            type: 'string'
        },
        isPremium: {
            type: 'boolean'
        },
        adult: {
            type: 'boolean'
        },
        richDescUrl: {
            type: 'string'
        },
        thumbImage: {
            type: 'string'
        },
        previewImage: {
            type: 'string'
        },
        type: {
            type: 'string'
        },
        targetFilename: {
            type: 'string'
        },
        owner: {
            type: 'string'
        },
        category: {
            type: 'string'
        },
        tileColor: {
            type: 'string'
        },
        featureId: {
            type: 'string'
        },
        regInfo: {
            type: 'string'
        },
        price: {
            type: 'number',
            format: 'float'
        },
        targetSystem: {
            enum: ['Server', 'MBTheater', 'MBClassic'],
            type: 'string'
        },
        guid: {
            type: 'string'
        },
        totalRatings: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        avgRating: {
            type: 'number',
            format: 'float'
        },
        isRegistered: {
            type: 'boolean'
        },
        expDate: {
            type: 'string',
            format: 'date-time'
        },
        versions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Updates.PackageVersionInfo'
            }
        },
        enableInAppStore: {
            type: 'boolean'
        },
        installs: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $Updates_PackageVersionInfo = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        guid: {
            type: 'string'
        },
        versionStr: {
            type: 'string'
        },
        classification: {
            enum: ['Release', 'Beta', 'Dev'],
            type: 'string'
        },
        description: {
            type: 'string'
        },
        requiredVersionStr: {
            type: 'string'
        },
        sourceUrl: {
            type: 'string'
        },
        checksum: {
            type: 'string'
        },
        targetFilename: {
            type: 'string'
        },
        infoUrl: {
            type: 'string'
        },
        runtimes: {
            type: 'string'
        }
    }
} as const;

export const $Playlists_PlaylistCreationResult = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        }
    }
} as const;

export const $Plugins_PluginInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Version: {
            type: 'string'
        },
        ConfigurationFileName: {
            type: 'string'
        },
        Description: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        ImageTag: {
            type: 'string'
        }
    }
} as const;

export const $Tasks_TaskInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        State: {
            enum: ['Idle', 'Cancelling', 'Running'],
            type: 'string'
        },
        CurrentProgressPercentage: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        Id: {
            type: 'string'
        },
        LastExecutionResult: {
            '$ref': '#/components/schemas/Tasks.TaskResult'
        },
        Triggers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Tasks.TaskTriggerInfo'
            }
        },
        Description: {
            type: 'string'
        },
        Category: {
            type: 'string'
        },
        IsHidden: {
            type: 'boolean'
        },
        Key: {
            type: 'string'
        }
    }
} as const;

export const $Tasks_TaskResult = {
    type: 'object',
    properties: {
        StartTimeUtc: {
            type: 'string',
            format: 'date-time'
        },
        EndTimeUtc: {
            type: 'string',
            format: 'date-time'
        },
        Status: {
            enum: ['Completed', 'Failed', 'Cancelled', 'Aborted'],
            type: 'string'
        },
        Name: {
            type: 'string'
        },
        Key: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        ErrorMessage: {
            type: 'string'
        },
        LongErrorMessage: {
            type: 'string'
        }
    }
} as const;

export const $Tasks_TaskTriggerInfo = {
    type: 'object',
    properties: {
        Type: {
            type: 'string'
        },
        TimeOfDayTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        IntervalTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        SystemEvent: {
            enum: ['WakeFromSleep', 'DisplayConfigurationChange'],
            type: 'string'
        },
        DayOfWeek: {
            enum: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
            type: 'string'
        },
        MaxRuntimeTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        }
    }
} as const;

export const $Session_SessionInfo = {
    type: 'object',
    properties: {
        PlayState: {
            '$ref': '#/components/schemas/PlayerStateInfo'
        },
        AdditionalUsers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SessionUserInfo'
            }
        },
        Capabilities: {
            '$ref': '#/components/schemas/ClientCapabilities'
        },
        RemoteEndPoint: {
            type: 'string'
        },
        PlayableMediaTypes: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        PlaylistItemId: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        ServerId: {
            type: 'string'
        },
        UserId: {
            type: 'string'
        },
        UserName: {
            type: 'string'
        },
        UserPrimaryImageTag: {
            type: 'string'
        },
        Client: {
            type: 'string'
        },
        LastActivityDate: {
            type: 'string',
            format: 'date-time'
        },
        DeviceName: {
            type: 'string'
        },
        DeviceType: {
            type: 'string'
        },
        NowPlayingItem: {
            '$ref': '#/components/schemas/BaseItemDto'
        },
        DeviceId: {
            type: 'string'
        },
        ApplicationVersion: {
            type: 'string'
        },
        AppIconUrl: {
            type: 'string'
        },
        SupportedCommands: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        TranscodingInfo: {
            '$ref': '#/components/schemas/TranscodingInfo'
        },
        SupportsRemoteControl: {
            type: 'boolean'
        }
    }
} as const;

export const $PlayerStateInfo = {
    type: 'object',
    properties: {
        PositionTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        CanSeek: {
            type: 'boolean'
        },
        IsPaused: {
            type: 'boolean'
        },
        IsMuted: {
            type: 'boolean'
        },
        VolumeLevel: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        AudioStreamIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        SubtitleStreamIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MediaSourceId: {
            type: 'string'
        },
        PlayMethod: {
            enum: ['Transcode', 'DirectStream', 'DirectPlay'],
            type: 'string'
        },
        RepeatMode: {
            enum: ['RepeatNone', 'RepeatAll', 'RepeatOne'],
            type: 'string'
        }
    }
} as const;

export const $SessionUserInfo = {
    type: 'object',
    properties: {
        UserId: {
            type: 'string'
        },
        UserName: {
            type: 'string'
        },
        UserInternalId: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $ClientCapabilities = {
    type: 'object',
    properties: {
        PlayableMediaTypes: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        SupportedCommands: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        SupportsMediaControl: {
            type: 'boolean'
        },
        PushToken: {
            type: 'string'
        },
        PushTokenType: {
            type: 'string'
        },
        SupportsPersistentIdentifier: {
            type: 'boolean'
        },
        SupportsSync: {
            type: 'boolean'
        },
        DeviceProfile: {
            '$ref': '#/components/schemas/Dlna.DeviceProfile'
        },
        IconUrl: {
            type: 'string'
        },
        AppId: {
            type: 'string'
        }
    }
} as const;

export const $Dlna_DeviceProfile = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        Identification: {
            '$ref': '#/components/schemas/Dlna.DeviceIdentification'
        },
        FriendlyName: {
            type: 'string'
        },
        Manufacturer: {
            type: 'string'
        },
        ManufacturerUrl: {
            type: 'string'
        },
        ModelName: {
            type: 'string'
        },
        ModelDescription: {
            type: 'string'
        },
        ModelNumber: {
            type: 'string'
        },
        ModelUrl: {
            type: 'string'
        },
        SerialNumber: {
            type: 'string'
        },
        EnableAlbumArtInDidl: {
            type: 'boolean'
        },
        EnableSingleAlbumArtLimit: {
            type: 'boolean'
        },
        EnableSingleSubtitleLimit: {
            type: 'boolean'
        },
        SupportedMediaTypes: {
            type: 'string'
        },
        UserId: {
            type: 'string'
        },
        AlbumArtPn: {
            type: 'string'
        },
        MaxAlbumArtWidth: {
            type: 'integer',
            format: 'int32'
        },
        MaxAlbumArtHeight: {
            type: 'integer',
            format: 'int32'
        },
        MaxIconWidth: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MaxIconHeight: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MaxStreamingBitrate: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        MaxStaticBitrate: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        MusicStreamingTranscodingBitrate: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MaxStaticMusicBitrate: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        SonyAggregationFlags: {
            type: 'string'
        },
        ProtocolInfo: {
            type: 'string'
        },
        TimelineOffsetSeconds: {
            type: 'integer',
            format: 'int32'
        },
        RequiresPlainVideoItems: {
            type: 'boolean'
        },
        RequiresPlainFolders: {
            type: 'boolean'
        },
        EnableMSMediaReceiverRegistrar: {
            type: 'boolean'
        },
        IgnoreTranscodeByteRangeRequests: {
            type: 'boolean'
        },
        XmlRootAttributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Dlna.XmlAttribute'
            }
        },
        DirectPlayProfiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Dlna.DirectPlayProfile'
            }
        },
        TranscodingProfiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Dlna.TranscodingProfile'
            }
        },
        ContainerProfiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Dlna.ContainerProfile'
            }
        },
        CodecProfiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Dlna.CodecProfile'
            }
        },
        ResponseProfiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Dlna.ResponseProfile'
            }
        },
        SubtitleProfiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Dlna.SubtitleProfile'
            }
        }
    }
} as const;

export const $Dlna_DeviceIdentification = {
    type: 'object',
    properties: {
        FriendlyName: {
            type: 'string'
        },
        ModelNumber: {
            type: 'string'
        },
        SerialNumber: {
            type: 'string'
        },
        ModelName: {
            type: 'string'
        },
        ModelDescription: {
            type: 'string'
        },
        DeviceDescription: {
            type: 'string'
        },
        ModelUrl: {
            type: 'string'
        },
        Manufacturer: {
            type: 'string'
        },
        ManufacturerUrl: {
            type: 'string'
        },
        Headers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Dlna.HttpHeaderInfo'
            }
        }
    }
} as const;

export const $Dlna_HttpHeaderInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Value: {
            type: 'string'
        },
        Match: {
            enum: ['Equals', 'Regex', 'Substring'],
            type: 'string'
        }
    }
} as const;

export const $Dlna_XmlAttribute = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Value: {
            type: 'string'
        }
    }
} as const;

export const $Dlna_DirectPlayProfile = {
    type: 'object',
    properties: {
        Container: {
            type: 'string'
        },
        AudioCodec: {
            type: 'string'
        },
        VideoCodec: {
            type: 'string'
        },
        Type: {
            enum: ['Audio', 'Video', 'Photo'],
            type: 'string'
        }
    }
} as const;

export const $Dlna_TranscodingProfile = {
    type: 'object',
    properties: {
        Container: {
            type: 'string'
        },
        Type: {
            enum: ['Audio', 'Video', 'Photo'],
            type: 'string'
        },
        VideoCodec: {
            type: 'string'
        },
        AudioCodec: {
            type: 'string'
        },
        Protocol: {
            type: 'string'
        },
        EstimateContentLength: {
            type: 'boolean'
        },
        EnableMpegtsM2TsMode: {
            type: 'boolean'
        },
        TranscodeSeekInfo: {
            enum: ['Auto', 'Bytes'],
            type: 'string'
        },
        CopyTimestamps: {
            type: 'boolean'
        },
        Context: {
            enum: ['Streaming', 'Static'],
            type: 'string'
        },
        MaxAudioChannels: {
            type: 'string'
        },
        MinSegments: {
            type: 'integer',
            format: 'int32'
        },
        SegmentLength: {
            type: 'integer',
            format: 'int32'
        },
        BreakOnNonKeyFrames: {
            type: 'boolean'
        },
        ManifestSubtitles: {
            type: 'string'
        }
    }
} as const;

export const $Dlna_ContainerProfile = {
    type: 'object',
    properties: {
        Type: {
            enum: ['Audio', 'Video', 'Photo'],
            type: 'string'
        },
        Conditions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Dlna.ProfileCondition'
            }
        },
        Container: {
            type: 'string'
        }
    }
} as const;

export const $Dlna_ProfileCondition = {
    type: 'object',
    properties: {
        Condition: {
            enum: ['Equals', 'NotEquals', 'LessThanEqual', 'GreaterThanEqual', 'EqualsAny'],
            type: 'string'
        },
        Property: {
            enum: ['AudioChannels', 'AudioBitrate', 'AudioProfile', 'Width', 'Height', 'Has64BitOffsets', 'PacketLength', 'VideoBitDepth', 'VideoBitrate', 'VideoFramerate', 'VideoLevel', 'VideoProfile', 'VideoTimestamp', 'IsAnamorphic', 'RefFrames', 'NumAudioStreams', 'NumVideoStreams', 'IsSecondaryAudio', 'VideoCodecTag', 'IsAvc', 'IsInterlaced', 'AudioSampleRate', 'AudioBitDepth'],
            type: 'string'
        },
        Value: {
            type: 'string'
        },
        IsRequired: {
            type: 'boolean'
        }
    }
} as const;

export const $Dlna_CodecProfile = {
    type: 'object',
    properties: {
        Type: {
            enum: ['Video', 'VideoAudio', 'Audio'],
            type: 'string'
        },
        Conditions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Dlna.ProfileCondition'
            }
        },
        ApplyConditions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Dlna.ProfileCondition'
            }
        },
        Codec: {
            type: 'string'
        },
        Container: {
            type: 'string'
        }
    }
} as const;

export const $Dlna_ResponseProfile = {
    type: 'object',
    properties: {
        Container: {
            type: 'string'
        },
        AudioCodec: {
            type: 'string'
        },
        VideoCodec: {
            type: 'string'
        },
        Type: {
            enum: ['Audio', 'Video', 'Photo'],
            type: 'string'
        },
        OrgPn: {
            type: 'string'
        },
        MimeType: {
            type: 'string'
        },
        Conditions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Dlna.ProfileCondition'
            }
        }
    }
} as const;

export const $Dlna_SubtitleProfile = {
    type: 'object',
    properties: {
        Format: {
            type: 'string'
        },
        Method: {
            enum: ['Encode', 'Embed', 'External', 'Hls'],
            type: 'string'
        },
        DidlMode: {
            type: 'string'
        },
        Language: {
            type: 'string'
        },
        Container: {
            type: 'string'
        }
    }
} as const;

export const $TranscodingInfo = {
    type: 'object',
    properties: {
        AudioCodec: {
            type: 'string'
        },
        VideoCodec: {
            type: 'string'
        },
        Container: {
            type: 'string'
        },
        IsVideoDirect: {
            type: 'boolean'
        },
        IsAudioDirect: {
            type: 'boolean'
        },
        Bitrate: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        Framerate: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        CompletionPercentage: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        TranscodingPositionTicks: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        TranscodingStartPositionTicks: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        Width: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        Height: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        AudioChannels: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        TranscodeReasons: {
            type: 'array',
            items: {
                enum: ['ContainerNotSupported', 'VideoCodecNotSupported', 'AudioCodecNotSupported', 'ContainerBitrateExceedsLimit', 'AudioBitrateNotSupported', 'AudioChannelsNotSupported', 'VideoResolutionNotSupported', 'UnknownVideoStreamInfo', 'UnknownAudioStreamInfo', 'AudioProfileNotSupported', 'AudioSampleRateNotSupported', 'AnamorphicVideoNotSupported', 'InterlacedVideoNotSupported', 'SecondaryAudioNotSupported', 'RefFramesNotSupported', 'VideoBitDepthNotSupported', 'VideoBitrateNotSupported', 'VideoFramerateNotSupported', 'VideoLevelNotSupported', 'VideoProfileNotSupported', 'AudioBitDepthNotSupported', 'SubtitleCodecNotSupported', 'DirectPlayError'],
                type: 'string'
            }
        },
        CurrentCpuUsage: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        AverageCpuUsage: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        CpuHistory: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Tuple_Double-Double'
            }
        },
        CurrentThrottle: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        VideoDecoder: {
            type: 'string'
        },
        VideoDecoderIsHardware: {
            type: 'boolean'
        },
        VideoDecoderMediaType: {
            type: 'string'
        },
        VideoDecoderHwAccel: {
            type: 'string'
        },
        VideoEncoder: {
            type: 'string'
        },
        VideoEncoderIsHardware: {
            type: 'boolean'
        },
        VideoEncoderMediaType: {
            type: 'string'
        },
        VideoEncoderHwAccel: {
            type: 'string'
        }
    }
} as const;

export const $Tuple_Double_Double = {
    type: 'object',
    properties: {
        Item1: {
            type: 'number',
            format: 'double'
        },
        Item2: {
            type: 'number',
            format: 'double'
        }
    }
} as const;

export const $UserDto = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        ServerId: {
            type: 'string'
        },
        ServerName: {
            type: 'string'
        },
        ConnectUserName: {
            type: 'string'
        },
        ConnectLinkType: {
            enum: ['LinkedUser', 'Guest'],
            type: 'string'
        },
        Id: {
            type: 'string',
            format: 'guid'
        },
        PrimaryImageTag: {
            type: 'string'
        },
        HasPassword: {
            type: 'boolean'
        },
        HasConfiguredPassword: {
            type: 'boolean'
        },
        HasConfiguredEasyPassword: {
            type: 'boolean'
        },
        EnableAutoLogin: {
            type: 'boolean',
            nullable: true
        },
        LastLoginDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        LastActivityDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        Configuration: {
            '$ref': '#/components/schemas/Configuration.UserConfiguration'
        },
        Policy: {
            '$ref': '#/components/schemas/Users.UserPolicy'
        },
        PrimaryImageAspectRatio: {
            type: 'number',
            format: 'double',
            nullable: true
        }
    }
} as const;

export const $Configuration_UserConfiguration = {
    type: 'object',
    properties: {
        AudioLanguagePreference: {
            type: 'string'
        },
        PlayDefaultAudioTrack: {
            type: 'boolean'
        },
        SubtitleLanguagePreference: {
            type: 'string'
        },
        DisplayMissingEpisodes: {
            type: 'boolean'
        },
        GroupedFolders: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        SubtitleMode: {
            enum: ['Default', 'Always', 'OnlyForced', 'None', 'Smart'],
            type: 'string'
        },
        DisplayCollectionsView: {
            type: 'boolean'
        },
        EnableLocalPassword: {
            type: 'boolean'
        },
        OrderedViews: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        LatestItemsExcludes: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        MyMediaExcludes: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        HidePlayedInLatest: {
            type: 'boolean'
        },
        RememberAudioSelections: {
            type: 'boolean'
        },
        RememberSubtitleSelections: {
            type: 'boolean'
        },
        EnableNextEpisodeAutoPlay: {
            type: 'boolean'
        }
    }
} as const;

export const $Users_UserPolicy = {
    type: 'object',
    properties: {
        IsAdministrator: {
            type: 'boolean'
        },
        IsHidden: {
            type: 'boolean'
        },
        IsHiddenRemotely: {
            type: 'boolean'
        },
        IsDisabled: {
            type: 'boolean'
        },
        MaxParentalRating: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        BlockedTags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        EnableUserPreferenceAccess: {
            type: 'boolean'
        },
        AccessSchedules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Configuration.AccessSchedule'
            }
        },
        BlockUnratedItems: {
            type: 'array',
            items: {
                enum: ['Movie', 'Trailer', 'Series', 'Music', 'Game', 'Book', 'LiveTvChannel', 'LiveTvProgram', 'ChannelContent', 'Other'],
                type: 'string'
            }
        },
        EnableRemoteControlOfOtherUsers: {
            type: 'boolean'
        },
        EnableSharedDeviceControl: {
            type: 'boolean'
        },
        EnableRemoteAccess: {
            type: 'boolean'
        },
        EnableLiveTvManagement: {
            type: 'boolean'
        },
        EnableLiveTvAccess: {
            type: 'boolean'
        },
        EnableMediaPlayback: {
            type: 'boolean'
        },
        EnableAudioPlaybackTranscoding: {
            type: 'boolean'
        },
        EnableVideoPlaybackTranscoding: {
            type: 'boolean'
        },
        EnablePlaybackRemuxing: {
            type: 'boolean'
        },
        EnableContentDeletion: {
            type: 'boolean'
        },
        EnableContentDeletionFromFolders: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        EnableContentDownloading: {
            type: 'boolean'
        },
        EnableSubtitleDownloading: {
            type: 'boolean'
        },
        EnableSubtitleManagement: {
            type: 'boolean'
        },
        EnableSyncTranscoding: {
            type: 'boolean'
        },
        EnableMediaConversion: {
            type: 'boolean'
        },
        EnabledDevices: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        EnableAllDevices: {
            type: 'boolean'
        },
        EnabledChannels: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        EnableAllChannels: {
            type: 'boolean'
        },
        EnabledFolders: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        EnableAllFolders: {
            type: 'boolean'
        },
        InvalidLoginAttemptCount: {
            type: 'integer',
            format: 'int32'
        },
        EnablePublicSharing: {
            type: 'boolean'
        },
        BlockedMediaFolders: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        BlockedChannels: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        RemoteClientBitrateLimit: {
            type: 'integer',
            format: 'int32'
        },
        AuthenticationProviderId: {
            type: 'string'
        },
        ExcludedSubFolders: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        DisablePremiumFeatures: {
            type: 'boolean'
        }
    }
} as const;

export const $Configuration_AccessSchedule = {
    type: 'object',
    properties: {
        DayOfWeek: {
            enum: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Everyday', 'Weekday', 'Weekend'],
            type: 'string'
        },
        StartHour: {
            type: 'number',
            format: 'double'
        },
        EndHour: {
            type: 'number',
            format: 'double'
        }
    }
} as const;

export const $NameValuePair = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Value: {
            type: 'string'
        }
    }
} as const;

export const $Branding_BrandingOptions = {
    type: 'object',
    properties: {
        LoginDisclaimer: {
            type: 'string'
        },
        CustomCss: {
            type: 'string'
        }
    }
} as const;

export const $Connect_ConnectAuthenticationExchangeResult = {
    type: 'object',
    properties: {
        LocalUserId: {
            type: 'string',
            format: 'guid'
        },
        AccessToken: {
            type: 'string'
        }
    }
} as const;

export const $Devices_DeviceOptions = {
    type: 'object',
    properties: {
        CustomName: {
            type: 'string'
        }
    }
} as const;

export const $Devices_ContentUploadHistory = {
    type: 'object',
    properties: {
        DeviceId: {
            type: 'string'
        },
        FilesUploaded: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Devices.LocalFileInfo'
            }
        }
    }
} as const;

export const $Devices_LocalFileInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        Album: {
            type: 'string'
        },
        MimeType: {
            type: 'string'
        }
    }
} as const;

export const $DisplayPreferences = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        ViewType: {
            type: 'string'
        },
        SortBy: {
            type: 'string'
        },
        IndexBy: {
            type: 'string'
        },
        RememberIndexing: {
            type: 'boolean'
        },
        PrimaryImageHeight: {
            type: 'integer',
            format: 'int32'
        },
        PrimaryImageWidth: {
            type: 'integer',
            format: 'int32'
        },
        CustomPrefs: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        ScrollDirection: {
            enum: ['Horizontal', 'Vertical'],
            type: 'string'
        },
        ShowBackdrop: {
            type: 'boolean'
        },
        RememberSorting: {
            type: 'boolean'
        },
        SortOrder: {
            enum: ['Ascending', 'Descending'],
            type: 'string'
        },
        ShowSidebar: {
            type: 'boolean'
        },
        Client: {
            type: 'string'
        }
    }
} as const;

export const $Dlna_DeviceProfileInfo = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        Name: {
            type: 'string'
        },
        Type: {
            enum: ['System', 'User'],
            type: 'string'
        }
    }
} as const;

export const $ValidatePath = {
    type: 'object',
    properties: {
        ValidateWriteable: {
            type: 'boolean'
        },
        IsFile: {
            type: 'boolean',
            nullable: true
        }
    }
} as const;

export const $DefaultDirectoryBrowserInfo = {
    type: 'object',
    properties: {
        Path: {
            type: 'string'
        }
    }
} as const;

export const $IO_FileSystemEntryInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Path: {
            type: 'string'
        },
        Type: {
            enum: ['File', 'Directory', 'NetworkComputer', 'NetworkShare'],
            type: 'string'
        }
    }
} as const;

export const $GameSystemSummary = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        DisplayName: {
            type: 'string'
        },
        GameCount: {
            type: 'integer',
            format: 'int32'
        },
        GameFileExtensions: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ClientInstalledGameCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $ImageByNameInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Theme: {
            type: 'string'
        },
        Context: {
            type: 'string'
        },
        FileLength: {
            type: 'integer',
            format: 'int64'
        },
        Format: {
            type: 'string'
        }
    }
} as const;

export const $QueryFilters = {
    type: 'object',
    properties: {
        Genres: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NameLongIdPair'
            }
        },
        Studios: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NameLongIdPair'
            }
        },
        Tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const $QueryFiltersLegacy = {
    type: 'object',
    properties: {
        Genres: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        Tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        OfficialRatings: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        Years: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            }
        }
    }
} as const;

export const $ItemCounts = {
    type: 'object',
    properties: {
        MovieCount: {
            type: 'integer',
            format: 'int32'
        },
        SeriesCount: {
            type: 'integer',
            format: 'int32'
        },
        EpisodeCount: {
            type: 'integer',
            format: 'int32'
        },
        GameCount: {
            type: 'integer',
            format: 'int32'
        },
        ArtistCount: {
            type: 'integer',
            format: 'int32'
        },
        ProgramCount: {
            type: 'integer',
            format: 'int32'
        },
        GameSystemCount: {
            type: 'integer',
            format: 'int32'
        },
        TrailerCount: {
            type: 'integer',
            format: 'int32'
        },
        SongCount: {
            type: 'integer',
            format: 'int32'
        },
        AlbumCount: {
            type: 'integer',
            format: 'int32'
        },
        MusicVideoCount: {
            type: 'integer',
            format: 'int32'
        },
        BoxSetCount: {
            type: 'integer',
            format: 'int32'
        },
        BookCount: {
            type: 'integer',
            format: 'int32'
        },
        ItemCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $Library_LibraryOptionsResult = {
    type: 'object',
    properties: {
        MetadataSavers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Library.LibraryOptionInfo'
            }
        },
        MetadataReaders: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Library.LibraryOptionInfo'
            }
        },
        SubtitleFetchers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Library.LibraryOptionInfo'
            }
        },
        TypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Library.LibraryTypeOptions'
            }
        }
    }
} as const;

export const $Library_LibraryOptionInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        DefaultEnabled: {
            type: 'boolean'
        }
    }
} as const;

export const $Library_LibraryTypeOptions = {
    type: 'object',
    properties: {
        Type: {
            type: 'string'
        },
        MetadataFetchers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Library.LibraryOptionInfo'
            }
        },
        ImageFetchers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Library.LibraryOptionInfo'
            }
        },
        SupportedImageTypes: {
            type: 'array',
            items: {
                enum: ['Primary', 'Art', 'Backdrop', 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter', 'BoxRear', 'Thumbnail'],
                type: 'string'
            }
        },
        DefaultImageOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Configuration.ImageOption'
            }
        }
    }
} as const;

export const $Configuration_ImageOption = {
    type: 'object',
    properties: {
        Type: {
            enum: ['Primary', 'Art', 'Backdrop', 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter', 'BoxRear', 'Thumbnail'],
            type: 'string'
        },
        Limit: {
            type: 'integer',
            format: 'int32'
        },
        MinWidth: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $Library_MediaFolder = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        SubFolders: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Library.SubFolder'
            }
        }
    }
} as const;

export const $Library_SubFolder = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        Path: {
            type: 'string'
        }
    }
} as const;

export const $VirtualFolderInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Locations: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        CollectionType: {
            type: 'string'
        },
        LibraryOptions: {
            '$ref': '#/components/schemas/Configuration.LibraryOptions'
        },
        ItemId: {
            type: 'string'
        },
        PrimaryImageItemId: {
            type: 'string'
        },
        RefreshProgress: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        RefreshStatus: {
            type: 'string'
        }
    }
} as const;

export const $Configuration_LibraryOptions = {
    type: 'object',
    properties: {
        EnableArchiveMediaFiles: {
            type: 'boolean'
        },
        EnablePhotos: {
            type: 'boolean'
        },
        EnableRealtimeMonitor: {
            type: 'boolean'
        },
        EnableChapterImageExtraction: {
            type: 'boolean'
        },
        ExtractChapterImagesDuringLibraryScan: {
            type: 'boolean'
        },
        DownloadImagesInAdvance: {
            type: 'boolean'
        },
        PathInfos: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Configuration.MediaPathInfo'
            }
        },
        SaveLocalMetadata: {
            type: 'boolean'
        },
        SaveLocalThumbnailSets: {
            type: 'boolean'
        },
        ImportMissingEpisodes: {
            type: 'boolean'
        },
        EnableAutomaticSeriesGrouping: {
            type: 'boolean'
        },
        EnableEmbeddedTitles: {
            type: 'boolean'
        },
        EnableAudioResume: {
            type: 'boolean'
        },
        AutomaticRefreshIntervalDays: {
            type: 'integer',
            format: 'int32'
        },
        PreferredMetadataLanguage: {
            type: 'string'
        },
        ContentType: {
            type: 'string'
        },
        MetadataCountryCode: {
            type: 'string'
        },
        SeasonZeroDisplayName: {
            type: 'string'
        },
        MetadataSavers: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        DisabledLocalMetadataReaders: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        LocalMetadataReaderOrder: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        DisabledSubtitleFetchers: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        SubtitleFetcherOrder: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        SkipSubtitlesIfEmbeddedSubtitlesPresent: {
            type: 'boolean'
        },
        SkipSubtitlesIfAudioTrackMatches: {
            type: 'boolean'
        },
        SubtitleDownloadLanguages: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        RequirePerfectSubtitleMatch: {
            type: 'boolean'
        },
        SaveSubtitlesWithMedia: {
            type: 'boolean'
        },
        ForcedSubtitlesOnly: {
            type: 'boolean'
        },
        TypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Configuration.TypeOptions'
            }
        },
        CollapseSingleItemFolders: {
            type: 'boolean'
        },
        MinResumePct: {
            type: 'integer',
            format: 'int32'
        },
        MaxResumePct: {
            type: 'integer',
            format: 'int32'
        },
        MinResumeDurationSeconds: {
            type: 'integer',
            format: 'int32'
        },
        ThumbnailImagesIntervalSeconds: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $Configuration_MediaPathInfo = {
    type: 'object',
    properties: {
        Path: {
            type: 'string'
        },
        NetworkPath: {
            type: 'string'
        }
    }
} as const;

export const $Configuration_TypeOptions = {
    type: 'object',
    properties: {
        Type: {
            type: 'string'
        },
        MetadataFetchers: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        MetadataFetcherOrder: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ImageFetchers: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ImageFetcherOrder: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ImageOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Configuration.ImageOption'
            }
        }
    }
} as const;

export const $Library_AddVirtualFolder = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        CollectionType: {
            type: 'string'
        },
        RefreshLibrary: {
            type: 'boolean'
        },
        Paths: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        LibraryOptions: {
            '$ref': '#/components/schemas/Configuration.LibraryOptions'
        }
    }
} as const;

export const $MediaInfo_LiveStreamRequest = {
    type: 'object',
    properties: {
        OpenToken: {
            type: 'string'
        },
        UserId: {
            type: 'string'
        },
        PlaySessionId: {
            type: 'string'
        },
        MaxStreamingBitrate: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        StartTimeTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        AudioStreamIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        SubtitleStreamIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MaxAudioChannels: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        DeviceProfile: {
            '$ref': '#/components/schemas/Dlna.DeviceProfile'
        },
        EnableDirectPlay: {
            type: 'boolean'
        },
        EnableDirectStream: {
            type: 'boolean'
        },
        EnableTranscoding: {
            type: 'boolean'
        },
        AllowVideoStreamCopy: {
            type: 'boolean'
        },
        AllowAudioStreamCopy: {
            type: 'boolean'
        },
        DirectPlayProtocols: {
            type: 'array',
            items: {
                enum: ['File', 'Http', 'Rtmp', 'Rtsp', 'Udp', 'Rtp', 'Ftp', 'Mms'],
                type: 'string'
            }
        }
    }
} as const;

export const $MediaInfo_LiveStreamResponse = {
    type: 'object',
    properties: {
        MediaSource: {
            '$ref': '#/components/schemas/MediaSourceInfo'
        }
    }
} as const;

export const $LiveTv_SetChannelMapping = {
    type: 'object',
    properties: {
        TunerChannelId: {
            type: 'string'
        },
        ProviderChannelId: {
            type: 'string'
        }
    }
} as const;

export const $LiveTv_ListingsProviderInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        SetupUrl: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        Type: {
            type: 'string'
        },
        Username: {
            type: 'string'
        },
        Password: {
            type: 'string'
        },
        ListingsId: {
            type: 'string'
        },
        ZipCode: {
            type: 'string'
        },
        Country: {
            type: 'string'
        },
        Path: {
            type: 'string'
        },
        EnabledTuners: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        EnableAllTuners: {
            type: 'boolean'
        },
        NewsCategories: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        SportsCategories: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        KidsCategories: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        MovieCategories: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ChannelMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NameValuePair'
            }
        },
        MoviePrefix: {
            type: 'string'
        },
        PreferredLanguage: {
            type: 'string'
        },
        UserAgent: {
            type: 'string'
        }
    }
} as const;

export const $LiveTv_TunerHostInfo = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        Url: {
            type: 'string'
        },
        Type: {
            type: 'string'
        },
        DeviceId: {
            type: 'string'
        },
        FriendlyName: {
            type: 'string'
        },
        ImportFavoritesOnly: {
            type: 'boolean'
        },
        AllowHWTranscoding: {
            type: 'boolean'
        },
        Source: {
            type: 'string'
        },
        TunerCount: {
            type: 'integer',
            format: 'int32'
        },
        UserAgent: {
            type: 'string'
        }
    }
} as const;

export const $LiveTv_LiveTvInfo = {
    type: 'object',
    properties: {
        Services: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LiveTv.LiveTvServiceInfo'
            }
        },
        IsEnabled: {
            type: 'boolean'
        },
        EnabledUsers: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const $LiveTv_LiveTvServiceInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        HomePageUrl: {
            type: 'string'
        },
        Status: {
            enum: ['Ok', 'Unavailable'],
            type: 'string'
        },
        StatusMessage: {
            type: 'string'
        },
        Version: {
            type: 'string'
        },
        HasUpdateAvailable: {
            type: 'boolean'
        },
        IsVisible: {
            type: 'boolean'
        },
        Tuners: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const $LiveTv_GetPrograms = {
    type: 'object',
    properties: {
        IsAiring: {
            type: 'boolean',
            nullable: true
        },
        EnableTotalRecordCount: {
            type: 'boolean'
        },
        SeriesTimerId: {
            type: 'string'
        },
        LibrarySeriesId: {
            type: 'string'
        }
    }
} as const;

export const $QueryResult_LiveTv_TimerInfoDto = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LiveTv.TimerInfoDto'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $LiveTv_TimerInfoDto = {
    type: 'object',
    properties: {
        Status: {
            enum: ['New', 'InProgress', 'Completed', 'Cancelled', 'ConflictedOk', 'ConflictedNotOk', 'Error'],
            type: 'string'
        },
        SeriesTimerId: {
            type: 'string'
        },
        ExternalSeriesTimerId: {
            type: 'string'
        },
        RunTimeTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        ProgramInfo: {
            '$ref': '#/components/schemas/BaseItemDto'
        },
        Id: {
            type: 'string'
        },
        Type: {
            type: 'string'
        },
        ServerId: {
            type: 'string'
        },
        ExternalId: {
            type: 'string'
        },
        ChannelId: {
            type: 'string'
        },
        ExternalChannelId: {
            type: 'string'
        },
        ChannelName: {
            type: 'string'
        },
        ChannelPrimaryImageTag: {
            type: 'string'
        },
        ProgramId: {
            type: 'string'
        },
        ExternalProgramId: {
            type: 'string'
        },
        Name: {
            type: 'string'
        },
        Overview: {
            type: 'string'
        },
        StartDate: {
            type: 'string',
            format: 'date-time'
        },
        EndDate: {
            type: 'string',
            format: 'date-time'
        },
        ServiceName: {
            type: 'string'
        },
        Priority: {
            type: 'integer',
            format: 'int32'
        },
        PrePaddingSeconds: {
            type: 'integer',
            format: 'int32'
        },
        PostPaddingSeconds: {
            type: 'integer',
            format: 'int32'
        },
        IsPrePaddingRequired: {
            type: 'boolean'
        },
        ParentBackdropItemId: {
            type: 'string'
        },
        ParentBackdropImageTags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        IsPostPaddingRequired: {
            type: 'boolean'
        },
        KeepUntil: {
            enum: ['UntilDeleted', 'UntilSpaceNeeded', 'UntilWatched', 'UntilDate'],
            type: 'string'
        }
    }
} as const;

export const $QueryResult_LiveTv_SeriesTimerInfoDto = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LiveTv.SeriesTimerInfoDto'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $LiveTv_SeriesTimerInfoDto = {
    type: 'object',
    properties: {
        RecordAnyTime: {
            type: 'boolean'
        },
        SkipEpisodesInLibrary: {
            type: 'boolean'
        },
        RecordAnyChannel: {
            type: 'boolean'
        },
        KeepUpTo: {
            type: 'integer',
            format: 'int32'
        },
        RecordNewOnly: {
            type: 'boolean'
        },
        Days: {
            type: 'array',
            items: {
                enum: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
                type: 'string'
            }
        },
        DayPattern: {
            enum: ['Daily', 'Weekdays', 'Weekends'],
            type: 'string'
        },
        ImageTags: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        ParentThumbItemId: {
            type: 'string'
        },
        ParentThumbImageTag: {
            type: 'string'
        },
        ParentPrimaryImageItemId: {
            type: 'string'
        },
        ParentPrimaryImageTag: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        Type: {
            type: 'string'
        },
        ServerId: {
            type: 'string'
        },
        ExternalId: {
            type: 'string'
        },
        ChannelId: {
            type: 'string'
        },
        ExternalChannelId: {
            type: 'string'
        },
        ChannelName: {
            type: 'string'
        },
        ChannelPrimaryImageTag: {
            type: 'string'
        },
        ProgramId: {
            type: 'string'
        },
        ExternalProgramId: {
            type: 'string'
        },
        Name: {
            type: 'string'
        },
        Overview: {
            type: 'string'
        },
        StartDate: {
            type: 'string',
            format: 'date-time'
        },
        EndDate: {
            type: 'string',
            format: 'date-time'
        },
        ServiceName: {
            type: 'string'
        },
        Priority: {
            type: 'integer',
            format: 'int32'
        },
        PrePaddingSeconds: {
            type: 'integer',
            format: 'int32'
        },
        PostPaddingSeconds: {
            type: 'integer',
            format: 'int32'
        },
        IsPrePaddingRequired: {
            type: 'boolean'
        },
        ParentBackdropItemId: {
            type: 'string'
        },
        ParentBackdropImageTags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        IsPostPaddingRequired: {
            type: 'boolean'
        },
        KeepUntil: {
            enum: ['UntilDeleted', 'UntilSpaceNeeded', 'UntilWatched', 'UntilDate'],
            type: 'string'
        }
    }
} as const;

export const $LiveTv_GuideInfo = {
    type: 'object',
    properties: {
        StartDate: {
            type: 'string',
            format: 'date-time'
        },
        EndDate: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $ParentalRating = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Value: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $Globalization_LocalizatonOption = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Value: {
            type: 'string'
        }
    }
} as const;

export const $Globalization_CountryInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        DisplayName: {
            type: 'string'
        },
        TwoLetterISORegionName: {
            type: 'string'
        },
        ThreeLetterISORegionName: {
            type: 'string'
        }
    }
} as const;

export const $Globalization_CultureDto = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        DisplayName: {
            type: 'string'
        },
        TwoLetterISOLanguageName: {
            type: 'string'
        },
        ThreeLetterISOLanguageName: {
            type: 'string'
        },
        ThreeLetterISOLanguageNames: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const $RecommendationDto = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BaseItemDto'
            }
        },
        RecommendationType: {
            enum: ['SimilarToRecentlyPlayed', 'SimilarToLikedItem', 'HasDirectorFromRecentlyPlayed', 'HasActorFromRecentlyPlayed', 'HasLikedDirector', 'HasLikedActor'],
            type: 'string'
        },
        BaselineItemName: {
            type: 'string'
        },
        CategoryId: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $QueryResult_News_NewsItem = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/News.NewsItem'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $News_NewsItem = {
    type: 'object',
    properties: {
        Title: {
            type: 'string'
        },
        Link: {
            type: 'string'
        },
        Description: {
            type: 'string'
        },
        DescriptionHtml: {
            type: 'string'
        },
        Guid: {
            type: 'string'
        },
        Date: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $Notifications_NotificationTypeInfo = {
    type: 'object',
    properties: {
        Type: {
            type: 'string'
        },
        Name: {
            type: 'string'
        },
        Enabled: {
            type: 'boolean'
        },
        Category: {
            type: 'string'
        },
        IsBasedOnUserEvent: {
            type: 'boolean'
        }
    }
} as const;

export const $Emby_Notifications_Api_NotificationResult = {
    type: 'object',
    properties: {
        Notifications: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Emby.Notifications.Api.Notification'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $Emby_Notifications_Api_Notification = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        UserId: {
            type: 'string'
        },
        Date: {
            type: 'string',
            format: 'date-time'
        },
        IsRead: {
            type: 'boolean'
        },
        Name: {
            type: 'string'
        },
        Description: {
            type: 'string'
        },
        Url: {
            type: 'string'
        },
        Level: {
            enum: ['Normal', 'Warning', 'Error'],
            type: 'string'
        }
    }
} as const;

export const $EmbyReports_Api_Model_ReportResult = {
    type: 'object',
    properties: {
        Rows: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EmbyReports.Api.Model.ReportRow'
            }
        },
        Headers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EmbyReports.Api.Model.ReportHeader'
            }
        },
        Groups: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EmbyReports.Api.Model.ReportGroup'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        },
        IsGrouped: {
            type: 'boolean'
        }
    }
} as const;

export const $EmbyReports_Api_Model_ReportRow = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        HasImageTagsBackdrop: {
            type: 'boolean'
        },
        HasImageTagsPrimary: {
            type: 'boolean'
        },
        HasImageTagsLogo: {
            type: 'boolean'
        },
        HasLocalTrailer: {
            type: 'boolean'
        },
        HasLockData: {
            type: 'boolean'
        },
        HasEmbeddedImage: {
            type: 'boolean'
        },
        HasSubtitles: {
            type: 'boolean'
        },
        HasSpecials: {
            type: 'boolean'
        },
        Columns: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EmbyReports.Api.Model.ReportItem'
            }
        },
        RowType: {
            enum: ['MusicArtist', 'MusicAlbum', 'Book', 'BoxSet', 'Episode', 'Game', 'Video', 'Movie', 'MusicVideo', 'Trailer', 'Season', 'Series', 'Audio', 'BaseItem', 'Artist'],
            type: 'string'
        },
        UserId: {
            type: 'string'
        }
    }
} as const;

export const $EmbyReports_Api_Model_ReportItem = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        Name: {
            type: 'string'
        },
        Image: {
            type: 'string'
        },
        CustomTag: {
            type: 'string'
        }
    }
} as const;

export const $EmbyReports_Api_Model_ReportHeader = {
    type: 'object',
    properties: {
        HeaderFieldType: {
            enum: ['String', 'Boolean', 'Date', 'Time', 'DateTime', 'Int', 'Image', 'Object', 'Minutes'],
            type: 'string'
        },
        Name: {
            type: 'string'
        },
        FieldName: {
            enum: ['None', 'Path', 'Name', 'PremiereDate', 'DateAdded', 'ReleaseDate', 'Runtime', 'PlayCount', 'Season', 'SeasonNumber', 'Series', 'Network', 'Year', 'ParentalRating', 'CommunityRating', 'Trailers', 'Specials', 'GameSystem', 'AlbumArtist', 'Album', 'Disc', 'Track', 'Audio', 'EmbeddedImage', 'Video', 'Resolution', 'Subtitles', 'Genres', 'Countries', 'Status', 'Tracks', 'EpisodeSeries', 'EpisodeSeason', 'EpisodeNumber', 'AudioAlbumArtist', 'MusicArtist', 'AudioAlbum', 'Locked', 'ImagePrimary', 'ImageBackdrop', 'ImageLogo', 'Actor', 'Studios', 'Composer', 'Director', 'GuestStar', 'Producer', 'Writer', 'Artist', 'Years', 'ParentalRatings', 'CommunityRatings', 'Overview', 'ShortOverview', 'Type', 'Date', 'UserPrimaryImage', 'Severity', 'Item', 'User', 'UserId'],
            type: 'string'
        },
        SortField: {
            type: 'string'
        },
        Type: {
            type: 'string'
        },
        ItemViewType: {
            enum: ['None', 'Detail', 'Edit', 'List', 'ItemByNameDetails', 'StatusImage', 'EmbeddedImage', 'SubtitleImage', 'TrailersImage', 'SpecialsImage', 'LockDataImage', 'TagsPrimaryImage', 'TagsBackdropImage', 'TagsLogoImage', 'UserPrimaryImage'],
            type: 'string'
        },
        Visible: {
            type: 'boolean'
        },
        DisplayType: {
            enum: ['None', 'Screen', 'Export', 'ScreenExport'],
            type: 'string'
        },
        ShowHeaderLabel: {
            type: 'boolean'
        },
        CanGroup: {
            type: 'boolean'
        }
    }
} as const;

export const $EmbyReports_Api_Model_ReportGroup = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Rows: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EmbyReports.Api.Model.ReportRow'
            }
        }
    }
} as const;

export const $Search_SearchHintResult = {
    type: 'object',
    properties: {
        SearchHints: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Search.SearchHint'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $Search_SearchHint = {
    type: 'object',
    properties: {
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        Id: {
            type: 'integer',
            format: 'int64'
        },
        Name: {
            type: 'string'
        },
        MatchedTerm: {
            type: 'string'
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ProductionYear: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PrimaryImageTag: {
            type: 'string'
        },
        ThumbImageTag: {
            type: 'string'
        },
        ThumbImageItemId: {
            type: 'string'
        },
        BackdropImageTag: {
            type: 'string'
        },
        BackdropImageItemId: {
            type: 'string'
        },
        Type: {
            type: 'string'
        },
        IsFolder: {
            type: 'boolean',
            nullable: true
        },
        RunTimeTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        MediaType: {
            type: 'string'
        },
        StartDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        EndDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        Series: {
            type: 'string'
        },
        Status: {
            type: 'string'
        },
        Album: {
            type: 'string'
        },
        AlbumId: {
            type: 'integer',
            format: 'int64'
        },
        AlbumArtist: {
            type: 'string'
        },
        Artists: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        SongCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        EpisodeCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ChannelName: {
            type: 'string'
        },
        PrimaryImageAspectRatio: {
            type: 'number',
            format: 'double',
            nullable: true
        }
    }
} as const;

export const $PlaybackStartInfo = {
    type: 'object',
    properties: {
        CanSeek: {
            type: 'boolean'
        },
        Item: {
            '$ref': '#/components/schemas/BaseItemDto'
        },
        NowPlayingQueue: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/QueueItem'
            }
        },
        PlaylistItemId: {
            type: 'string'
        },
        ItemId: {
            type: 'string'
        },
        SessionId: {
            type: 'string'
        },
        MediaSourceId: {
            type: 'string'
        },
        AudioStreamIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        SubtitleStreamIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        IsPaused: {
            type: 'boolean'
        },
        IsMuted: {
            type: 'boolean'
        },
        PositionTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        RunTimeTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        PlaybackStartTimeTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        VolumeLevel: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        Brightness: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        AspectRatio: {
            type: 'string'
        },
        PlayMethod: {
            enum: ['Transcode', 'DirectStream', 'DirectPlay'],
            type: 'string'
        },
        LiveStreamId: {
            type: 'string'
        },
        PlaySessionId: {
            type: 'string'
        },
        RepeatMode: {
            enum: ['RepeatNone', 'RepeatAll', 'RepeatOne'],
            type: 'string'
        }
    }
} as const;

export const $QueueItem = {
    type: 'object',
    properties: {
        Id: {
            type: 'integer',
            format: 'int64'
        },
        PlaylistItemId: {
            type: 'string'
        }
    }
} as const;

export const $Sync_SyncTarget = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Id: {
            type: 'string'
        }
    }
} as const;

export const $QueryResult_Sync_SyncJob = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Sync.SyncJob'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $Sync_SyncJob = {
    type: 'object',
    properties: {
        Id: {
            type: 'integer',
            format: 'int64'
        },
        TargetId: {
            type: 'string'
        },
        TargetName: {
            type: 'string'
        },
        Quality: {
            type: 'string'
        },
        Bitrate: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        Profile: {
            type: 'string'
        },
        Category: {
            enum: ['Latest', 'NextUp', 'Resume'],
            type: 'string'
        },
        ParentId: {
            type: 'integer',
            format: 'int64'
        },
        Progress: {
            type: 'number',
            format: 'double'
        },
        Name: {
            type: 'string'
        },
        Status: {
            enum: ['Queued', 'Converting', 'ReadyToTransfer', 'Transferring', 'Completed', 'CompletedWithError', 'Failed'],
            type: 'string'
        },
        UserId: {
            type: 'integer',
            format: 'int64'
        },
        UnwatchedOnly: {
            type: 'boolean'
        },
        SyncNewContent: {
            type: 'boolean'
        },
        ItemLimit: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        RequestedItemIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        DateCreated: {
            type: 'string',
            format: 'date-time'
        },
        DateLastModified: {
            type: 'string',
            format: 'date-time'
        },
        ItemCount: {
            type: 'integer',
            format: 'int32'
        },
        ParentName: {
            type: 'string'
        },
        PrimaryImageItemId: {
            type: 'string'
        },
        PrimaryImageTag: {
            type: 'string'
        }
    }
} as const;

export const $QueryResult_Sync_Model_SyncJobItem = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Sync.Model.SyncJobItem'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $Sync_Model_SyncJobItem = {
    type: 'object',
    properties: {
        Id: {
            type: 'integer',
            format: 'int64'
        },
        JobId: {
            type: 'integer',
            format: 'int64'
        },
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        ItemName: {
            type: 'string'
        },
        MediaSourceId: {
            type: 'string'
        },
        MediaSource: {
            '$ref': '#/components/schemas/MediaSourceInfo'
        },
        TargetId: {
            type: 'string'
        },
        OutputPath: {
            type: 'string'
        },
        Status: {
            enum: ['Queued', 'Converting', 'ReadyToTransfer', 'Transferring', 'Synced', 'Failed'],
            type: 'string'
        },
        Progress: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        DateCreated: {
            type: 'string',
            format: 'date-time'
        },
        PrimaryImageItemId: {
            type: 'integer',
            format: 'int64'
        },
        PrimaryImageTag: {
            type: 'string'
        },
        TemporaryPath: {
            type: 'string'
        },
        AdditionalFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Sync.Model.ItemFileInfo'
            }
        },
        ItemDateModifiedTicks: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $Sync_Model_ItemFileInfo = {
    type: 'object',
    properties: {
        Type: {
            enum: ['Media', 'Image', 'Subtitles'],
            type: 'string'
        },
        Name: {
            type: 'string'
        },
        Path: {
            type: 'string'
        },
        ImageType: {
            enum: ['Primary', 'Art', 'Backdrop', 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter', 'BoxRear', 'Thumbnail'],
            type: 'string'
        },
        Index: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $Sync_Model_SyncJobRequest = {
    type: 'object',
    properties: {
        TargetId: {
            type: 'string'
        },
        ItemIds: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        Category: {
            enum: ['Latest', 'NextUp', 'Resume'],
            type: 'string'
        },
        ParentId: {
            type: 'string'
        },
        Quality: {
            type: 'string'
        },
        Profile: {
            type: 'string'
        },
        Name: {
            type: 'string'
        },
        UserId: {
            type: 'string'
        },
        UnwatchedOnly: {
            type: 'boolean'
        },
        SyncNewContent: {
            type: 'boolean'
        },
        ItemLimit: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        Bitrate: {
            type: 'integer',
            format: 'int32',
            nullable: true
        }
    }
} as const;

export const $Sync_Model_SyncJobCreationResult = {
    type: 'object',
    properties: {
        Job: {
            '$ref': '#/components/schemas/Sync.SyncJob'
        },
        JobItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Sync.Model.SyncJobItem'
            }
        }
    }
} as const;

export const $Sync_Model_SyncDialogOptions = {
    type: 'object',
    properties: {
        Targets: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Sync.SyncTarget'
            }
        },
        Options: {
            type: 'array',
            items: {
                enum: ['Name', 'Quality', 'UnwatchedOnly', 'SyncNewContent', 'ItemLimit', 'Profile'],
                type: 'string'
            }
        },
        QualityOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Sync.Model.SyncQualityOption'
            }
        },
        ProfileOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Sync.Model.SyncProfileOption'
            }
        }
    }
} as const;

export const $Sync_Model_SyncQualityOption = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Description: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        IsDefault: {
            type: 'boolean'
        },
        IsOriginalQuality: {
            type: 'boolean'
        }
    }
} as const;

export const $Sync_Model_SyncProfileOption = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Description: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        IsDefault: {
            type: 'boolean'
        },
        EnableQualityOptions: {
            type: 'boolean'
        }
    }
} as const;

export const $Users_UserAction = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        ServerId: {
            type: 'string'
        },
        UserId: {
            type: 'string'
        },
        ItemId: {
            type: 'string'
        },
        Type: {
            enum: ['PlayedItem'],
            type: 'string'
        },
        Date: {
            type: 'string',
            format: 'date-time'
        },
        PositionTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        }
    }
} as const;

export const $Sync_Model_SyncDataRequest = {
    type: 'object',
    properties: {
        LocalItemIds: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        TargetId: {
            type: 'string'
        }
    }
} as const;

export const $Sync_Model_SyncDataResponse = {
    type: 'object',
    properties: {
        ItemIdsToRemove: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const $Configuration_ServerConfiguration = {
    type: 'object',
    properties: {
        EnableUPnP: {
            type: 'boolean'
        },
        PublicPort: {
            type: 'integer',
            format: 'int32'
        },
        PublicHttpsPort: {
            type: 'integer',
            format: 'int32'
        },
        HttpServerPortNumber: {
            type: 'integer',
            format: 'int32'
        },
        HttpsPortNumber: {
            type: 'integer',
            format: 'int32'
        },
        EnableHttps: {
            type: 'boolean'
        },
        SubtitlePermissionsUpgraded: {
            type: 'boolean'
        },
        CertificatePath: {
            type: 'string'
        },
        CertificatePassword: {
            type: 'string'
        },
        IsPortAuthorized: {
            type: 'boolean'
        },
        AutoRunWebApp: {
            type: 'boolean'
        },
        EnableRemoteAccess: {
            type: 'boolean'
        },
        LogAllQueryTimes: {
            type: 'boolean'
        },
        EnableCaseSensitiveItemIds: {
            type: 'boolean'
        },
        MetadataPath: {
            type: 'string'
        },
        MetadataNetworkPath: {
            type: 'string'
        },
        PreferredMetadataLanguage: {
            type: 'string'
        },
        MetadataCountryCode: {
            type: 'string'
        },
        SortReplaceCharacters: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        SortRemoveCharacters: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        SortRemoveWords: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        LibraryMonitorDelay: {
            type: 'integer',
            format: 'int32'
        },
        EnableDashboardResponseCaching: {
            type: 'boolean'
        },
        DashboardSourcePath: {
            type: 'string'
        },
        ImageSavingConvention: {
            enum: ['Legacy', 'Compatible'],
            type: 'string'
        },
        EnableAutomaticRestart: {
            type: 'boolean'
        },
        SkipDeserializationForBasicTypes: {
            type: 'boolean'
        },
        ServerName: {
            type: 'string'
        },
        WanDdns: {
            type: 'string'
        },
        UICulture: {
            type: 'string'
        },
        SaveMetadataHidden: {
            type: 'boolean'
        },
        RemoteClientBitrateLimit: {
            type: 'integer',
            format: 'int32'
        },
        SchemaVersion: {
            type: 'integer',
            format: 'int32'
        },
        DisplaySpecialsWithinSeasons: {
            type: 'boolean'
        },
        LocalNetworkSubnets: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        LocalNetworkAddresses: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        EnableExternalContentInSuggestions: {
            type: 'boolean'
        },
        RequireHttps: {
            type: 'boolean'
        },
        IsBehindProxy: {
            type: 'boolean'
        },
        RemoteIPFilter: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        IsRemoteIPFilterBlacklist: {
            type: 'boolean'
        },
        ImageExtractionTimeoutMs: {
            type: 'integer',
            format: 'int32'
        },
        PathSubstitutions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Configuration.PathSubstitution'
            }
        },
        UninstalledPlugins: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        CollapseVideoFolders: {
            type: 'boolean'
        },
        EnableOriginalTrackTitles: {
            type: 'boolean'
        },
        EnableDebugLevelLogging: {
            type: 'boolean'
        },
        EnableAutoUpdate: {
            type: 'boolean'
        },
        LogFileRetentionDays: {
            type: 'integer',
            format: 'int32'
        },
        RunAtStartup: {
            type: 'boolean'
        },
        IsStartupWizardCompleted: {
            type: 'boolean'
        },
        CachePath: {
            type: 'string'
        }
    }
} as const;

export const $Configuration_PathSubstitution = {
    type: 'object',
    properties: {
        From: {
            type: 'string'
        },
        To: {
            type: 'string'
        }
    }
} as const;

export const $WakeOnLanInfo = {
    type: 'object',
    properties: {
        MacAddress: {
            type: 'string'
        },
        BroadcastAddress: {
            type: 'string'
        },
        Port: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $LogFile = {
    type: 'object',
    properties: {
        DateCreated: {
            type: 'string',
            format: 'date-time'
        },
        DateModified: {
            type: 'string',
            format: 'date-time'
        },
        Size: {
            type: 'integer',
            format: 'int64'
        },
        Name: {
            type: 'string'
        }
    }
} as const;

export const $SystemInfo = {
    type: 'object',
    properties: {
        SystemUpdateLevel: {
            enum: ['Release', 'Beta', 'Dev'],
            type: 'string'
        },
        OperatingSystemDisplayName: {
            type: 'string'
        },
        PackageName: {
            type: 'string'
        },
        HasPendingRestart: {
            type: 'boolean'
        },
        IsShuttingDown: {
            type: 'boolean'
        },
        SupportsLibraryMonitor: {
            type: 'boolean'
        },
        WebSocketPortNumber: {
            type: 'integer',
            format: 'int32'
        },
        CompletedInstallations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Updates.InstallationInfo'
            }
        },
        CanSelfRestart: {
            type: 'boolean'
        },
        CanSelfUpdate: {
            type: 'boolean'
        },
        CanLaunchWebBrowser: {
            type: 'boolean'
        },
        ProgramDataPath: {
            type: 'string'
        },
        ItemsByNamePath: {
            type: 'string'
        },
        CachePath: {
            type: 'string'
        },
        LogPath: {
            type: 'string'
        },
        InternalMetadataPath: {
            type: 'string'
        },
        TranscodingTempPath: {
            type: 'string'
        },
        HttpServerPortNumber: {
            type: 'integer',
            format: 'int32'
        },
        SupportsHttps: {
            type: 'boolean'
        },
        HttpsPortNumber: {
            type: 'integer',
            format: 'int32'
        },
        HasUpdateAvailable: {
            type: 'boolean'
        },
        SupportsAutoRunAtStartup: {
            type: 'boolean'
        },
        HardwareAccelerationRequiresPremiere: {
            type: 'boolean'
        },
        LocalAddress: {
            type: 'string'
        },
        WanAddress: {
            type: 'string'
        },
        ServerName: {
            type: 'string'
        },
        Version: {
            type: 'string'
        },
        OperatingSystem: {
            type: 'string'
        },
        Id: {
            type: 'string'
        }
    }
} as const;

export const $Updates_InstallationInfo = {
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            format: 'guid'
        },
        Name: {
            type: 'string'
        },
        AssemblyGuid: {
            type: 'string'
        },
        Version: {
            type: 'string'
        },
        UpdateClass: {
            enum: ['Release', 'Beta', 'Dev'],
            type: 'string'
        },
        PercentComplete: {
            type: 'number',
            format: 'double',
            nullable: true
        }
    }
} as const;

export const $Net_EndPointInfo = {
    type: 'object',
    properties: {
        IsLocal: {
            type: 'boolean'
        },
        IsInNetwork: {
            type: 'boolean'
        }
    }
} as const;

export const $AuthenticateUserByName = {
    type: 'object',
    properties: {
        Username: {
            type: 'string'
        },
        Password: {
            type: 'string'
        },
        Pw: {
            type: 'string'
        }
    }
} as const;

export const $Authentication_AuthenticationResult = {
    type: 'object',
    properties: {
        User: {
            '$ref': '#/components/schemas/UserDto'
        },
        SessionInfo: {
            '$ref': '#/components/schemas/Session.SessionInfo'
        },
        AccessToken: {
            type: 'string'
        },
        ServerId: {
            type: 'string'
        }
    }
} as const;

export const $CreateUserByName = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        }
    }
} as const;

export const $ForgotPassword = {
    type: 'object',
    properties: {
        EnteredUsername: {
            type: 'string'
        }
    }
} as const;

export const $Users_ForgotPasswordResult = {
    type: 'object',
    properties: {
        Action: {
            enum: ['ContactAdmin', 'PinCode', 'InNetworkRequired'],
            type: 'string'
        },
        PinFile: {
            type: 'string'
        },
        PinExpirationDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        }
    }
} as const;

export const $playback_reporting_Api_CustomQuery = {
    type: 'object',
    properties: {
        CustomQueryString: {
            type: 'string'
        },
        ReplaceUserId: {
            type: 'boolean'
        }
    }
} as const;

export const $WebDashboard_Api_ConfigurationPageInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        EnableInMainMenu: {
            type: 'boolean'
        },
        MenuSection: {
            type: 'string'
        },
        MenuIcon: {
            type: 'string'
        },
        DisplayName: {
            type: 'string'
        },
        ConfigurationPageType: {
            enum: ['PluginConfiguration', 'None'],
            type: 'string'
        },
        PluginId: {
            type: 'string'
        }
    }
} as const;

export const $MediaEncoding_Codecs_VideoCodecs_VideoCodecBase = {
    type: 'object',
    properties: {
        CodecKind: {
            enum: ['Audio', 'Video', 'SubTitles'],
            type: 'string'
        },
        MediaTypeName: {
            type: 'string'
        },
        VideoMediaType: {
            enum: ['Unknown', 'copy', 'flv1', 'h263', 'h263p', 'h264', 'hevc', 'mjpeg', 'mpeg1video', 'mpeg2video', 'mpeg4', 'msvideo1', 'theora', 'vc1image', 'vc1', 'vp8', 'vp9', 'wmv1', 'wmv2', 'wmv3', '_012v', '_4xm', '_8bps', 'a64_multi', 'a64_multi5', 'aasc', 'aic', 'alias_pix', 'amv', 'anm', 'ansi', 'apng', 'asv1', 'asv2', 'aura', 'aura2', 'av1', 'avrn', 'avrp', 'avs', 'avui', 'ayuv', 'bethsoftvid', 'bfi', 'binkvideo', 'bintext', 'bitpacked', 'bmp', 'bmv_video', 'brender_pix', 'c93', 'cavs', 'cdgraphics', 'cdxl', 'cfhd', 'cinepak', 'clearvideo', 'cljr', 'cllc', 'cmv', 'cpia', 'cscd', 'cyuv', 'daala', 'dds', 'dfa', 'dirac', 'dnxhd', 'dpx', 'dsicinvideo', 'dvvideo', 'dxa', 'dxtory', 'dxv', 'escape124', 'escape130', 'exr', 'ffv1', 'ffvhuff', 'fic', 'fits', 'flashsv', 'flashsv2', 'flic', 'fmvc', 'fraps', 'frwu', 'g2m', 'gdv', 'gif', 'h261', 'h263i', 'hap', 'hnm4video', 'hq_hqa', 'hqx', 'huffyuv', 'idcin', 'idf', 'iff_ilbm', 'indeo2', 'indeo3', 'indeo4', 'indeo5', 'interplayvideo', 'jpeg2000', 'jpegls', 'jv', 'kgv1', 'kmvc', 'lagarith', 'ljpeg', 'loco', 'm101', 'mad', 'magicyuv', 'mdec', 'mimic', 'mjpegb', 'mmvideo', 'motionpixels', 'msa1', 'mscc', 'msmpeg4v1', 'msmpeg4v2', 'msmpeg4v3', 'msrle', 'mss1', 'mss2', 'mszh', 'mts2', 'mvc1', 'mvc2', 'mxpeg', 'nuv', 'paf_video', 'pam', 'pbm', 'pcx', 'pgm', 'pgmyuv', 'pictor', 'pixlet', 'png', 'ppm', 'prores', 'psd', 'ptx', 'qdraw', 'qpeg', 'qtrle', 'r10k', 'r210', 'rawvideo', 'rl2', 'roq', 'rpza', 'rscc', 'rv10', 'rv20', 'rv30', 'rv40', 'sanm', 'scpr', 'screenpresso', 'sgi', 'sgirle', 'sheervideo', 'smackvideo', 'smc', 'smvjpeg', 'snow', 'sp5x', 'speedhq', 'srgc', 'sunrast', 'svg', 'svq1', 'svq3', 'targa', 'targa_y216', 'tdsc', 'tgq', 'tgv', 'thp', 'tiertexseqvideo', 'tiff', 'tmv', 'tqi', 'truemotion1', 'truemotion2', 'truemotion2rt', 'tscc', 'tscc2', 'txd', 'ulti', 'utvideo', 'v210', 'v210x', 'v308', 'v408', 'v410', 'vb', 'vble', 'vcr1', 'vixl', 'vmdvideo', 'vmnc', 'vp3', 'vp5', 'vp6', 'vp6a', 'vp6f', 'vp7', 'webp', 'wmv3image', 'wnv1', 'wrapped_avframe', 'ws_vqa', 'xan_wc3', 'xan_wc4', 'xbin', 'xbm', 'xface', 'xpm', 'xwd', 'y41p', 'ylc', 'yop', 'yuv4', 'zerocodec', 'zlib', 'zmbv'],
            type: 'string'
        },
        MinWidth: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MaxWidth: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MinHeight: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MaxHeight: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        WidthAlignment: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        HeightAlignment: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MinFrameRate: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MaxFrameRate: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        SupportedColorFormats: {
            type: 'array',
            items: {
                enum: ['Unknown', 'yuv420p', 'yuyv422', 'rgb24', 'bgr24', 'yuv422p', 'yuv444p', 'yuv410p', 'yuv411p', 'gray', 'monow', 'monob', 'pal8', 'yuvj420p', 'yuvj422p', 'yuvj444p', 'uyvy422', 'uyyvyy411', 'bgr8', 'bgr4', 'bgr4_byte', 'rgb8', 'rgb4', 'rgb4_byte', 'nv12', 'nv21', 'argb', 'rgba', 'abgr', 'bgra', 'gray16', 'yuv440p', 'yuvj440p', 'yuva420p', 'rgb48', 'rgb565', 'rgb555', 'bgr565', 'bgr555', 'vaapi_moco', 'vaapi_idct', 'vaapi_vld', 'yuv420p16', 'yuv422p16', 'yuv444p16', 'dxva2_vld', 'rgb444', 'bgr444', 'ya8', 'bgr48', 'yuv420p9', 'yuv420p10', 'yuv422p10', 'yuv444p9', 'yuv444p10', 'yuv422p9', 'gbrp', 'gbrp9', 'gbrp10', 'gbrp16', 'yuva422p', 'yuva444p', 'yuva420p9', 'yuva422p9', 'yuva444p9', 'yuva420p10', 'yuva422p10', 'yuva444p10', 'yuva420p16', 'yuva422p16', 'yuva444p16', 'vdpau', 'xyz12', 'nv16', 'nv20', 'rgba64', 'bgra64', 'yvyu422', 'ya16', 'gbrap', 'gbrap16', 'qsv', 'mmal', 'd3d11va_vld', 'cuda', '_0rgb', 'rgb0', '_0bgr', 'bgr0', 'yuv420p12', 'yuv420p14', 'yuv422p12', 'yuv422p14', 'yuv444p12', 'yuv444p14', 'gbrp12', 'gbrp14', 'yuvj411p', 'bayer_bggr8', 'bayer_rggb8', 'bayer_gbrg8', 'bayer_grbg8', 'bayer_bggr16', 'bayer_rggb16', 'bayer_gbrg16', 'bayer_grbg16', 'xvmc', 'yuv440p10', 'yuv440p12', 'ayuv64', 'videotoolbox_vld', 'p010', 'gbrap12', 'gbrap10', 'mediacodec', 'gray12', 'gray10', 'p016', 'd3d11', 'gray9', 'gbrpf32', 'gbrapf32', 'drm_prime', 'opencl'],
                type: 'string'
            }
        },
        SupportedColorFormatStrings: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ProfileAndLevelInformation: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MediaEncoding.Codecs.Common.Types.ProfileLevelInformation'
            }
        },
        Id: {
            type: 'string'
        },
        Direction: {
            enum: ['Encoder', 'Decoder'],
            type: 'string'
        },
        Name: {
            type: 'string'
        },
        Description: {
            type: 'string'
        },
        FrameworkCodec: {
            type: 'string'
        },
        IsHardwareCodec: {
            type: 'boolean'
        },
        SecondaryFramework: {
            enum: ['Unknown', 'None', 'AmdAmf', 'MediaCodec', 'NvEncDec', 'OpenMax', 'QuickSync', 'VaApi', 'V4L2', 'DxVa', 'D3d11va', 'VideoToolbox'],
            type: 'string'
        },
        SecondaryFrameworkCodec: {
            type: 'string'
        },
        MaxInstanceCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MinBitRate: {
            '$ref': '#/components/schemas/MediaEncoding.Codecs.Common.Types.BitRate'
        },
        MaxBitRate: {
            '$ref': '#/components/schemas/MediaEncoding.Codecs.Common.Types.BitRate'
        },
        IsEnabledByDefault: {
            type: 'boolean'
        },
        DefaultPriority: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $MediaEncoding_Codecs_Common_Types_ProfileLevelInformation = {
    type: 'object',
    properties: {
        Profile: {
            '$ref': '#/components/schemas/MediaEncoding.Codecs.Common.Types.ProfileInformation'
        },
        Level: {
            '$ref': '#/components/schemas/MediaEncoding.Codecs.Common.Types.LevelInformation'
        }
    }
} as const;

export const $MediaEncoding_Codecs_Common_Types_ProfileInformation = {
    type: 'object',
    properties: {
        ShortName: {
            type: 'string'
        },
        Description: {
            type: 'string'
        },
        Details: {
            type: 'string'
        },
        Id: {
            type: 'string'
        }
    }
} as const;

export const $MediaEncoding_Codecs_Common_Types_LevelInformation = {
    type: 'object',
    properties: {
        ShortName: {
            type: 'string'
        },
        Description: {
            type: 'string'
        },
        Ordinal: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MaxBitRate: {
            '$ref': '#/components/schemas/MediaEncoding.Codecs.Common.Types.BitRate'
        },
        MaxBitRateDisplay: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        ResolutionRates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MediaEncoding.Codecs.Common.Types.ResolutionWithRate'
            }
        },
        ResolutionRateStrings: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ResolutionRatesDisplay: {
            type: 'string'
        }
    }
} as const;

export const $MediaEncoding_Codecs_Common_Types_BitRate = {
    type: 'object',
    properties: {
        bps: {
            type: 'integer',
            format: 'int64'
        },
        kbps: {
            type: 'number',
            format: 'double'
        },
        Mbps: {
            type: 'number',
            format: 'double'
        }
    }
} as const;

export const $MediaEncoding_Codecs_Common_Types_ResolutionWithRate = {
    type: 'object',
    properties: {
        Width: {
            type: 'integer',
            format: 'int32'
        },
        Height: {
            type: 'integer',
            format: 'int32'
        },
        FrameRate: {
            type: 'number',
            format: 'double'
        },
        Resolution: {
            '$ref': '#/components/schemas/MediaEncoding.Codecs.Common.Types.Resolution'
        }
    }
} as const;

export const $MediaEncoding_Codecs_Common_Types_Resolution = {
    type: 'object',
    properties: {
        Width: {
            type: 'integer',
            format: 'int32'
        },
        Height: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $Configuration_CodecConfiguration = {
    type: 'object',
    properties: {
        IsEnabled: {
            type: 'boolean'
        },
        Priority: {
            type: 'integer',
            format: 'int32'
        },
        CodecId: {
            type: 'string'
        }
    }
} as const;

export const $ExternalIdInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Key: {
            type: 'string'
        },
        UrlFormatString: {
            type: 'string'
        }
    }
} as const;

export const $Providers_RemoteSearchQuery_Providers_TrailerInfo = {
    type: 'object',
    properties: {
        SearchInfo: {
            '$ref': '#/components/schemas/Providers.TrailerInfo'
        },
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        SearchProviderName: {
            type: 'string'
        },
        IncludeDisabledProviders: {
            type: 'boolean'
        }
    }
} as const;

export const $Providers_TrailerInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        MetadataLanguage: {
            type: 'string'
        },
        MetadataCountryCode: {
            type: 'string'
        },
        ProviderIds: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        Year: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PremiereDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        IsAutomated: {
            type: 'boolean'
        }
    }
} as const;

export const $RemoteSearchResult = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        ProviderIds: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        ProductionYear: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        IndexNumberEnd: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PremiereDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        ImageUrl: {
            type: 'string'
        },
        SearchProviderName: {
            type: 'string'
        },
        GameSystem: {
            type: 'string'
        },
        Overview: {
            type: 'string'
        },
        AlbumArtist: {
            '$ref': '#/components/schemas/RemoteSearchResult'
        },
        Artists: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RemoteSearchResult'
            }
        }
    }
} as const;

export const $Providers_RemoteSearchQuery_Providers_BookInfo = {
    type: 'object',
    properties: {
        SearchInfo: {
            '$ref': '#/components/schemas/Providers.BookInfo'
        },
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        SearchProviderName: {
            type: 'string'
        },
        IncludeDisabledProviders: {
            type: 'boolean'
        }
    }
} as const;

export const $Providers_BookInfo = {
    type: 'object',
    properties: {
        SeriesName: {
            type: 'string'
        },
        Name: {
            type: 'string'
        },
        MetadataLanguage: {
            type: 'string'
        },
        MetadataCountryCode: {
            type: 'string'
        },
        ProviderIds: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        Year: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PremiereDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        IsAutomated: {
            type: 'boolean'
        }
    }
} as const;

export const $Providers_RemoteSearchQuery_Providers_MovieInfo = {
    type: 'object',
    properties: {
        SearchInfo: {
            '$ref': '#/components/schemas/Providers.MovieInfo'
        },
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        SearchProviderName: {
            type: 'string'
        },
        IncludeDisabledProviders: {
            type: 'boolean'
        }
    }
} as const;

export const $Providers_MovieInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        MetadataLanguage: {
            type: 'string'
        },
        MetadataCountryCode: {
            type: 'string'
        },
        ProviderIds: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        Year: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PremiereDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        IsAutomated: {
            type: 'boolean'
        }
    }
} as const;

export const $Providers_RemoteSearchQuery_Providers_SeriesInfo = {
    type: 'object',
    properties: {
        SearchInfo: {
            '$ref': '#/components/schemas/Providers.SeriesInfo'
        },
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        SearchProviderName: {
            type: 'string'
        },
        IncludeDisabledProviders: {
            type: 'boolean'
        }
    }
} as const;

export const $Providers_SeriesInfo = {
    type: 'object',
    properties: {
        EpisodeAirDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        Name: {
            type: 'string'
        },
        MetadataLanguage: {
            type: 'string'
        },
        MetadataCountryCode: {
            type: 'string'
        },
        ProviderIds: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        Year: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PremiereDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        IsAutomated: {
            type: 'boolean'
        }
    }
} as const;

export const $Providers_RemoteSearchQuery_Providers_GameInfo = {
    type: 'object',
    properties: {
        SearchInfo: {
            '$ref': '#/components/schemas/Providers.GameInfo'
        },
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        SearchProviderName: {
            type: 'string'
        },
        IncludeDisabledProviders: {
            type: 'boolean'
        }
    }
} as const;

export const $Providers_GameInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        MetadataLanguage: {
            type: 'string'
        },
        MetadataCountryCode: {
            type: 'string'
        },
        ProviderIds: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        Year: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PremiereDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        IsAutomated: {
            type: 'boolean'
        }
    }
} as const;

export const $Providers_RemoteSearchQuery_Providers_BoxSetInfo = {
    type: 'object',
    properties: {
        SearchInfo: {
            '$ref': '#/components/schemas/Providers.BoxSetInfo'
        },
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        SearchProviderName: {
            type: 'string'
        },
        IncludeDisabledProviders: {
            type: 'boolean'
        }
    }
} as const;

export const $Providers_BoxSetInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        MetadataLanguage: {
            type: 'string'
        },
        MetadataCountryCode: {
            type: 'string'
        },
        ProviderIds: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        Year: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PremiereDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        IsAutomated: {
            type: 'boolean'
        }
    }
} as const;

export const $Providers_RemoteSearchQuery_Providers_MusicVideoInfo = {
    type: 'object',
    properties: {
        SearchInfo: {
            '$ref': '#/components/schemas/Providers.MusicVideoInfo'
        },
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        SearchProviderName: {
            type: 'string'
        },
        IncludeDisabledProviders: {
            type: 'boolean'
        }
    }
} as const;

export const $Providers_MusicVideoInfo = {
    type: 'object',
    properties: {
        Artists: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        Name: {
            type: 'string'
        },
        MetadataLanguage: {
            type: 'string'
        },
        MetadataCountryCode: {
            type: 'string'
        },
        ProviderIds: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        Year: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PremiereDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        IsAutomated: {
            type: 'boolean'
        }
    }
} as const;

export const $Providers_RemoteSearchQuery_Providers_PersonLookupInfo = {
    type: 'object',
    properties: {
        SearchInfo: {
            '$ref': '#/components/schemas/Providers.PersonLookupInfo'
        },
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        SearchProviderName: {
            type: 'string'
        },
        IncludeDisabledProviders: {
            type: 'boolean'
        }
    }
} as const;

export const $Providers_PersonLookupInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        MetadataLanguage: {
            type: 'string'
        },
        MetadataCountryCode: {
            type: 'string'
        },
        ProviderIds: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        Year: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PremiereDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        IsAutomated: {
            type: 'boolean'
        }
    }
} as const;

export const $Providers_RemoteSearchQuery_Providers_AlbumInfo = {
    type: 'object',
    properties: {
        SearchInfo: {
            '$ref': '#/components/schemas/Providers.AlbumInfo'
        },
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        SearchProviderName: {
            type: 'string'
        },
        IncludeDisabledProviders: {
            type: 'boolean'
        }
    }
} as const;

export const $Providers_AlbumInfo = {
    type: 'object',
    properties: {
        AlbumArtists: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        SongInfos: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Providers.SongInfo'
            }
        },
        Name: {
            type: 'string'
        },
        MetadataLanguage: {
            type: 'string'
        },
        MetadataCountryCode: {
            type: 'string'
        },
        ProviderIds: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        Year: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PremiereDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        IsAutomated: {
            type: 'boolean'
        }
    }
} as const;

export const $Providers_SongInfo = {
    type: 'object',
    properties: {
        AlbumArtists: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        Album: {
            type: 'string'
        },
        Artists: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        Name: {
            type: 'string'
        },
        MetadataLanguage: {
            type: 'string'
        },
        MetadataCountryCode: {
            type: 'string'
        },
        ProviderIds: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        Year: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PremiereDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        IsAutomated: {
            type: 'boolean'
        }
    }
} as const;

export const $Providers_RemoteSearchQuery_Providers_ArtistInfo = {
    type: 'object',
    properties: {
        SearchInfo: {
            '$ref': '#/components/schemas/Providers.ArtistInfo'
        },
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        SearchProviderName: {
            type: 'string'
        },
        IncludeDisabledProviders: {
            type: 'boolean'
        }
    }
} as const;

export const $Providers_ArtistInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        MetadataLanguage: {
            type: 'string'
        },
        MetadataCountryCode: {
            type: 'string'
        },
        ProviderIds: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        Year: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PremiereDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        IsAutomated: {
            type: 'boolean'
        }
    }
} as const;

export const $MetadataEditorInfo = {
    type: 'object',
    properties: {
        ParentalRatingOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ParentalRating'
            }
        },
        Countries: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Globalization.CountryInfo'
            }
        },
        Cultures: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Globalization.CultureDto'
            }
        },
        ExternalIdInfos: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ExternalIdInfo'
            }
        }
    }
} as const;

export const $Library_DeleteInfo = {
    type: 'object',
    properties: {
        Paths: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const $AllThemeMediaResult = {
    type: 'object',
    properties: {
        ThemeVideosResult: {
            '$ref': '#/components/schemas/ThemeMediaResult'
        },
        ThemeSongsResult: {
            '$ref': '#/components/schemas/ThemeMediaResult'
        },
        SoundtrackSongsResult: {
            '$ref': '#/components/schemas/ThemeMediaResult'
        }
    }
} as const;

export const $ThemeMediaResult = {
    type: 'object',
    properties: {
        OwnerId: {
            type: 'integer',
            format: 'int64'
        },
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BaseItemDto'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $ImageInfo = {
    type: 'object',
    properties: {
        ImageType: {
            enum: ['Primary', 'Art', 'Backdrop', 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter', 'BoxRear', 'Thumbnail'],
            type: 'string'
        },
        ImageIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        Path: {
            type: 'string'
        },
        Height: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        Width: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        Size: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $RemoteImageResult = {
    type: 'object',
    properties: {
        Images: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RemoteImageInfo'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        },
        Providers: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const $RemoteImageInfo = {
    type: 'object',
    properties: {
        ProviderName: {
            type: 'string'
        },
        Url: {
            type: 'string'
        },
        ThumbnailUrl: {
            type: 'string'
        },
        Height: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        Width: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        CommunityRating: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        VoteCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        Language: {
            type: 'string'
        },
        Type: {
            enum: ['Primary', 'Art', 'Backdrop', 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter', 'BoxRear', 'Thumbnail'],
            type: 'string'
        },
        RatingType: {
            enum: ['Score', 'Likes'],
            type: 'string'
        }
    }
} as const;

export const $RokuMetadata_Api_ThumbnailSetInfo = {
    type: 'object',
    properties: {
        AspectRatio: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        Thumbnails: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RokuMetadata.Api.ThumbnailInfo'
            }
        }
    }
} as const;

export const $RokuMetadata_Api_ThumbnailInfo = {
    type: 'object',
    properties: {
        PositionTicks: {
            type: 'integer',
            format: 'int64'
        },
        ImageTag: {
            type: 'string'
        }
    }
} as const;

export const $MediaInfo_PlaybackInfoResponse = {
    type: 'object',
    properties: {
        MediaSources: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MediaSourceInfo'
            }
        },
        PlaySessionId: {
            type: 'string'
        },
        ErrorCode: {
            enum: ['NotAllowed', 'NoCompatibleStream', 'RateLimitExceeded'],
            type: 'string'
        }
    }
} as const;

export const $MediaInfo_PlaybackInfoRequest = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        UserId: {
            type: 'string'
        },
        MaxStreamingBitrate: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        StartTimeTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        AudioStreamIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        SubtitleStreamIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MaxAudioChannels: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MediaSourceId: {
            type: 'string'
        },
        LiveStreamId: {
            type: 'string'
        },
        DeviceProfile: {
            '$ref': '#/components/schemas/Dlna.DeviceProfile'
        },
        EnableDirectPlay: {
            type: 'boolean'
        },
        EnableDirectStream: {
            type: 'boolean'
        },
        EnableTranscoding: {
            type: 'boolean'
        },
        AllowVideoStreamCopy: {
            type: 'boolean'
        },
        AllowAudioStreamCopy: {
            type: 'boolean'
        },
        IsPlayback: {
            type: 'boolean'
        },
        AutoOpenLiveStream: {
            type: 'boolean'
        },
        DirectPlayProtocols: {
            type: 'array',
            items: {
                enum: ['File', 'Http', 'Rtmp', 'Rtsp', 'Udp', 'Rtp', 'Ftp', 'Mms'],
                type: 'string'
            }
        }
    }
} as const;

export const $Library_PostUpdatedMedia = {
    type: 'object',
    properties: {
        Updates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Library.MediaUpdateInfo'
            }
        }
    }
} as const;

export const $Library_MediaUpdateInfo = {
    type: 'object',
    properties: {
        Path: {
            type: 'string'
        },
        UpdateType: {
            type: 'string'
        }
    }
} as const;

export const $Library_UpdateLibraryOptions = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        LibraryOptions: {
            '$ref': '#/components/schemas/Configuration.LibraryOptions'
        }
    }
} as const;

export const $Library_RenameVirtualFolder = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        NewName: {
            type: 'string'
        },
        RefreshLibrary: {
            type: 'boolean'
        }
    }
} as const;

export const $Library_AddMediaPath = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Path: {
            type: 'string'
        },
        PathInfo: {
            '$ref': '#/components/schemas/Configuration.MediaPathInfo'
        },
        RefreshLibrary: {
            type: 'boolean'
        }
    }
} as const;

export const $LiveTv_ListingProviderTypeInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        SetupUrl: {
            type: 'string'
        }
    }
} as const;

export const $Emby_Notifications_Api_NotificationsSummary = {
    type: 'object',
    properties: {
        UnreadCount: {
            type: 'integer',
            format: 'int32'
        },
        MaxUnreadNotificationLevel: {
            enum: ['Normal', 'Warning', 'Error'],
            type: 'string'
        }
    }
} as const;

export const $PlayRequest = {
    type: 'object',
    properties: {
        ControllingUserId: {
            type: 'string'
        },
        SubtitleStreamIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        AudioStreamIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MediaSourceId: {
            type: 'string'
        },
        StartIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        }
    }
} as const;

export const $GeneralCommand = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        ControllingUserId: {
            type: 'string'
        },
        Arguments: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        }
    }
} as const;

export const $PlaybackProgressInfo = {
    type: 'object',
    properties: {
        CanSeek: {
            type: 'boolean'
        },
        Item: {
            '$ref': '#/components/schemas/BaseItemDto'
        },
        NowPlayingQueue: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/QueueItem'
            }
        },
        PlaylistItemId: {
            type: 'string'
        },
        ItemId: {
            type: 'string'
        },
        SessionId: {
            type: 'string'
        },
        MediaSourceId: {
            type: 'string'
        },
        AudioStreamIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        SubtitleStreamIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        IsPaused: {
            type: 'boolean'
        },
        IsMuted: {
            type: 'boolean'
        },
        PositionTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        RunTimeTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        PlaybackStartTimeTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        VolumeLevel: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        Brightness: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        AspectRatio: {
            type: 'string'
        },
        PlayMethod: {
            enum: ['Transcode', 'DirectStream', 'DirectPlay'],
            type: 'string'
        },
        LiveStreamId: {
            type: 'string'
        },
        PlaySessionId: {
            type: 'string'
        },
        RepeatMode: {
            enum: ['RepeatNone', 'RepeatAll', 'RepeatOne'],
            type: 'string'
        }
    }
} as const;

export const $PlaybackStopInfo = {
    type: 'object',
    properties: {
        NowPlayingQueue: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/QueueItem'
            }
        },
        PlaylistItemId: {
            type: 'string'
        },
        Item: {
            '$ref': '#/components/schemas/BaseItemDto'
        },
        ItemId: {
            type: 'string'
        },
        SessionId: {
            type: 'string'
        },
        MediaSourceId: {
            type: 'string'
        },
        PositionTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        LiveStreamId: {
            type: 'string'
        },
        PlaySessionId: {
            type: 'string'
        },
        Failed: {
            type: 'boolean'
        },
        NextMediaType: {
            type: 'string'
        }
    }
} as const;

export const $Sync_Model_SyncedItemProgress = {
    type: 'object',
    properties: {
        Progress: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        Status: {
            enum: ['Queued', 'Converting', 'ReadyToTransfer', 'Transferring', 'Synced', 'Failed'],
            type: 'string'
        }
    }
} as const;

export const $Sync_Model_SyncedItem = {
    type: 'object',
    properties: {
        ServerId: {
            type: 'string'
        },
        SyncJobId: {
            type: 'integer',
            format: 'int64'
        },
        SyncJobName: {
            type: 'string'
        },
        SyncJobDateCreated: {
            type: 'string',
            format: 'date-time'
        },
        SyncJobItemId: {
            type: 'integer',
            format: 'int64'
        },
        OriginalFileName: {
            type: 'string'
        },
        Item: {
            '$ref': '#/components/schemas/BaseItemDto'
        },
        UserId: {
            type: 'string'
        },
        AdditionalFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Sync.Model.ItemFileInfo'
            }
        }
    }
} as const;

export const $QueryResult_ActivityLogEntry = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityLogEntry'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $ActivityLogEntry = {
    type: 'object',
    properties: {
        Id: {
            type: 'integer',
            format: 'int64'
        },
        Name: {
            type: 'string'
        },
        Overview: {
            type: 'string'
        },
        ShortOverview: {
            type: 'string'
        },
        Type: {
            type: 'string'
        },
        ItemId: {
            type: 'string'
        },
        Date: {
            type: 'string',
            format: 'date-time'
        },
        UserId: {
            type: 'string'
        },
        UserPrimaryImageTag: {
            type: 'string'
        },
        Severity: {
            enum: ['Info', 'Debug', 'Warn', 'Error', 'Fatal'],
            type: 'string'
        }
    }
} as const;

export const $PublicSystemInfo = {
    type: 'object',
    properties: {
        LocalAddress: {
            type: 'string'
        },
        WanAddress: {
            type: 'string'
        },
        ServerName: {
            type: 'string'
        },
        Version: {
            type: 'string'
        },
        OperatingSystem: {
            type: 'string'
        },
        Id: {
            type: 'string'
        }
    }
} as const;

export const $AuthenticateUser = {
    type: 'object',
    properties: {
        Pw: {
            type: 'string'
        },
        Password: {
            type: 'string'
        }
    }
} as const;

export const $UpdateUserPassword = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        CurrentPw: {
            type: 'string'
        },
        NewPw: {
            type: 'string'
        },
        ResetPassword: {
            type: 'boolean'
        }
    }
} as const;

export const $UpdateUserEasyPassword = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        NewPw: {
            type: 'string'
        },
        ResetPassword: {
            type: 'boolean'
        }
    }
} as const;

export const $ForgotPasswordPin = {
    type: 'object',
    properties: {
        Pin: {
            type: 'string'
        }
    }
} as const;

export const $Users_PinRedeemResult = {
    type: 'object',
    properties: {
        Success: {
            type: 'boolean'
        },
        UsersReset: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const $ImageProviderInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        SupportedImages: {
            type: 'array',
            items: {
                enum: ['Primary', 'Art', 'Backdrop', 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter', 'BoxRear', 'Thumbnail'],
                type: 'string'
            }
        }
    }
} as const;

export const $Library_UpdateMediaPath = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        PathInfo: {
            '$ref': '#/components/schemas/Configuration.MediaPathInfo'
        }
    }
} as const;

export const $PlaystateRequest = {
    type: 'object',
    properties: {
        Command: {
            enum: ['Stop', 'Pause', 'Unpause', 'NextTrack', 'PreviousTrack', 'Seek', 'Rewind', 'FastForward', 'PlayPause'],
            type: 'string'
        },
        SeekPositionTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        ControllingUserId: {
            type: 'string'
        }
    }
} as const;

export const $Connect_UserLinkResult = {
    type: 'object',
    properties: {
        IsPending: {
            type: 'boolean'
        },
        IsNewUserInvitation: {
            type: 'boolean'
        },
        GuestDisplayName: {
            type: 'string'
        }
    }
} as const;

export const $RemoteSubtitleInfo = {
    type: 'object',
    properties: {
        ThreeLetterISOLanguageName: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        ProviderName: {
            type: 'string'
        },
        Name: {
            type: 'string'
        },
        Format: {
            type: 'string'
        },
        Author: {
            type: 'string'
        },
        Comment: {
            type: 'string'
        },
        DateCreated: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        CommunityRating: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        DownloadCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        IsHashMatch: {
            type: 'boolean',
            nullable: true
        },
        IsForced: {
            type: 'boolean',
            nullable: true
        }
    }
} as const;