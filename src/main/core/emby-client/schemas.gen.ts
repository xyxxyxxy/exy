// This file is auto-generated by @hey-api/openapi-ts

export const $QueryResult_BaseItemDto = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BaseItemDto'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $BaseItemDto = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name.'
        },
        OriginalTitle: {
            type: 'string'
        },
        ServerId: {
            type: 'string',
            description: 'The server identifier.'
        },
        Id: {
            type: 'string',
            description: 'The id.'
        },
        Guid: {
            type: 'string'
        },
        Etag: {
            type: 'string',
            description: 'The etag.'
        },
        Prefix: {
            type: 'string',
            description: 'The Prefix.'
        },
        TunerName: {
            type: 'string'
        },
        PlaylistItemId: {
            type: 'string',
            description: 'The playlist item identifier.'
        },
        DateCreated: {
            type: 'string',
            description: 'The date created.',
            format: 'date-time',
            nullable: true
        },
        DateModified: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        VideoCodec: {
            type: 'string'
        },
        AudioCodec: {
            type: 'string'
        },
        AverageFrameRate: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        RealFrameRate: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        ExtraType: {
            type: 'string'
        },
        SortIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        SortParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        CanDelete: {
            type: 'boolean',
            nullable: true
        },
        CanDownload: {
            type: 'boolean',
            nullable: true
        },
        CanEditItems: {
            type: 'boolean',
            nullable: true
        },
        SupportsResume: {
            type: 'boolean',
            nullable: true
        },
        PresentationUniqueKey: {
            type: 'string'
        },
        PreferredMetadataLanguage: {
            type: 'string'
        },
        PreferredMetadataCountryCode: {
            type: 'string'
        },
        SupportsSync: {
            type: 'boolean',
            description: 'A value indicating whether \\[supports synchronize\\].',
            nullable: true
        },
        SyncStatus: {
            '$ref': '#/components/schemas/SyncJobItemStatus'
        },
        CanManageAccess: {
            type: 'boolean',
            nullable: true
        },
        CanLeaveContent: {
            type: 'boolean',
            nullable: true
        },
        CanMakePublic: {
            type: 'boolean',
            nullable: true
        },
        Container: {
            type: 'string'
        },
        SortName: {
            type: 'string',
            description: 'The name of the sort.'
        },
        ForcedSortName: {
            type: 'string'
        },
        Video3DFormat: {
            '$ref': '#/components/schemas/Video3DFormat'
        },
        PremiereDate: {
            type: 'string',
            description: 'The premiere date.',
            format: 'date-time',
            nullable: true
        },
        ExternalUrls: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ExternalUrl'
            },
            description: 'The external urls.'
        },
        MediaSources: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MediaSourceInfo'
            },
            description: 'The media versions.'
        },
        CriticRating: {
            type: 'number',
            description: 'The critic rating.',
            format: 'float',
            nullable: true
        },
        GameSystemId: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        AsSeries: {
            type: 'boolean',
            nullable: true
        },
        GameSystem: {
            type: 'string',
            description: 'The game system.'
        },
        ProductionLocations: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        Path: {
            type: 'string',
            description: 'The path.'
        },
        OfficialRating: {
            type: 'string',
            description: 'The official rating.'
        },
        CustomRating: {
            type: 'string',
            description: 'The custom rating.'
        },
        ChannelId: {
            type: 'string',
            description: 'The channel identifier.'
        },
        ChannelName: {
            type: 'string'
        },
        Overview: {
            type: 'string',
            description: 'The overview.'
        },
        Taglines: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'The taglines.'
        },
        Genres: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'The genres.'
        },
        CommunityRating: {
            type: 'number',
            description: 'The community rating.',
            format: 'float',
            nullable: true
        },
        RunTimeTicks: {
            type: 'integer',
            description: 'The run time ticks.',
            format: 'int64',
            nullable: true
        },
        Size: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        FileName: {
            type: 'string'
        },
        Bitrate: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ProductionYear: {
            type: 'integer',
            description: 'The production year.',
            format: 'int32',
            nullable: true
        },
        Number: {
            type: 'string',
            description: 'The number.'
        },
        ChannelNumber: {
            type: 'string'
        },
        IndexNumber: {
            type: 'integer',
            description: 'The index number.',
            format: 'int32',
            nullable: true
        },
        IndexNumberEnd: {
            type: 'integer',
            description: 'The index number end.',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            description: 'The parent index number.',
            format: 'int32',
            nullable: true
        },
        RemoteTrailers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MediaUrl'
            },
            description: 'The trailer urls.'
        },
        ProviderIds: {
            '$ref': '#/components/schemas/ProviderIdDictionary'
        },
        IsFolder: {
            type: 'boolean',
            description: 'A value indicating whether this instance is folder.',
            nullable: true
        },
        ParentId: {
            type: 'string',
            description: 'The parent id.'
        },
        Type: {
            type: 'string',
            description: 'The type.'
        },
        People: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BaseItemPerson'
            },
            description: 'The people.'
        },
        Studios: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NameLongIdPair'
            },
            description: 'The studios.'
        },
        GenreItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NameLongIdPair'
            }
        },
        TagItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NameLongIdPair'
            }
        },
        ParentLogoItemId: {
            type: 'string',
            description: 'If the item does not have a logo, this will hold the Id of the Parent that has one.'
        },
        ParentBackdropItemId: {
            type: 'string',
            description: 'If the item does not have any backdrops, this will hold the Id of the Parent that has one.'
        },
        ParentBackdropImageTags: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'The parent backdrop image tags.'
        },
        LocalTrailerCount: {
            type: 'integer',
            description: 'The local trailer count.',
            format: 'int32',
            nullable: true
        },
        UserData: {
            '$ref': '#/components/schemas/UserItemDataDto'
        },
        RecursiveItemCount: {
            type: 'integer',
            description: 'The recursive item count.',
            format: 'int32',
            nullable: true
        },
        ChildCount: {
            type: 'integer',
            description: 'The child count.',
            format: 'int32',
            nullable: true
        },
        SeasonCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        SeriesName: {
            type: 'string',
            description: 'The name of the series.'
        },
        SeriesId: {
            type: 'string',
            description: 'The series id.'
        },
        SeasonId: {
            type: 'string',
            description: 'The season identifier.'
        },
        SpecialFeatureCount: {
            type: 'integer',
            description: 'The special feature count.',
            format: 'int32',
            nullable: true
        },
        DisplayPreferencesId: {
            type: 'string',
            description: 'The display preferences id.'
        },
        Status: {
            type: 'string',
            description: 'The status.'
        },
        AirDays: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DayOfWeek'
            },
            description: 'The air days.'
        },
        Tags: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'The tags.'
        },
        PrimaryImageAspectRatio: {
            type: 'number',
            description: 'The primary image aspect ratio, after image enhancements.',
            format: 'double',
            nullable: true
        },
        Artists: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'The artists.'
        },
        ArtistItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NameIdPair'
            },
            description: 'The artist items.'
        },
        Composers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NameIdPair'
            }
        },
        Album: {
            type: 'string',
            description: 'The album.'
        },
        CollectionType: {
            type: 'string',
            description: 'The type of the collection.'
        },
        DisplayOrder: {
            type: 'string',
            description: 'The display order.'
        },
        AlbumId: {
            type: 'string',
            description: 'The album id.'
        },
        AlbumPrimaryImageTag: {
            type: 'string',
            description: 'The album image tag.'
        },
        SeriesPrimaryImageTag: {
            type: 'string',
            description: 'The series primary image tag.'
        },
        AlbumArtist: {
            type: 'string',
            description: 'The album artist.'
        },
        AlbumArtists: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NameIdPair'
            },
            description: 'The album artists.'
        },
        SeasonName: {
            type: 'string',
            description: 'The name of the season.'
        },
        MediaStreams: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MediaStream'
            },
            description: 'The media streams.'
        },
        PartCount: {
            type: 'integer',
            description: 'The part count.',
            format: 'int32',
            nullable: true
        },
        ImageTags: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'The image tags.'
        },
        BackdropImageTags: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'The backdrop image tags.'
        },
        ParentLogoImageTag: {
            type: 'string',
            description: 'The parent logo image tag.'
        },
        SeriesStudio: {
            type: 'string',
            description: 'The series studio.'
        },
        PrimaryImageItemId: {
            type: 'string'
        },
        PrimaryImageTag: {
            type: 'string'
        },
        ParentThumbItemId: {
            type: 'string',
            description: 'The parent thumb item id.'
        },
        ParentThumbImageTag: {
            type: 'string',
            description: 'The parent thumb image tag.'
        },
        Chapters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ChapterInfo'
            },
            description: 'The chapters.'
        },
        LocationType: {
            '$ref': '#/components/schemas/LocationType'
        },
        MediaType: {
            type: 'string',
            description: 'The type of the media.'
        },
        EndDate: {
            type: 'string',
            description: 'The end date.',
            format: 'date-time',
            nullable: true
        },
        LockedFields: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MetadataFields'
            },
            description: 'The locked fields.'
        },
        LockData: {
            type: 'boolean',
            description: 'A value indicating whether \\[enable internet providers\\].',
            nullable: true
        },
        Width: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        Height: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        CameraMake: {
            type: 'string'
        },
        CameraModel: {
            type: 'string'
        },
        Software: {
            type: 'string'
        },
        ExposureTime: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        FocalLength: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        ImageOrientation: {
            '$ref': '#/components/schemas/Drawing.ImageOrientation'
        },
        Aperture: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        ShutterSpeed: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        Latitude: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        Longitude: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        Altitude: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        IsoSpeedRating: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        SeriesTimerId: {
            type: 'string',
            description: 'The series timer identifier.'
        },
        ChannelPrimaryImageTag: {
            type: 'string',
            description: 'The channel primary image tag.'
        },
        StartDate: {
            type: 'string',
            description: 'The start date of the recording, in UTC.',
            format: 'date-time',
            nullable: true
        },
        CompletionPercentage: {
            type: 'number',
            description: 'The completion percentage.',
            format: 'double',
            nullable: true
        },
        IsRepeat: {
            type: 'boolean',
            description: 'A value indicating whether this instance is repeat.',
            nullable: true
        },
        IsNew: {
            type: 'boolean',
            nullable: true
        },
        EpisodeTitle: {
            type: 'string',
            description: 'The episode title.'
        },
        IsMovie: {
            type: 'boolean',
            description: 'A value indicating whether this instance is movie.',
            nullable: true
        },
        IsSports: {
            type: 'boolean',
            description: 'A value indicating whether this instance is sports.',
            nullable: true
        },
        IsSeries: {
            type: 'boolean',
            description: 'A value indicating whether this instance is series.',
            nullable: true
        },
        IsLive: {
            type: 'boolean',
            description: 'A value indicating whether this instance is live.',
            nullable: true
        },
        IsNews: {
            type: 'boolean',
            description: 'A value indicating whether this instance is news.',
            nullable: true
        },
        IsKids: {
            type: 'boolean',
            description: 'A value indicating whether this instance is kids.',
            nullable: true
        },
        IsPremiere: {
            type: 'boolean',
            description: 'A value indicating whether this instance is premiere.',
            nullable: true
        },
        TimerType: {
            '$ref': '#/components/schemas/LiveTv.TimerType'
        },
        Disabled: {
            type: 'boolean',
            nullable: true
        },
        ManagementId: {
            type: 'string'
        },
        TimerId: {
            type: 'string',
            description: 'The timer identifier.'
        },
        CurrentProgram: {
            '$ref': '#/components/schemas/BaseItemDto'
        },
        MovieCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        SeriesCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        AlbumCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        SongCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MusicVideoCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        Subviews: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ListingsProviderId: {
            type: 'string'
        },
        ListingsChannelId: {
            type: 'string'
        },
        ListingsPath: {
            type: 'string'
        },
        ListingsId: {
            type: 'string'
        },
        ListingsChannelName: {
            type: 'string'
        },
        ListingsChannelNumber: {
            type: 'string'
        },
        AffiliateCallSign: {
            type: 'string'
        }
    },
    description: `This is strictly used as a data transfer object from the api layer. This holds information about a BaseItem in a format that is convenient for the client.
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Dto.BaseItemDto'
} as const;

export const $SyncJobItemStatus = {
    enum: ['Queued', 'Converting', 'ReadyToTransfer', 'Transferring', 'Synced', 'Failed'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Sync.SyncJobItemStatus'
} as const;

export const $Video3DFormat = {
    enum: ['HalfSideBySide', 'FullSideBySide', 'FullTopAndBottom', 'HalfTopAndBottom', 'MVC'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Entities.Video3DFormat'
} as const;

export const $ExternalUrl = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Url: {
            type: 'string',
            description: 'The type of the item.'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Providers.ExternalUrl'
} as const;

export const $MediaSourceInfo = {
    type: 'object',
    properties: {
        Chapters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ChapterInfo'
            }
        },
        Protocol: {
            '$ref': '#/components/schemas/MediaProtocol'
        },
        Id: {
            type: 'string'
        },
        Path: {
            type: 'string'
        },
        EncoderPath: {
            type: 'string'
        },
        EncoderProtocol: {
            '$ref': '#/components/schemas/MediaProtocol'
        },
        Type: {
            '$ref': '#/components/schemas/MediaSourceType'
        },
        ProbePath: {
            type: 'string'
        },
        ProbeProtocol: {
            '$ref': '#/components/schemas/MediaProtocol'
        },
        Container: {
            type: 'string'
        },
        Size: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        Name: {
            type: 'string'
        },
        SortName: {
            type: 'string'
        },
        IsRemote: {
            type: 'boolean',
            description: 'Differentiate internet url vs local network'
        },
        HasMixedProtocols: {
            type: 'boolean'
        },
        RunTimeTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        ContainerStartTimeTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        SupportsTranscoding: {
            type: 'boolean'
        },
        TrancodeLiveStartIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        WallClockStart: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        SupportsDirectStream: {
            type: 'boolean'
        },
        SupportsDirectPlay: {
            type: 'boolean'
        },
        IsInfiniteStream: {
            type: 'boolean'
        },
        RequiresOpening: {
            type: 'boolean'
        },
        OpenToken: {
            type: 'string'
        },
        RequiresClosing: {
            type: 'boolean'
        },
        LiveStreamId: {
            type: 'string'
        },
        BufferMs: {
            type: 'integer',
            format: 'int32',
            nullable: true,
            deprecated: true
        },
        RequiresLooping: {
            type: 'boolean'
        },
        SupportsProbing: {
            type: 'boolean',
            deprecated: true
        },
        Video3DFormat: {
            '$ref': '#/components/schemas/Video3DFormat'
        },
        MediaStreams: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MediaStream'
            }
        },
        Formats: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        Bitrate: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        Timestamp: {
            '$ref': '#/components/schemas/TransportStreamTimestamp'
        },
        RequiredHttpHeaders: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        DirectStreamUrl: {
            type: 'string'
        },
        AddApiKeyToDirectStreamUrl: {
            type: 'boolean'
        },
        TranscodingUrl: {
            type: 'string'
        },
        TranscodingSubProtocol: {
            type: 'string'
        },
        TranscodingContainer: {
            type: 'string'
        },
        AnalyzeDurationMs: {
            type: 'integer',
            format: 'int32',
            nullable: true,
            deprecated: true
        },
        ReadAtNativeFramerate: {
            type: 'boolean',
            deprecated: true
        },
        DefaultAudioStreamIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        DefaultSubtitleStreamIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ItemId: {
            type: 'string',
            description: 'Used only by our Windows app. Not used by Emby Server. The id of the item that this mediasource belongs to, if there is one Also used by Emby for Kodi'
        },
        ServerId: {
            type: 'string',
            description: 'Used only by our Windows app. Not used by Emby Server.'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Dto.MediaSourceInfo'
} as const;

export const $ChapterInfo = {
    type: 'object',
    properties: {
        StartPositionTicks: {
            type: 'integer',
            description: 'The start position ticks.',
            format: 'int64'
        },
        Name: {
            type: 'string',
            description: 'The name.'
        },
        ImageTag: {
            type: 'string'
        },
        MarkerType: {
            '$ref': '#/components/schemas/MarkerType'
        },
        ChapterIndex: {
            type: 'integer',
            format: 'int32'
        }
    },
    description: `Class ChapterInfo
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Entities.ChapterInfo'
} as const;

export const $MarkerType = {
    enum: ['Chapter', 'IntroStart', 'IntroEnd', 'CreditsStart'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Entities.MarkerType'
} as const;

export const $MediaProtocol = {
    enum: ['File', 'Http', 'Rtmp', 'Rtsp', 'Udp', 'Rtp', 'Ftp', 'Mms'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.MediaInfo.MediaProtocol'
} as const;

export const $MediaSourceType = {
    enum: ['Default', 'Grouping', 'Placeholder'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Dto.MediaSourceType'
} as const;

export const $MediaStream = {
    type: 'object',
    properties: {
        Codec: {
            type: 'string',
            description: `The codec.

Probe Field: \`codec_name\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\`, \`MediaBrowser.Model.Entities.MediaStreamType.Audio\`, \`MediaBrowser.Model.Entities.MediaStreamType.Subtitle\`  
Related Enums: \`T:Emby.Media.Model.Enums.VideoMediaTypes\`, \`Emby.Media.Model.Enums.AudioMediaTypes\`, \`Emby.Media.Model.Enums.SubtitleMediaTypes\`.`
        },
        CodecTag: {
            type: 'string',
            description: `The codec tag.

Probe Field: \`codec_tag\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\`, \`MediaBrowser.Model.Entities.MediaStreamType.Audio\`, \`MediaBrowser.Model.Entities.MediaStreamType.Subtitle\`.`
        },
        Language: {
            type: 'string',
            description: `The language.

Probe Field: \`tags["language"]\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Audio\`, \`MediaBrowser.Model.Entities.MediaStreamType.Subtitle\`.`
        },
        ColorTransfer: {
            type: 'string',
            description: `The color transfer characteristics.

Probe Field: \`color_transfer\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\`  
Related Enum: \`Emby.Media.Model.Enums.ColorTransfers\`.`
        },
        ColorPrimaries: {
            type: 'string',
            description: `The chromaticity coordinates of the source primaries.

Probe Field: \`color_primaries\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\`  
Related Enum: \`Emby.Media.Model.Enums.ColorPrimaries\`.`
        },
        ColorSpace: {
            type: 'string',
            description: `The YUV colorspace type.

Probe Field: \`color_space\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\`  
Related Enum: \`Emby.Media.Model.Enums.ColorSpaces\`.`
        },
        Comment: {
            type: 'string',
            description: `The comment.

Probe Field: \`tags["comment"]\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\`, \`MediaBrowser.Model.Entities.MediaStreamType.Audio\`, \`MediaBrowser.Model.Entities.MediaStreamType.Subtitle\`.`
        },
        StreamStartTimeTicks: {
            type: 'integer',
            description: `The start time of the stream.

Probe Field: \`start_time\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\`, \`MediaBrowser.Model.Entities.MediaStreamType.Audio\`, \`MediaBrowser.Model.Entities.MediaStreamType.Subtitle\`.  
Actual type: \`System.TimeSpan\`.`,
            format: 'int64',
            nullable: true
        },
        TimeBase: {
            type: 'string',
            description: `The time\-base.

Probe Field: \`time_base\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\`, \`MediaBrowser.Model.Entities.MediaStreamType.Audio\`, \`MediaBrowser.Model.Entities.MediaStreamType.Subtitle\`.  
Actual type: \`Emby.Media.Model.Types.Rational\`.`
        },
        Title: {
            type: 'string',
            description: `The title.

Probe Field: \`tags["title"]\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\`, \`MediaBrowser.Model.Entities.MediaStreamType.Audio\`, \`MediaBrowser.Model.Entities.MediaStreamType.Subtitle\`.`
        },
        Extradata: {
            type: 'string',
            description: `The extradata.

Probe Field: \`extradata\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\`, \`MediaBrowser.Model.Entities.MediaStreamType.Audio\`, \`MediaBrowser.Model.Entities.MediaStreamType.Subtitle\`.

Currently, this value is only parsed for subtitle streams with codec \`Emby.Media.Model.Enums.SubtitleMediaTypes.dvb_teletext\`.`
        },
        VideoRange: {
            type: 'string'
        },
        DisplayTitle: {
            type: 'string',
            description: `The display title.

Custom property set by the application.`
        },
        DisplayLanguage: {
            type: 'string',
            description: `The display language.

Custom property set by the application.`
        },
        NalLengthSize: {
            type: 'string',
            description: `The nal length size.

Probe Field: \`nal_length_size\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\` of type \`Emby.Media.Model.Enums.VideoMediaTypes.h264\`.  
Actual type: \`System.Int32\`.`
        },
        IsInterlaced: {
            type: 'boolean',
            description: `A value indicating whether this instance is interlaced.

Probe Field: \`field_order\` \!\= \`progressive\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\`.`
        },
        IsAVC: {
            type: 'boolean',
            nullable: true,
            deprecated: true
        },
        ChannelLayout: {
            type: 'string',
            description: `The channel layout.

Probe Field: \`channel_layout\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Audio\`  
Related Enum: \`MediaBrowser.Model.Entities.MediaStream.ChannelLayout\`.`
        },
        BitRate: {
            type: 'integer',
            description: `The bit rate.

Probe Field: \`bit_rate\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\`, \`MediaBrowser.Model.Entities.MediaStreamType.Audio\`.

THIS VALUE IS PROCESSED BY CUSTOM LOGIC AND DOES NOT NECESSARILY MATCH FFPROBE RESULTS\!`,
            format: 'int32',
            nullable: true
        },
        BitDepth: {
            type: 'integer',
            description: `The bit depth.

Probe Field: \`bits_per_sample\` or \`bits_per_raw_sample\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\`, \`MediaBrowser.Model.Entities.MediaStreamType.Audio\`.`,
            format: 'int32',
            nullable: true
        },
        RefFrames: {
            type: 'integer',
            description: `The reference frames.

Probe Field: \`refs\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\`.`,
            format: 'int32',
            nullable: true
        },
        Rotation: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        Channels: {
            type: 'integer',
            description: `The audio channel count.

Probe Field: \`channels\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Audio\`.`,
            format: 'int32',
            nullable: true
        },
        SampleRate: {
            type: 'integer',
            description: `The sample rate.

Probe Field: \`sample_rate\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Audio\`  
Related Enum: \`Emby.Media.Model.Enums.SampleRates\`.`,
            format: 'int32',
            nullable: true
        },
        IsDefault: {
            type: 'boolean',
            description: `A value indicating whether this instance is default.

Probe Field: \`disposition["default"]\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\`, \`MediaBrowser.Model.Entities.MediaStreamType.Audio\`, \`MediaBrowser.Model.Entities.MediaStreamType.Subtitle\`.`
        },
        IsForced: {
            type: 'boolean',
            description: `A value indicating whether this instance is forced.

Probe Field: \`disposition["forced"]\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\`, \`MediaBrowser.Model.Entities.MediaStreamType.Audio\`, \`MediaBrowser.Model.Entities.MediaStreamType.Subtitle\`.`
        },
        IsHearingImpaired: {
            type: 'boolean'
        },
        Height: {
            type: 'integer',
            description: `The height.

Probe Field: \`height\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\`.`,
            format: 'int32',
            nullable: true
        },
        Width: {
            type: 'integer',
            description: `The width.

Probe Field: \`width\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\`.`,
            format: 'int32',
            nullable: true
        },
        AverageFrameRate: {
            type: 'number',
            description: `The average frame rate..

Probe Field: \`avg_frame_rate\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\`.  
Actual type: \`Emby.Media.Model.Types.Rational\`.`,
            format: 'float',
            nullable: true
        },
        RealFrameRate: {
            type: 'number',
            description: `The real frame rate..

Probe Field: \`r_frame_rate\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\`.  
Actual type: \`Emby.Media.Model.Types.Rational\`.`,
            format: 'float',
            nullable: true
        },
        Profile: {
            type: 'string',
            description: `The profile.

Probe Field: \`profile\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\`, \`MediaBrowser.Model.Entities.MediaStreamType.Audio\`  
Related Enums: \`Emby.Media.Model.Enums.AacProfiles\`, \`Emby.Media.Model.Enums.AvcProfiles\`, \`Emby.Media.Model.Enums.H263Profiles\`, \`Emby.Media.Model.Enums.HevcProfiles\`, \`Emby.Media.Model.Enums.Mpeg2Profiles\`,\`Emby.Media.Model.Enums.Vc1Profiles\`, \`Emby.Media.Model.Enums.Mpeg4Profiles\`, \`Emby.Media.Model.Enums.Vp8Profiles\`, \`Emby.Media.Model.Enums.Vp9Profiles\`.`
        },
        Type: {
            '$ref': '#/components/schemas/MediaStreamType'
        },
        AspectRatio: {
            type: 'string',
            description: `The aspect ratio.

Probe Field: \`display_aspect_ratio\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\`.  
Actual type: \`Emby.Media.Model.Types.Rational\`.`
        },
        Index: {
            type: 'integer',
            description: `The index of the stream inside its container.

Probe Field: \`index\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\`, \`MediaBrowser.Model.Entities.MediaStreamType.Audio\`, \`MediaBrowser.Model.Entities.MediaStreamType.Subtitle\`.`,
            format: 'int32'
        },
        IsExternal: {
            type: 'boolean',
            description: `A value indicating whether this instance is external.

Custom property set by the application.`
        },
        DeliveryMethod: {
            '$ref': '#/components/schemas/SubtitleDeliveryMethod'
        },
        DeliveryUrl: {
            type: 'string',
            description: `The delivery URL.

Custom property set by the application.`
        },
        IsExternalUrl: {
            type: 'boolean',
            description: `A value indicating whether this instance is external URL.

Custom property set by the application.`,
            nullable: true
        },
        IsTextSubtitleStream: {
            type: 'boolean'
        },
        SupportsExternalStream: {
            type: 'boolean',
            description: 'A value indicating whether \\[supports external stream\\].'
        },
        Path: {
            type: 'string',
            description: 'The filename.'
        },
        Protocol: {
            '$ref': '#/components/schemas/MediaProtocol'
        },
        PixelFormat: {
            type: 'string',
            description: `The pixel format.

Probe Field: \`pix_fmt\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\`.  
Actual type: \`MediaBrowser.Model.Entities.MediaStream.PixelFormat\`.`
        },
        Level: {
            type: 'number',
            description: `The codec level.

Probe Field: \`level\`  
Applies to: \`MediaBrowser.Model.Entities.MediaStreamType.Video\`  
Related Enums: \`Emby.Media.Model.Enums.AvcLevels\`, \`Emby.Media.Model.Enums.H263Levels\`, \`Emby.Media.Model.Enums.HevcLevels\`, \`Emby.Media.Model.Enums.Mpeg2Levels\`,\`Emby.Media.Model.Enums.Vc1Levels\`, \`Emby.Media.Model.Enums.Mpeg4Levels\`, \`Emby.Media.Model.Enums.Vp8Levels\`, \`Emby.Media.Model.Enums.Vp9Levels\`.`,
            format: 'double',
            nullable: true
        },
        IsAnamorphic: {
            type: 'boolean',
            description: 'A value indicating whether this instance is anamorphic.',
            nullable: true
        },
        ExtendedVideoType: {
            '$ref': '#/components/schemas/ExtendedVideoTypes'
        },
        ExtendedVideoSubType: {
            '$ref': '#/components/schemas/ExtendedVideoSubTypes'
        },
        ExtendedVideoSubTypeDescription: {
            type: 'string',
            description: 'The extended video sub\\-type description.'
        },
        ItemId: {
            type: 'string',
            description: 'Used only by our Windows app. Not used by Emby Server.'
        },
        ServerId: {
            type: 'string',
            description: 'Used only by our Windows app. Not used by Emby Server.'
        },
        AttachmentSize: {
            type: 'integer',
            description: 'The size of the attachment.',
            format: 'int32',
            nullable: true
        },
        MimeType: {
            type: 'string',
            description: 'The type of the MIME.'
        },
        SubtitleLocationType: {
            '$ref': '#/components/schemas/SubtitleLocationType'
        }
    },
    description: `MediaStream information.


MediaStream itens are typically included in a \`MediaBrowser.Model.Dto.MediaSourceInfo\` object.


\`MediaBrowser.Model.Dto.MediaSourceInfo.MediaStreams\`
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Entities.MediaStream'
} as const;

export const $MediaStreamType = {
    enum: ['Unknown', 'Audio', 'Video', 'Subtitle', 'EmbeddedImage', 'Attachment', 'Data'],
    type: 'string',
    description: `Enum MediaStreamType
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Entities.MediaStreamType'
} as const;

export const $SubtitleDeliveryMethod = {
    enum: ['Encode', 'Embed', 'External', 'Hls', 'VideoSideData'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Dlna.SubtitleDeliveryMethod'
} as const;

export const $ExtendedVideoTypes = {
    enum: ['None', 'Hdr10', 'Hdr10Plus', 'HyperLogGamma', 'DolbyVision'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Entities.ExtendedVideoTypes'
} as const;

export const $ExtendedVideoSubTypes = {
    enum: ['None', 'Hdr10', 'HyperLogGamma', 'Hdr10Plus0', 'DoviProfile02', 'DoviProfile10', 'DoviProfile22', 'DoviProfile30', 'DoviProfile42', 'DoviProfile50', 'DoviProfile61', 'DoviProfile76', 'DoviProfile81', 'DoviProfile82', 'DoviProfile83', 'DoviProfile84', 'DoviProfile85', 'DoviProfile92'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Entities.ExtendedVideoSubTypes'
} as const;

export const $SubtitleLocationType = {
    enum: ['InternalStream', 'VideoSideData'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Entities.SubtitleLocationType'
} as const;

export const $TransportStreamTimestamp = {
    enum: ['None', 'Zero', 'Valid'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.MediaInfo.TransportStreamTimestamp'
} as const;

export const $MediaUrl = {
    type: 'object',
    properties: {
        Url: {
            type: 'string'
        },
        Name: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Entities.MediaUrl'
} as const;

export const $ProviderIdDictionary = {
    type: 'object',
    additionalProperties: {
        type: 'string'
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Entities.ProviderIdDictionary'
} as const;

export const $BaseItemPerson = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Id: {
            type: 'string',
            description: 'The identifier.'
        },
        Role: {
            type: 'string',
            description: 'The role.'
        },
        Type: {
            '$ref': '#/components/schemas/PersonType'
        },
        PrimaryImageTag: {
            type: 'string',
            description: 'The primary image tag.'
        }
    },
    description: `This is used by the api to get information about a Person within a BaseItem
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Dto.BaseItemPerson'
} as const;

export const $PersonType = {
    enum: ['Actor', 'Director', 'Writer', 'Producer', 'GuestStar', 'Composer', 'Conductor', 'Lyricist'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Entities.PersonType'
} as const;

export const $NameLongIdPair = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Id: {
            type: 'integer',
            description: 'The identifier.',
            format: 'int64'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Dto.NameLongIdPair'
} as const;

export const $UserItemDataDto = {
    type: 'object',
    properties: {
        Rating: {
            type: 'number',
            description: 'The rating.',
            format: 'double',
            nullable: true
        },
        PlayedPercentage: {
            type: 'number',
            description: 'The played percentage.',
            format: 'double',
            nullable: true
        },
        UnplayedItemCount: {
            type: 'integer',
            description: 'The unplayed item count.',
            format: 'int32',
            nullable: true
        },
        PlaybackPositionTicks: {
            type: 'integer',
            description: 'The playback position ticks.',
            format: 'int64'
        },
        PlayCount: {
            type: 'integer',
            description: 'The play count.',
            format: 'int32',
            nullable: true
        },
        IsFavorite: {
            type: 'boolean',
            description: 'A value indicating whether this instance is favorite.'
        },
        LastPlayedDate: {
            type: 'string',
            description: 'The last played date.',
            format: 'date-time',
            nullable: true
        },
        Played: {
            type: 'boolean',
            description: 'A value indicating whether this `MediaBrowser.Model.Dto.UserItemDataDto` is played.'
        },
        Key: {
            type: 'string',
            description: 'The key.'
        },
        ItemId: {
            type: 'string',
            description: 'The item identifier.'
        },
        ServerId: {
            type: 'string',
            description: 'Used only by our Windows app. Not used by Emby Server.'
        }
    },
    description: `Class UserItemDataDto
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Dto.UserItemDataDto'
} as const;

export const $DayOfWeek = {
    enum: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    type: 'string',
    'x-internal-ref-name': 'System.DayOfWeek'
} as const;

export const $NameIdPair = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Id: {
            type: 'string',
            description: 'The identifier.'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Dto.NameIdPair'
} as const;

export const $LocationType = {
    enum: ['FileSystem', 'Virtual'],
    type: 'string',
    description: `Enum LocationType
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Entities.LocationType'
} as const;

export const $MetadataFields = {
    enum: ['Cast', 'Genres', 'ProductionLocations', 'Studios', 'Tags', 'Name', 'Overview', 'Runtime', 'OfficialRating', 'Collections', 'ChannelNumber', 'SortName', 'OriginalTitle', 'SortIndexNumber', 'SortParentIndexNumber', 'CommunityRating', 'CriticRating', 'Tagline', 'Composers', 'Artists', 'AlbumArtists'],
    type: 'string',
    description: `Enum MetadataFields
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Entities.MetadataFields'
} as const;

export const $Drawing_ImageOrientation = {
    enum: ['TopLeft', 'TopRight', 'BottomRight', 'BottomLeft', 'LeftTop', 'RightTop', 'RightBottom', 'LeftBottom'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Drawing.ImageOrientation'
} as const;

export const $LiveTv_TimerType = {
    enum: ['Program', 'DateTime', 'Keyword'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.LiveTv.TimerType'
} as const;

export const $QueryResult_UserLibrary_TagItem = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UserLibrary.TagItem'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $UserLibrary_TagItem = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Id: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.Api.UserLibrary.TagItem'
} as const;

export const $Collections_CollectionCreationResult = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        Name: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Collections.CollectionCreationResult'
} as const;

export const $QueryResult_Devices_DeviceInfo = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Devices.DeviceInfo'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $Devices_DeviceInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Id: {
            type: 'string',
            description: 'The identifier.'
        },
        InternalId: {
            type: 'integer',
            format: 'int64'
        },
        ReportedDeviceId: {
            type: 'string'
        },
        LastUserName: {
            type: 'string',
            description: 'The last name of the user.'
        },
        AppName: {
            type: 'string',
            description: 'The name of the application.'
        },
        AppVersion: {
            type: 'string',
            description: 'The application version.'
        },
        LastUserId: {
            type: 'string',
            description: 'The last user identifier.'
        },
        DateLastActivity: {
            type: 'string',
            format: 'date-time'
        },
        IconUrl: {
            type: 'string'
        },
        IpAddress: {
            type: 'string',
            format: 'ipv4'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Devices.DeviceInfo'
} as const;

export const $FeatureInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        FeatureType: {
            '$ref': '#/components/schemas/FeatureType'
        }
    },
    'x-internal-ref-name': 'Emby.Features.FeatureInfo'
} as const;

export const $FeatureType = {
    enum: ['System', 'User'],
    type: 'string',
    'x-internal-ref-name': 'Emby.Features.FeatureType'
} as const;

export const $QueryResult_UserLibrary_OfficialRatingItem = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UserLibrary.OfficialRatingItem'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $UserLibrary_OfficialRatingItem = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.Api.UserLibrary.OfficialRatingItem'
} as const;

export const $PackageInfo = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'The internal id of this package.'
        },
        name: {
            type: 'string',
            description: 'The name.'
        },
        shortDescription: {
            type: 'string',
            description: 'The short description.'
        },
        overview: {
            type: 'string',
            description: 'The overview.'
        },
        isPremium: {
            type: 'boolean',
            description: 'A value indicating whether this instance is premium.'
        },
        adult: {
            type: 'boolean',
            description: 'A value indicating whether this instance is adult only content.'
        },
        richDescUrl: {
            type: 'string',
            description: 'The rich desc URL.'
        },
        thumbImage: {
            type: 'string',
            description: 'The thumb image.'
        },
        previewImage: {
            type: 'string',
            description: 'The preview image.'
        },
        type: {
            type: 'string',
            description: 'The type.'
        },
        targetFilename: {
            type: 'string',
            description: 'The target filename.'
        },
        owner: {
            type: 'string',
            description: 'The owner.'
        },
        category: {
            type: 'string',
            description: 'The category.'
        },
        tileColor: {
            type: 'string',
            description: 'The catalog tile color.'
        },
        featureId: {
            type: 'string',
            description: 'The feature id of this package (if premium).'
        },
        price: {
            type: 'number',
            description: 'The price for this package (if premium).',
            format: 'float',
            nullable: true
        },
        targetSystem: {
            '$ref': '#/components/schemas/PackageTargetSystem'
        },
        guid: {
            type: 'string',
            description: 'The guid of the assembly associated with this package (if a plug\\-in). This is used to identify the proper item for automatic updates.'
        },
        isRegistered: {
            type: 'boolean',
            description: 'Whether or not this package is registered.'
        },
        expDate: {
            type: 'string',
            description: 'The expiration date for this package.',
            format: 'date-time'
        },
        versions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PackageVersionInfo'
            },
            description: 'The versions.'
        },
        enableInAppStore: {
            type: 'boolean',
            description: 'A value indicating whether \\[enable in application store\\].'
        },
        installs: {
            type: 'integer',
            description: 'The installs.',
            format: 'int32'
        }
    },
    description: `Class PackageInfo
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Updates.PackageInfo'
} as const;

export const $PackageTargetSystem = {
    enum: ['Server', 'MBTheater', 'MBClassic', 'Other'],
    type: 'string',
    description: `Enum PackageType
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Updates.PackageTargetSystem'
} as const;

export const $PackageVersionInfo = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'The name.'
        },
        guid: {
            type: 'string',
            description: 'The guid.'
        },
        versionStr: {
            type: 'string',
            description: 'The version STR.'
        },
        classification: {
            '$ref': '#/components/schemas/PackageVersionClass'
        },
        description: {
            type: 'string',
            description: 'The description.'
        },
        requiredVersionStr: {
            type: 'string',
            description: 'The required version STR.'
        },
        sourceUrl: {
            type: 'string',
            description: 'The source URL.'
        },
        checksum: {
            type: 'string',
            description: 'The source URL.'
        },
        targetFilename: {
            type: 'string',
            description: 'The target filename.'
        },
        infoUrl: {
            type: 'string'
        },
        runtimes: {
            type: 'string'
        },
        timestamp: {
            type: 'string',
            format: 'date-time',
            nullable: true
        }
    },
    description: `Class PackageVersionInfo
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Updates.PackageVersionInfo'
} as const;

export const $PackageVersionClass = {
    enum: ['Release', 'Beta', 'Dev'],
    type: 'string',
    description: `Enum PackageVersionClass
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Updates.PackageVersionClass'
} as const;

export const $Playlists_PlaylistCreationResult = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        Name: {
            type: 'string'
        },
        ItemAddedCount: {
            type: 'integer',
            format: 'int32'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Controller.Playlists.PlaylistCreationResult'
} as const;

export const $Plugins_PluginInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Version: {
            type: 'string',
            description: 'The version.'
        },
        ConfigurationFileName: {
            type: 'string',
            description: 'The name of the configuration file.'
        },
        Description: {
            type: 'string',
            description: 'The description.'
        },
        Id: {
            type: 'string',
            description: 'The unique id.'
        },
        ImageTag: {
            type: 'string',
            description: 'The image URL.'
        }
    },
    description: `This is a serializable stub class that is used by the api to provide information about installed plugins.
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Plugins.PluginInfo'
} as const;

export const $TaskInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name.'
        },
        State: {
            '$ref': '#/components/schemas/TaskState'
        },
        CurrentProgressPercentage: {
            type: 'number',
            description: 'The progress.',
            format: 'double',
            nullable: true
        },
        Id: {
            type: 'string',
            description: 'The id.'
        },
        LastExecutionResult: {
            '$ref': '#/components/schemas/TaskResult'
        },
        Triggers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TaskTriggerInfo'
            },
            description: 'The triggers.'
        },
        Description: {
            type: 'string',
            description: 'The description.'
        },
        Category: {
            type: 'string',
            description: 'The category.'
        },
        IsHidden: {
            type: 'boolean',
            description: 'A value indicating whether this instance is hidden.'
        },
        Key: {
            type: 'string',
            description: 'The key.'
        }
    },
    description: `Class TaskInfo
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Tasks.TaskInfo'
} as const;

export const $TaskState = {
    enum: ['Idle', 'Cancelling', 'Running'],
    type: 'string',
    description: `Enum TaskState
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Tasks.TaskState'
} as const;

export const $TaskResult = {
    type: 'object',
    properties: {
        StartTimeUtc: {
            type: 'string',
            description: 'The start time UTC.',
            format: 'date-time'
        },
        EndTimeUtc: {
            type: 'string',
            description: 'The end time UTC.',
            format: 'date-time'
        },
        Status: {
            '$ref': '#/components/schemas/TaskCompletionStatus'
        },
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Key: {
            type: 'string',
            description: 'The key.'
        },
        Id: {
            type: 'string',
            description: 'The id.'
        },
        ErrorMessage: {
            type: 'string',
            description: 'The error message.'
        },
        LongErrorMessage: {
            type: 'string',
            description: 'The long error message.'
        }
    },
    description: `Class TaskExecutionInfo
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Tasks.TaskResult'
} as const;

export const $TaskCompletionStatus = {
    enum: ['Completed', 'Failed', 'Cancelled', 'Aborted'],
    type: 'string',
    description: `Enum TaskCompletionStatus
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Tasks.TaskCompletionStatus'
} as const;

export const $TaskTriggerInfo = {
    type: 'object',
    properties: {
        Type: {
            type: 'string',
            description: 'The type.'
        },
        TimeOfDayTicks: {
            type: 'integer',
            description: 'The time of day.',
            format: 'int64',
            nullable: true
        },
        IntervalTicks: {
            type: 'integer',
            description: 'The interval.',
            format: 'int64',
            nullable: true
        },
        SystemEvent: {
            '$ref': '#/components/schemas/SystemEvent'
        },
        DayOfWeek: {
            '$ref': '#/components/schemas/DayOfWeek'
        },
        MaxRuntimeTicks: {
            type: 'integer',
            description: 'The maximum runtime ticks.',
            format: 'int64',
            nullable: true
        }
    },
    description: `Class TaskTriggerInfo
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Tasks.TaskTriggerInfo'
} as const;

export const $SystemEvent = {
    enum: ['WakeFromSleep', 'DisplayConfigurationChange', 'NetworkChange'],
    type: 'string',
    description: `Enum SystemEvent
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Tasks.SystemEvent'
} as const;

export const $Session_SessionInfo = {
    type: 'object',
    properties: {
        PlayState: {
            '$ref': '#/components/schemas/PlayerStateInfo'
        },
        AdditionalUsers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SessionUserInfo'
            }
        },
        RemoteEndPoint: {
            type: 'string',
            description: 'The remote end point.',
            format: 'ipv4'
        },
        Protocol: {
            type: 'string'
        },
        PlayableMediaTypes: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'The playable media types.'
        },
        PlaylistItemId: {
            type: 'string'
        },
        PlaylistIndex: {
            type: 'integer',
            format: 'int32'
        },
        PlaylistLength: {
            type: 'integer',
            format: 'int32'
        },
        Id: {
            type: 'string',
            description: 'The id.'
        },
        ServerId: {
            type: 'string'
        },
        UserId: {
            type: 'string',
            description: 'The user id.'
        },
        PartyId: {
            type: 'string'
        },
        UserName: {
            type: 'string',
            description: 'The username.'
        },
        UserPrimaryImageTag: {
            type: 'string'
        },
        Client: {
            type: 'string',
            description: 'The type of the client.'
        },
        LastActivityDate: {
            type: 'string',
            description: 'The last activity date.',
            format: 'date-time'
        },
        DeviceName: {
            type: 'string',
            description: 'The name of the device.'
        },
        DeviceType: {
            type: 'string'
        },
        NowPlayingItem: {
            '$ref': '#/components/schemas/BaseItemDto'
        },
        InternalDeviceId: {
            type: 'integer',
            format: 'int64'
        },
        DeviceId: {
            type: 'string',
            description: 'The device id.'
        },
        ApplicationVersion: {
            type: 'string',
            description: 'The application version.'
        },
        AppIconUrl: {
            type: 'string',
            description: 'The application icon URL.'
        },
        SupportedCommands: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'The supported commands.'
        },
        TranscodingInfo: {
            '$ref': '#/components/schemas/TranscodingInfo'
        },
        SupportsRemoteControl: {
            type: 'boolean'
        }
    },
    description: `Class SessionInfo
`,
    'x-internal-ref-name': 'MediaBrowser.Controller.Session.SessionInfo'
} as const;

export const $PlayerStateInfo = {
    type: 'object',
    properties: {
        PositionTicks: {
            type: 'integer',
            description: 'The now playing position ticks.',
            format: 'int64',
            nullable: true
        },
        CanSeek: {
            type: 'boolean',
            description: 'A value indicating whether this instance can seek.'
        },
        IsPaused: {
            type: 'boolean',
            description: 'A value indicating whether this instance is paused.'
        },
        IsMuted: {
            type: 'boolean',
            description: 'A value indicating whether this instance is muted.'
        },
        VolumeLevel: {
            type: 'integer',
            description: 'The volume level.',
            format: 'int32',
            nullable: true
        },
        AudioStreamIndex: {
            type: 'integer',
            description: 'The index of the now playing audio stream.',
            format: 'int32',
            nullable: true
        },
        SubtitleStreamIndex: {
            type: 'integer',
            description: 'The index of the now playing subtitle stream.',
            format: 'int32',
            nullable: true
        },
        MediaSourceId: {
            type: 'string',
            description: 'The now playing media version identifier.'
        },
        MediaSource: {
            '$ref': '#/components/schemas/MediaSourceInfo'
        },
        PlayMethod: {
            '$ref': '#/components/schemas/PlayMethod'
        },
        RepeatMode: {
            '$ref': '#/components/schemas/RepeatMode'
        },
        SleepTimerMode: {
            '$ref': '#/components/schemas/SleepTimerMode'
        },
        SleepTimerEndTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        SubtitleOffset: {
            type: 'integer',
            format: 'int32'
        },
        Shuffle: {
            type: 'boolean'
        },
        PlaybackRate: {
            type: 'number',
            format: 'double'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Session.PlayerStateInfo'
} as const;

export const $PlayMethod = {
    enum: ['Transcode', 'DirectStream', 'DirectPlay'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Session.PlayMethod'
} as const;

export const $RepeatMode = {
    enum: ['RepeatNone', 'RepeatAll', 'RepeatOne'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Session.RepeatMode'
} as const;

export const $SleepTimerMode = {
    enum: ['None', 'AfterItem', 'AtTime'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Session.SleepTimerMode'
} as const;

export const $SessionUserInfo = {
    type: 'object',
    properties: {
        UserId: {
            type: 'string',
            description: 'The user identifier.'
        },
        UserName: {
            type: 'string',
            description: 'The name of the user.'
        },
        UserInternalId: {
            type: 'integer',
            format: 'int64'
        }
    },
    description: `Class SessionUserInfo.
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Session.SessionUserInfo'
} as const;

export const $TranscodingInfo = {
    type: 'object',
    properties: {
        AudioCodec: {
            type: 'string'
        },
        VideoCodec: {
            type: 'string'
        },
        SubProtocol: {
            type: 'string'
        },
        Container: {
            type: 'string'
        },
        IsVideoDirect: {
            type: 'boolean'
        },
        IsAudioDirect: {
            type: 'boolean'
        },
        Bitrate: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        AudioBitrate: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        VideoBitrate: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        Framerate: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        CompletionPercentage: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        TranscodingPositionTicks: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        TranscodingStartPositionTicks: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        Width: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        Height: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        AudioChannels: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        TranscodeReasons: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TranscodeReason'
            }
        },
        CurrentCpuUsage: {
            type: 'number',
            description: 'Deprecated, please use ProcessStatistics instead',
            format: 'double',
            nullable: true,
            deprecated: true
        },
        AverageCpuUsage: {
            type: 'number',
            description: 'Deprecated, please use ProcessStatistics instead',
            format: 'double',
            nullable: true,
            deprecated: true
        },
        CpuHistory: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Tuple_Double-Double'
            },
            description: 'Deprecated, please use ProcessStatistics instead',
            deprecated: true
        },
        ProcessStatistics: {
            '$ref': '#/components/schemas/ProcessRun.Metrics.ProcessStatistics'
        },
        CurrentThrottle: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        VideoDecoder: {
            type: 'string'
        },
        VideoDecoderIsHardware: {
            type: 'boolean'
        },
        VideoDecoderMediaType: {
            type: 'string'
        },
        VideoDecoderHwAccel: {
            type: 'string'
        },
        VideoEncoder: {
            type: 'string'
        },
        VideoEncoderIsHardware: {
            type: 'boolean'
        },
        VideoEncoderMediaType: {
            type: 'string'
        },
        VideoEncoderHwAccel: {
            type: 'string'
        },
        VideoPipelineInfo: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Transcoding.VpStepInfo'
            }
        },
        SubtitlePipelineInfos: {
            type: 'array',
            items: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/Transcoding.VpStepInfo'
                }
            }
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Session.TranscodingInfo'
} as const;

export const $TranscodeReason = {
    enum: ['ContainerNotSupported', 'VideoCodecNotSupported', 'AudioCodecNotSupported', 'ContainerBitrateExceedsLimit', 'AudioBitrateNotSupported', 'AudioChannelsNotSupported', 'VideoResolutionNotSupported', 'UnknownVideoStreamInfo', 'UnknownAudioStreamInfo', 'AudioProfileNotSupported', 'AudioSampleRateNotSupported', 'AnamorphicVideoNotSupported', 'InterlacedVideoNotSupported', 'SecondaryAudioNotSupported', 'RefFramesNotSupported', 'VideoBitDepthNotSupported', 'VideoBitrateNotSupported', 'VideoFramerateNotSupported', 'VideoLevelNotSupported', 'VideoProfileNotSupported', 'AudioBitDepthNotSupported', 'SubtitleCodecNotSupported', 'DirectPlayError', 'VideoRangeNotSupported', 'SubtitleContentOptionsEnabled', 'ExternalAudioNotSupported', 'AudioDelayNotSupported'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Session.TranscodeReason'
} as const;

export const $Tuple_Double_Double = {
    type: 'object',
    properties: {
        Item1: {
            type: 'number',
            format: 'double'
        },
        Item2: {
            type: 'number',
            format: 'double'
        }
    }
} as const;

export const $ProcessRun_Metrics_ProcessStatistics = {
    type: 'object',
    properties: {
        CurrentCpu: {
            type: 'number',
            description: 'The current cpu.',
            format: 'double'
        },
        AverageCpu: {
            type: 'number',
            description: 'The average cpu.',
            format: 'double'
        },
        CurrentVirtualMemory: {
            type: 'number',
            description: 'The currently allocated virtual memory.',
            format: 'double'
        },
        CurrentWorkingSet: {
            type: 'number',
            description: 'The currently allocated working set.',
            format: 'double'
        },
        Metrics: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProcessRun.Metrics.ProcessMetricPoint'
            },
            description: 'The metrics.'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.ProcessRun.Metrics.ProcessStatistics'
} as const;

export const $ProcessRun_Metrics_ProcessMetricPoint = {
    type: 'object',
    properties: {
        Time: {
            type: 'string',
            description: 'The time.',
            format: 'time'
        },
        CpuPercent: {
            type: 'number',
            description: 'The cpu percent.',
            format: 'double'
        },
        VirtualMemory: {
            type: 'number',
            description: 'The virtual memory.',
            format: 'double'
        },
        WorkingSet: {
            type: 'number',
            description: 'The working set.',
            format: 'double'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.ProcessRun.Metrics.ProcessMetricPoint'
} as const;

export const $Transcoding_VpStepInfo = {
    type: 'object',
    properties: {
        StepType: {
            '$ref': '#/components/schemas/Transcoding.VpStepTypes'
        },
        StepTypeName: {
            type: 'string'
        },
        HardwareContextName: {
            type: 'string'
        },
        IsHardwareContext: {
            type: 'boolean'
        },
        Name: {
            type: 'string'
        },
        Short: {
            type: 'string'
        },
        FfmpegName: {
            type: 'string'
        },
        FfmpegDescription: {
            type: 'string'
        },
        FfmpegOptions: {
            type: 'string'
        },
        Param: {
            type: 'string'
        },
        ParamShort: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Session.Transcoding.VpStepInfo'
} as const;

export const $Transcoding_VpStepTypes = {
    enum: ['Decoder', 'Encoder', 'Scaling', 'Deinterlace', 'SubtitleOverlay', 'ToneMapping', 'ColorConversion', 'SplitCaptions', 'TextSub2Video', 'GraphicSub2Video', 'GraphicSub2Text', 'BurnInTextSubs', 'BurnInGraphicSubs', 'ScaleSubs', 'TextMod', 'Censor', 'ShowSpeaker', 'StripStyles', 'ConnectTo', 'Rotate'],
    type: 'string',
    description: `Video Processing Step Type enum.
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Session.Transcoding.VpStepTypes'
} as const;

export const $ImageType = {
    enum: ['Primary', 'Art', 'Backdrop', 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'],
    type: 'string',
    description: `Enum ImageType
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Entities.ImageType'
} as const;

export const $NameValuePair = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Value: {
            type: 'string',
            description: 'The value.'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Dto.NameValuePair'
} as const;

export const $MBBackup_Api_RestoreOptions = {
    type: 'object',
    properties: {
        RestoreServerId: {
            type: 'boolean'
        },
        UseFiles: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'MBBackup.Api.RestoreOptions'
} as const;

export const $MBBackup_Api_DataRestoreOptions = {
    type: 'object',
    properties: {
        Users: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MBBackup.Api.UserRestoreInfo'
            }
        }
    },
    'x-internal-ref-name': 'MBBackup.Api.DataRestoreOptions'
} as const;

export const $MBBackup_Api_UserRestoreInfo = {
    type: 'object',
    properties: {
        SourceUserId: {
            type: 'string'
        },
        TargetUserId: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'MBBackup.Api.UserRestoreInfo'
} as const;

export const $MBBackup_Api_AllBackupsInfo = {
    type: 'object',
    properties: {
        FullBackupInfo: {
            '$ref': '#/components/schemas/MBBackup.BackupInfo'
        },
        LightBackups: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MBBackup.BackupInfo'
            }
        }
    },
    'x-internal-ref-name': 'MBBackup.Api.AllBackupsInfo'
} as const;

export const $MBBackup_BackupInfo = {
    type: 'object',
    properties: {
        ServerVersion: {
            type: 'string'
        },
        PluginVersion: {
            type: 'string'
        },
        Name: {
            type: 'string'
        },
        CanRestore: {
            type: 'boolean'
        },
        IsFullBackup: {
            type: 'boolean'
        },
        DateCreated: {
            type: 'string',
            format: 'date-time'
        },
        Users: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NameIdPair'
            }
        }
    },
    'x-internal-ref-name': 'MBBackup.BackupInfo'
} as const;

export const $Branding_BrandingOptions = {
    type: 'object',
    properties: {
        LoginDisclaimer: {
            type: 'string',
            description: 'The login disclaimer.'
        },
        CustomCss: {
            type: 'string',
            description: 'The custom CSS.'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Branding.BrandingOptions'
} as const;

export const $Connect_ConnectAuthenticationExchangeResult = {
    type: 'object',
    properties: {
        LocalUserId: {
            type: 'string'
        },
        AccessToken: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.Server.Connect.ConnectAuthenticationExchangeResult'
} as const;

export const $Devices_DeviceOptions = {
    type: 'object',
    properties: {
        CustomName: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Devices.DeviceOptions'
} as const;

export const $Devices_ContentUploadHistory = {
    type: 'object',
    properties: {
        DeviceId: {
            type: 'string'
        },
        FilesUploaded: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Devices.LocalFileInfo'
            }
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Devices.ContentUploadHistory'
} as const;

export const $Devices_LocalFileInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        Album: {
            type: 'string'
        },
        MimeType: {
            type: 'string'
        },
        DateCreated: {
            type: 'string',
            format: 'date-time',
            nullable: true
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Devices.LocalFileInfo'
} as const;

export const $DisplayPreferences = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        SortBy: {
            type: 'string'
        },
        CustomPrefs: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        SortOrder: {
            '$ref': '#/components/schemas/SortOrder'
        },
        Client: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.Api.DisplayPreferences'
} as const;

export const $SortOrder = {
    enum: ['Ascending', 'Descending'],
    type: 'string',
    description: `Enum SortOrder
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Entities.SortOrder'
} as const;

export const $Dlna_Profiles_DlnaProfile = {
    type: 'object',
    properties: {
        Type: {
            '$ref': '#/components/schemas/Dlna.Profiles.DeviceProfileType'
        },
        Path: {
            type: 'string'
        },
        UserId: {
            type: 'string'
        },
        AlbumArtPn: {
            type: 'string'
        },
        MaxAlbumArtWidth: {
            type: 'integer',
            format: 'int32'
        },
        MaxAlbumArtHeight: {
            type: 'integer',
            format: 'int32'
        },
        MaxIconWidth: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MaxIconHeight: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        FriendlyName: {
            type: 'string'
        },
        Manufacturer: {
            type: 'string'
        },
        ManufacturerUrl: {
            type: 'string'
        },
        ModelName: {
            type: 'string'
        },
        ModelDescription: {
            type: 'string'
        },
        ModelNumber: {
            type: 'string'
        },
        ModelUrl: {
            type: 'string'
        },
        SerialNumber: {
            type: 'string'
        },
        EnableAlbumArtInDidl: {
            type: 'boolean'
        },
        EnableSingleAlbumArtLimit: {
            type: 'boolean'
        },
        EnableSingleSubtitleLimit: {
            type: 'boolean'
        },
        ProtocolInfo: {
            type: 'string'
        },
        TimelineOffsetSeconds: {
            type: 'integer',
            format: 'int32'
        },
        RequiresPlainVideoItems: {
            type: 'boolean'
        },
        RequiresPlainFolders: {
            type: 'boolean'
        },
        IgnoreTranscodeByteRangeRequests: {
            type: 'boolean'
        },
        SupportsSamsungBookmark: {
            type: 'boolean'
        },
        Identification: {
            '$ref': '#/components/schemas/Dlna.Profiles.DeviceIdentification'
        },
        ProtocolInfoDetection: {
            '$ref': '#/components/schemas/Dlna.Profiles.ProtocolInfoDetection'
        },
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Id: {
            type: 'string'
        },
        SupportedMediaTypes: {
            type: 'string'
        },
        MaxStreamingBitrate: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        MusicStreamingTranscodingBitrate: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MaxStaticMusicBitrate: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        DeclaredFeatures: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        DirectPlayProfiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DirectPlayProfile'
            },
            description: 'The direct play profiles.'
        },
        TranscodingProfiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TranscodingProfile'
            },
            description: 'The transcoding profiles.'
        },
        ContainerProfiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ContainerProfile'
            }
        },
        CodecProfiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodecProfile'
            }
        },
        ResponseProfiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResponseProfile'
            }
        },
        SubtitleProfiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubtitleProfile'
            }
        }
    },
    'x-internal-ref-name': 'Emby.Dlna.Profiles.DlnaProfile'
} as const;

export const $Dlna_Profiles_DeviceProfileType = {
    enum: ['System', 'User'],
    type: 'string',
    'x-internal-ref-name': 'Emby.Dlna.Profiles.DeviceProfileType'
} as const;

export const $Dlna_Profiles_DeviceIdentification = {
    type: 'object',
    properties: {
        FriendlyName: {
            type: 'string'
        },
        ModelNumber: {
            type: 'string'
        },
        SerialNumber: {
            type: 'string'
        },
        ModelName: {
            type: 'string'
        },
        ModelDescription: {
            type: 'string'
        },
        DeviceDescription: {
            type: 'string'
        },
        ModelUrl: {
            type: 'string'
        },
        Manufacturer: {
            type: 'string'
        },
        ManufacturerUrl: {
            type: 'string'
        },
        Headers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Dlna.Profiles.HttpHeaderInfo'
            }
        }
    },
    'x-internal-ref-name': 'Emby.Dlna.Profiles.DeviceIdentification'
} as const;

export const $Dlna_Profiles_HttpHeaderInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Value: {
            type: 'string'
        },
        Match: {
            '$ref': '#/components/schemas/Dlna.Profiles.HeaderMatchType'
        }
    },
    'x-internal-ref-name': 'Emby.Dlna.Profiles.HttpHeaderInfo'
} as const;

export const $Dlna_Profiles_HeaderMatchType = {
    enum: ['Equals', 'Regex', 'Substring'],
    type: 'string',
    'x-internal-ref-name': 'Emby.Dlna.Profiles.HeaderMatchType'
} as const;

export const $Dlna_Profiles_ProtocolInfoDetection = {
    type: 'object',
    properties: {
        EnabledForVideo: {
            type: 'boolean'
        },
        EnabledForAudio: {
            type: 'boolean'
        },
        EnabledForPhotos: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'Emby.Dlna.Profiles.ProtocolInfoDetection'
} as const;

export const $DirectPlayProfile = {
    type: 'object',
    properties: {
        Container: {
            type: 'string'
        },
        AudioCodec: {
            type: 'string'
        },
        VideoCodec: {
            type: 'string'
        },
        Type: {
            '$ref': '#/components/schemas/DlnaProfileType'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Dlna.DirectPlayProfile'
} as const;

export const $DlnaProfileType = {
    enum: ['Audio', 'Video', 'Photo'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Dlna.DlnaProfileType'
} as const;

export const $TranscodingProfile = {
    type: 'object',
    properties: {
        Container: {
            type: 'string'
        },
        Type: {
            '$ref': '#/components/schemas/DlnaProfileType'
        },
        VideoCodec: {
            type: 'string'
        },
        AudioCodec: {
            type: 'string'
        },
        Protocol: {
            type: 'string'
        },
        EstimateContentLength: {
            type: 'boolean'
        },
        EnableMpegtsM2TsMode: {
            type: 'boolean'
        },
        TranscodeSeekInfo: {
            '$ref': '#/components/schemas/TranscodeSeekInfo'
        },
        CopyTimestamps: {
            type: 'boolean'
        },
        Context: {
            '$ref': '#/components/schemas/EncodingContext'
        },
        MaxAudioChannels: {
            type: 'string'
        },
        MinSegments: {
            type: 'integer',
            format: 'int32'
        },
        SegmentLength: {
            type: 'integer',
            format: 'int32'
        },
        BreakOnNonKeyFrames: {
            type: 'boolean'
        },
        AllowInterlacedVideoStreamCopy: {
            type: 'boolean'
        },
        ManifestSubtitles: {
            type: 'string'
        },
        MaxManifestSubtitles: {
            type: 'integer',
            format: 'int32'
        },
        MaxWidth: {
            type: 'integer',
            format: 'int32'
        },
        MaxHeight: {
            type: 'integer',
            format: 'int32'
        },
        FillEmptySubtitleSegments: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Dlna.TranscodingProfile'
} as const;

export const $TranscodeSeekInfo = {
    enum: ['Auto', 'Bytes'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Dlna.TranscodeSeekInfo'
} as const;

export const $EncodingContext = {
    enum: ['Streaming', 'Static'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Dlna.EncodingContext'
} as const;

export const $ContainerProfile = {
    type: 'object',
    properties: {
        Type: {
            '$ref': '#/components/schemas/DlnaProfileType'
        },
        Conditions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProfileCondition'
            }
        },
        Container: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Dlna.ContainerProfile'
} as const;

export const $ProfileCondition = {
    type: 'object',
    properties: {
        Condition: {
            '$ref': '#/components/schemas/ProfileConditionType'
        },
        Property: {
            '$ref': '#/components/schemas/ProfileConditionValue'
        },
        Value: {
            type: 'string'
        },
        IsRequired: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Dlna.ProfileCondition'
} as const;

export const $ProfileConditionType = {
    enum: ['Equals', 'NotEquals', 'LessThanEqual', 'GreaterThanEqual', 'EqualsAny'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Dlna.ProfileConditionType'
} as const;

export const $ProfileConditionValue = {
    enum: ['AudioChannels', 'AudioBitrate', 'AudioProfile', 'Width', 'Height', 'Has64BitOffsets', 'PacketLength', 'VideoBitDepth', 'VideoBitrate', 'VideoFramerate', 'VideoLevel', 'VideoProfile', 'VideoTimestamp', 'IsAnamorphic', 'RefFrames', 'NumAudioStreams', 'NumVideoStreams', 'IsSecondaryAudio', 'VideoCodecTag', 'IsAvc', 'IsInterlaced', 'AudioSampleRate', 'AudioBitDepth', 'VideoRange', 'VideoRotation', 'IsExternalAudio'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Dlna.ProfileConditionValue'
} as const;

export const $CodecProfile = {
    type: 'object',
    properties: {
        Type: {
            '$ref': '#/components/schemas/CodecType'
        },
        Conditions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProfileCondition'
            }
        },
        ApplyConditions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProfileCondition'
            }
        },
        Codec: {
            type: 'string'
        },
        Container: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Dlna.CodecProfile'
} as const;

export const $CodecType = {
    enum: ['Video', 'VideoAudio', 'Audio'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Dlna.CodecType'
} as const;

export const $ResponseProfile = {
    type: 'object',
    properties: {
        Container: {
            type: 'string'
        },
        AudioCodec: {
            type: 'string'
        },
        VideoCodec: {
            type: 'string'
        },
        Type: {
            '$ref': '#/components/schemas/DlnaProfileType'
        },
        OrgPn: {
            type: 'string'
        },
        MimeType: {
            type: 'string'
        },
        Conditions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProfileCondition'
            }
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Dlna.ResponseProfile'
} as const;

export const $SubtitleProfile = {
    type: 'object',
    properties: {
        Format: {
            type: 'string'
        },
        Method: {
            '$ref': '#/components/schemas/SubtitleDeliveryMethod'
        },
        DidlMode: {
            type: 'string'
        },
        Language: {
            type: 'string'
        },
        Container: {
            type: 'string'
        },
        Protocol: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Dlna.SubtitleProfile'
} as const;

export const $Configuration_ToneMapping_ToneMapOptionsVisibility = {
    type: 'object',
    properties: {
        ShowAdvanced: {
            type: 'boolean'
        },
        IsSoftwareToneMappingAvailable: {
            type: 'boolean'
        },
        IsAnyHardwareToneMappingAvailable: {
            type: 'boolean'
        },
        ShowNvidiaOptions: {
            type: 'boolean'
        },
        ShowQuickSyncOptions: {
            type: 'boolean'
        },
        ShowVaapiOptions: {
            type: 'boolean'
        },
        IsOpenClAvailable: {
            type: 'boolean'
        },
        IsOpenClSuperTAvailable: {
            type: 'boolean'
        },
        IsVaapiNativeAvailable: {
            type: 'boolean'
        },
        IsQuickSyncNativeAvailable: {
            type: 'boolean'
        },
        OperatingSystem: {
            '$ref': '#/components/schemas/OperatingSystem'
        }
    },
    'x-internal-ref-name': 'Emby.Server.MediaEncoding.Configuration.ToneMapping.ToneMapOptionsVisibility'
} as const;

export const $OperatingSystem = {
    enum: ['Windows', 'Linux', 'OSX', 'BSD', 'Android'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.System.OperatingSystem'
} as const;

export const $EditObjectContainer = {
    type: 'object',
    properties: {
        Object: {
            type: 'object'
        },
        DefaultObject: {
            type: 'object'
        },
        TypeName: {
            type: 'string'
        },
        EditorRoot: {
            '$ref': '#/components/schemas/Editors.EditorRoot'
        }
    },
    'x-internal-ref-name': 'Emby.Web.GenericEdit.EditObjectContainer'
} as const;

export const $Editors_EditorRoot = {
    type: 'object',
    properties: {
        PropertyConditions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Conditions.PropertyCondition'
            }
        },
        PostbackActions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Actions.PostbackAction'
            }
        },
        TitleButton: {
            '$ref': '#/components/schemas/Editors.EditorButtonItem'
        },
        EditorItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Editors.EditorBase'
            }
        },
        EditorType: {
            '$ref': '#/components/schemas/Common.EditorTypes'
        },
        Name: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        AllowEmpty: {
            type: 'boolean'
        },
        IsReadOnly: {
            type: 'boolean'
        },
        IsAdvanced: {
            type: 'boolean'
        },
        DisplayName: {
            type: 'string'
        },
        Description: {
            type: 'string'
        },
        FeatureRequiresPremiere: {
            type: 'boolean'
        },
        ParentId: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.Web.GenericEdit.Editors.EditorRoot'
} as const;

export const $Conditions_PropertyCondition = {
    type: 'object',
    properties: {
        AffectedPropertyId: {
            type: 'string'
        },
        ConditionType: {
            '$ref': '#/components/schemas/Conditions.PropertyConditionType'
        },
        TargetPropertyId: {
            type: 'string',
            description: 'The target property name or path.'
        },
        SimpleCondition: {
            '$ref': '#/components/schemas/Attributes.SimpleCondition'
        },
        ValueCondition: {
            '$ref': '#/components/schemas/Attributes.ValueCondition'
        },
        Value: {
            type: 'object',
            description: 'The value.'
        }
    },
    'x-internal-ref-name': 'Emby.Web.GenericEdit.Conditions.PropertyCondition'
} as const;

export const $Conditions_PropertyConditionType = {
    enum: ['Visible', 'Enabled'],
    type: 'string',
    'x-internal-ref-name': 'Emby.Web.GenericEdit.Conditions.PropertyConditionType'
} as const;

export const $Attributes_SimpleCondition = {
    enum: ['IsTrue', 'IsFalse', 'IsNull', 'IsNotNullOrEmpty'],
    type: 'string',
    description: `Conditions on the source value.
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Attributes.SimpleCondition'
} as const;

export const $Attributes_ValueCondition = {
    enum: ['IsEqual', 'IsNotEqual', 'IsGreater', 'IsGreaterOrEqual', 'IsLess', 'IsLessOrEqual'],
    type: 'string',
    description: `Conditions for comparing with a target value.
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Attributes.ValueCondition'
} as const;

export const $Actions_PostbackAction = {
    type: 'object',
    properties: {
        TargetEditorId: {
            type: 'string'
        },
        PostbackCommandId: {
            type: 'string'
        },
        CommandParameterPropertyId: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.Web.GenericEdit.Actions.PostbackAction'
} as const;

export const $Editors_EditorButtonItem = {
    type: 'object',
    properties: {
        EditorType: {
            '$ref': '#/components/schemas/Common.EditorTypes'
        },
        Name: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        AllowEmpty: {
            type: 'boolean'
        },
        IsReadOnly: {
            type: 'boolean'
        },
        IsAdvanced: {
            type: 'boolean'
        },
        DisplayName: {
            type: 'string'
        },
        Description: {
            type: 'string'
        },
        FeatureRequiresPremiere: {
            type: 'boolean'
        },
        ParentId: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.Web.GenericEdit.Editors.EditorButtonItem'
} as const;

export const $Common_EditorTypes = {
    enum: ['Group', 'Text', 'Numeric', 'Boolean', 'SelectSingle', 'SelectMultiple', 'Date', 'FilePath', 'FolderPath', 'StatusItem', 'ProgressItem', 'ButtonItem', 'ButtonGroup', 'CaptionItem', 'LabelItem', 'ItemList', 'RadioGroup', 'DxDataGrid', 'DxPivotGrid', 'SpacerItem'],
    type: 'string',
    'x-internal-ref-name': 'Emby.Web.GenericEdit.Common.EditorTypes'
} as const;

export const $Editors_EditorBase = {
    type: 'object',
    properties: {
        EditorType: {
            '$ref': '#/components/schemas/Common.EditorTypes'
        },
        Name: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        AllowEmpty: {
            type: 'boolean'
        },
        IsReadOnly: {
            type: 'boolean'
        },
        IsAdvanced: {
            type: 'boolean'
        },
        DisplayName: {
            type: 'string'
        },
        Description: {
            type: 'string'
        },
        FeatureRequiresPremiere: {
            type: 'boolean'
        },
        ParentId: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.Web.GenericEdit.Editors.EditorBase'
} as const;

export const $MediaEncoding_CodecParameterContext = {
    enum: ['Playback', 'Conversion'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Controller.MediaEncoding.CodecParameterContext'
} as const;

export const $ValidatePath = {
    type: 'object',
    properties: {
        ValidateWriteable: {
            type: 'boolean'
        },
        IsFile: {
            type: 'boolean',
            nullable: true
        },
        Username: {
            type: 'string'
        },
        Password: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.Api.ValidatePath'
} as const;

export const $DefaultDirectoryBrowserInfo = {
    type: 'object',
    properties: {
        Path: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.Api.DefaultDirectoryBrowserInfo'
} as const;

export const $IO_FileSystemEntryInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Path: {
            type: 'string',
            description: 'The path.'
        },
        Type: {
            '$ref': '#/components/schemas/IO.FileSystemEntryType'
        }
    },
    description: `Class FileSystemEntryInfo
`,
    'x-internal-ref-name': 'MediaBrowser.Model.IO.FileSystemEntryInfo'
} as const;

export const $IO_FileSystemEntryType = {
    enum: ['File', 'Directory', 'NetworkComputer', 'NetworkShare'],
    type: 'string',
    description: `Enum FileSystemEntryType
`,
    'x-internal-ref-name': 'MediaBrowser.Model.IO.FileSystemEntryType'
} as const;

export const $GetDirectoryContents = {
    type: 'object',
    properties: {
        Username: {
            type: 'string'
        },
        Password: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.Api.GetDirectoryContents'
} as const;

export const $UserLibrary_UpdateUserItemAccess = {
    type: 'object',
    properties: {
        ItemIds: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        UserIds: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ItemAccess: {
            '$ref': '#/components/schemas/UserItemShareLevel'
        }
    },
    'x-internal-ref-name': 'Emby.Api.UserLibrary.UpdateUserItemAccess'
} as const;

export const $UserItemShareLevel = {
    enum: ['None', 'Read', 'Write', 'Manage', 'ManageDelete'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Dto.UserItemShareLevel'
} as const;

export const $ItemCounts = {
    type: 'object',
    properties: {
        MovieCount: {
            type: 'integer',
            description: 'The movie count.',
            format: 'int32'
        },
        SeriesCount: {
            type: 'integer',
            description: 'The series count.',
            format: 'int32'
        },
        EpisodeCount: {
            type: 'integer',
            description: 'The episode count.',
            format: 'int32'
        },
        GameCount: {
            type: 'integer',
            description: 'The game count.',
            format: 'int32'
        },
        ArtistCount: {
            type: 'integer',
            format: 'int32'
        },
        ProgramCount: {
            type: 'integer',
            format: 'int32'
        },
        GameSystemCount: {
            type: 'integer',
            description: 'The game system count.',
            format: 'int32'
        },
        TrailerCount: {
            type: 'integer',
            description: 'The trailer count.',
            format: 'int32'
        },
        SongCount: {
            type: 'integer',
            description: 'The song count.',
            format: 'int32'
        },
        AlbumCount: {
            type: 'integer',
            description: 'The album count.',
            format: 'int32'
        },
        MusicVideoCount: {
            type: 'integer',
            description: 'The music video count.',
            format: 'int32'
        },
        BoxSetCount: {
            type: 'integer',
            description: 'The box set count.',
            format: 'int32'
        },
        BookCount: {
            type: 'integer',
            description: 'The book count.',
            format: 'int32'
        },
        ItemCount: {
            type: 'integer',
            format: 'int32'
        }
    },
    description: `Class LibrarySummary
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Dto.ItemCounts'
} as const;

export const $Persistence_IntroDebugInfo = {
    type: 'object',
    properties: {
        Id: {
            type: 'integer',
            format: 'int64'
        },
        Path: {
            type: 'string'
        },
        Start: {
            type: 'integer',
            format: 'int64'
        },
        End: {
            type: 'integer',
            format: 'int64'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Controller.Persistence.IntroDebugInfo'
} as const;

export const $LibraryOptionsResult = {
    type: 'object',
    properties: {
        MetadataSavers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LibraryOptionInfo'
            }
        },
        MetadataReaders: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LibraryOptionInfo'
            }
        },
        SubtitleFetchers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LibraryOptionInfo'
            }
        },
        LyricsFetchers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LibraryOptionInfo'
            }
        },
        TypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LibraryTypeOptions'
            }
        },
        DefaultLibraryOptions: {
            '$ref': '#/components/schemas/LibraryOptions'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Controller.Providers.LibraryOptionsResult'
} as const;

export const $LibraryOptionInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        SetupUrl: {
            type: 'string'
        },
        DefaultEnabled: {
            type: 'boolean'
        },
        Features: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MetadataFeatures'
            }
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Controller.Providers.LibraryOptionInfo'
} as const;

export const $MetadataFeatures = {
    enum: ['Collections', 'Adult', 'RequiredSetup'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Configuration.MetadataFeatures'
} as const;

export const $LibraryTypeOptions = {
    type: 'object',
    properties: {
        Type: {
            type: 'string'
        },
        MetadataFetchers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LibraryOptionInfo'
            }
        },
        ImageFetchers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LibraryOptionInfo'
            }
        },
        SupportedImageTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ImageType'
            }
        },
        DefaultImageOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ImageOption'
            }
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Controller.Providers.LibraryTypeOptions'
} as const;

export const $ImageOption = {
    type: 'object',
    properties: {
        Type: {
            '$ref': '#/components/schemas/ImageType'
        },
        Limit: {
            type: 'integer',
            description: 'The limit.',
            format: 'int32'
        },
        MinWidth: {
            type: 'integer',
            description: 'The minimum width.',
            format: 'int32'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Configuration.ImageOption'
} as const;

export const $LibraryOptions = {
    type: 'object',
    properties: {
        EnableArchiveMediaFiles: {
            type: 'boolean'
        },
        EnablePhotos: {
            type: 'boolean'
        },
        EnableRealtimeMonitor: {
            type: 'boolean'
        },
        EnableMarkerDetection: {
            type: 'boolean'
        },
        EnableMarkerDetectionDuringLibraryScan: {
            type: 'boolean'
        },
        IntroDetectionFingerprintLength: {
            type: 'integer',
            format: 'int32'
        },
        EnableChapterImageExtraction: {
            type: 'boolean'
        },
        ExtractChapterImagesDuringLibraryScan: {
            type: 'boolean'
        },
        DownloadImagesInAdvance: {
            type: 'boolean'
        },
        CacheImages: {
            type: 'boolean'
        },
        ExcludeFromSearch: {
            type: 'boolean'
        },
        EnablePlexIgnore: {
            type: 'boolean'
        },
        PathInfos: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MediaPathInfo'
            }
        },
        IgnoreHiddenFiles: {
            type: 'boolean'
        },
        IgnoreFileExtensions: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        SaveLocalMetadata: {
            type: 'boolean'
        },
        SaveMetadataHidden: {
            type: 'boolean'
        },
        SaveLocalThumbnailSets: {
            type: 'boolean'
        },
        ImportPlaylists: {
            type: 'boolean'
        },
        EnableAutomaticSeriesGrouping: {
            type: 'boolean'
        },
        ShareEmbeddedMusicAlbumImages: {
            type: 'boolean'
        },
        EnableEmbeddedTitles: {
            type: 'boolean'
        },
        EnableAudioResume: {
            type: 'boolean'
        },
        AutoGenerateChapters: {
            type: 'boolean'
        },
        MergeTopLevelFolders: {
            type: 'boolean'
        },
        AutoGenerateChapterIntervalMinutes: {
            type: 'integer',
            format: 'int32'
        },
        AutomaticRefreshIntervalDays: {
            type: 'integer',
            format: 'int32'
        },
        PlaceholderMetadataRefreshIntervalDays: {
            type: 'integer',
            format: 'int32'
        },
        PreferredMetadataLanguage: {
            type: 'string',
            description: 'The preferred metadata language.'
        },
        PreferredImageLanguage: {
            type: 'string'
        },
        ContentType: {
            type: 'string'
        },
        MetadataCountryCode: {
            type: 'string',
            description: 'The metadata country code.'
        },
        MetadataSavers: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        DisabledLocalMetadataReaders: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        LocalMetadataReaderOrder: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        DisabledLyricsFetchers: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        SaveLyricsWithMedia: {
            type: 'boolean'
        },
        LyricsDownloadMaxAgeDays: {
            type: 'integer',
            format: 'int32'
        },
        LyricsFetcherOrder: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        LyricsDownloadLanguages: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        DisabledSubtitleFetchers: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        SubtitleFetcherOrder: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        SkipSubtitlesIfEmbeddedSubtitlesPresent: {
            type: 'boolean'
        },
        SkipSubtitlesIfAudioTrackMatches: {
            type: 'boolean'
        },
        SubtitleDownloadLanguages: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        SubtitleDownloadMaxAgeDays: {
            type: 'integer',
            format: 'int32'
        },
        RequirePerfectSubtitleMatch: {
            type: 'boolean'
        },
        SaveSubtitlesWithMedia: {
            type: 'boolean'
        },
        ForcedSubtitlesOnly: {
            type: 'boolean'
        },
        HearingImpairedSubtitlesOnly: {
            type: 'boolean'
        },
        TypeOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TypeOptions'
            }
        },
        CollapseSingleItemFolders: {
            type: 'boolean'
        },
        EnableAdultMetadata: {
            type: 'boolean'
        },
        ImportCollections: {
            type: 'boolean'
        },
        EnableMultiVersionByFiles: {
            type: 'boolean'
        },
        EnableMultiVersionByMetadata: {
            type: 'boolean'
        },
        EnableMultiPartItems: {
            type: 'boolean'
        },
        MinCollectionItems: {
            type: 'integer',
            format: 'int32'
        },
        MusicFolderStructure: {
            type: 'string'
        },
        MinResumePct: {
            type: 'integer',
            description: 'The minimum percentage of an item that must be played in order for playstate to be updated.',
            format: 'int32'
        },
        MaxResumePct: {
            type: 'integer',
            description: 'The maximum percentage of an item that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.',
            format: 'int32'
        },
        MinResumeDurationSeconds: {
            type: 'integer',
            description: 'The minimum duration that an item must have in order to be eligible for playstate updates..',
            format: 'int32'
        },
        ThumbnailImagesIntervalSeconds: {
            type: 'integer',
            format: 'int32'
        },
        SampleIgnoreSize: {
            type: 'integer',
            format: 'int32'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Configuration.LibraryOptions'
} as const;

export const $MediaPathInfo = {
    type: 'object',
    properties: {
        Path: {
            type: 'string'
        },
        NetworkPath: {
            type: 'string'
        },
        Username: {
            type: 'string'
        },
        Password: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Configuration.MediaPathInfo'
} as const;

export const $TypeOptions = {
    type: 'object',
    properties: {
        Type: {
            type: 'string'
        },
        MetadataFetchers: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        MetadataFetcherOrder: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ImageFetchers: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ImageFetcherOrder: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ImageOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ImageOption'
            }
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Configuration.TypeOptions'
} as const;

export const $Library_MediaFolder = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        Guid: {
            type: 'string'
        },
        SubFolders: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Library.SubFolder'
            }
        },
        IsUserAccessConfigurable: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'Emby.Api.Library.MediaFolder'
} as const;

export const $Library_SubFolder = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        Path: {
            type: 'string'
        },
        IsUserAccessConfigurable: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'Emby.Api.Library.SubFolder'
} as const;

export const $Library_AddVirtualFolder = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        CollectionType: {
            type: 'string'
        },
        RefreshLibrary: {
            type: 'boolean'
        },
        Paths: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        LibraryOptions: {
            '$ref': '#/components/schemas/LibraryOptions'
        }
    },
    'x-internal-ref-name': 'Emby.Api.Library.AddVirtualFolder'
} as const;

export const $LiveStreamRequest = {
    type: 'object',
    properties: {
        OpenToken: {
            type: 'string'
        },
        UserId: {
            type: 'string'
        },
        PlaySessionId: {
            type: 'string'
        },
        MaxStreamingBitrate: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        StartTimeTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        AudioStreamIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        SubtitleStreamIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MaxAudioChannels: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        DeviceProfile: {
            '$ref': '#/components/schemas/DeviceProfile'
        },
        EnableDirectPlay: {
            type: 'boolean'
        },
        EnableDirectStream: {
            type: 'boolean'
        },
        EnableTranscoding: {
            type: 'boolean'
        },
        AllowVideoStreamCopy: {
            type: 'boolean'
        },
        AllowInterlacedVideoStreamCopy: {
            type: 'boolean'
        },
        AllowAudioStreamCopy: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.MediaInfo.LiveStreamRequest'
} as const;

export const $DeviceProfile = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Id: {
            type: 'string'
        },
        SupportedMediaTypes: {
            type: 'string'
        },
        MaxStreamingBitrate: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        MusicStreamingTranscodingBitrate: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MaxStaticMusicBitrate: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        DeclaredFeatures: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        DirectPlayProfiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DirectPlayProfile'
            },
            description: 'The direct play profiles.'
        },
        TranscodingProfiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TranscodingProfile'
            },
            description: 'The transcoding profiles.'
        },
        ContainerProfiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ContainerProfile'
            }
        },
        CodecProfiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CodecProfile'
            }
        },
        ResponseProfiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResponseProfile'
            }
        },
        SubtitleProfiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubtitleProfile'
            }
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Dlna.DeviceProfile'
} as const;

export const $LiveStreamResponse = {
    type: 'object',
    properties: {
        MediaSource: {
            '$ref': '#/components/schemas/MediaSourceInfo'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.MediaInfo.LiveStreamResponse'
} as const;

export const $Api_SetChannelMapping = {
    type: 'object',
    properties: {
        TunerChannelId: {
            type: 'string'
        },
        ProviderChannelId: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.LiveTV.Api.SetChannelMapping'
} as const;

export const $LiveTv_ListingsProviderInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        SetupUrl: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        Type: {
            type: 'string'
        },
        Username: {
            type: 'string'
        },
        Password: {
            type: 'string'
        },
        ListingsId: {
            type: 'string'
        },
        ZipCode: {
            type: 'string'
        },
        Country: {
            type: 'string'
        },
        Path: {
            type: 'string'
        },
        EnabledTuners: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        EnableAllTuners: {
            type: 'boolean'
        },
        NewsCategories: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        SportsCategories: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        KidsCategories: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        MovieCategories: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ChannelMappings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NameValuePair'
            }
        },
        TvgShiftTicks: {
            type: 'integer',
            format: 'int64'
        },
        MoviePrefix: {
            type: 'string'
        },
        PreferredLanguage: {
            type: 'string'
        },
        UserAgent: {
            type: 'string'
        },
        DataVersion: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.LiveTv.ListingsProviderInfo'
} as const;

export const $LiveTv_TunerHostInfo = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        Url: {
            type: 'string'
        },
        Type: {
            type: 'string'
        },
        DeviceId: {
            type: 'string'
        },
        FriendlyName: {
            type: 'string'
        },
        SetupUrl: {
            type: 'string'
        },
        ImportFavoritesOnly: {
            type: 'boolean'
        },
        PreferEpgChannelImages: {
            type: 'boolean'
        },
        PreferEpgChannelNumbers: {
            type: 'boolean'
        },
        AllowHWTranscoding: {
            type: 'boolean'
        },
        AllowMappingByNumber: {
            type: 'boolean'
        },
        ImportGuideData: {
            type: 'boolean'
        },
        Source: {
            type: 'string'
        },
        TunerCount: {
            type: 'integer',
            format: 'int32'
        },
        UserAgent: {
            type: 'string'
        },
        Referrer: {
            type: 'string'
        },
        ProviderOptions: {
            type: 'string'
        },
        DataVersion: {
            type: 'integer',
            format: 'int32'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.LiveTv.TunerHostInfo'
} as const;

export const $LiveTv_LiveTvInfo = {
    type: 'object',
    properties: {
        IsEnabled: {
            type: 'boolean',
            description: 'A value indicating whether this instance is enabled.'
        },
        EnabledUsers: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'The enabled users.'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.LiveTv.LiveTvInfo'
} as const;

export const $LiveTv_ChannelType = {
    enum: ['TV', 'Radio'],
    type: 'string',
    description: `Enum ChannelType
`,
    'x-internal-ref-name': 'MediaBrowser.Model.LiveTv.ChannelType'
} as const;

export const $QueryResult_Api_EpgRow = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Api.EpgRow'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $Api_EpgRow = {
    type: 'object',
    properties: {
        Channel: {
            '$ref': '#/components/schemas/BaseItemDto'
        },
        Programs: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BaseItemDto'
            }
        }
    },
    'x-internal-ref-name': 'Emby.LiveTV.Api.EpgRow'
} as const;

export const $Api_BaseItemsRequest = {
    type: 'object',
    properties: {
        IsSpecialEpisode: {
            type: 'boolean',
            nullable: true
        },
        Is4K: {
            type: 'boolean',
            nullable: true
        },
        MinDateCreated: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        MaxDateCreated: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        EnableTotalRecordCount: {
            type: 'boolean'
        },
        MatchAnyWord: {
            type: 'boolean'
        },
        IsDuplicate: {
            type: 'boolean',
            nullable: true
        },
        Name: {
            type: 'string'
        },
        RecordingKeyword: {
            type: 'string'
        },
        RecordingKeywordType: {
            '$ref': '#/components/schemas/LiveTv.KeywordType'
        },
        RandomSeed: {
            type: 'integer',
            format: 'int32'
        },
        GenreIds: {
            type: 'string'
        },
        CollectionIds: {
            type: 'string'
        },
        TagIds: {
            type: 'string'
        },
        ExcludeTagIds: {
            type: 'string'
        },
        ItemPersonTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PersonType'
            }
        },
        ExcludeArtistIds: {
            type: 'string'
        },
        AlbumArtistIds: {
            type: 'string'
        },
        ComposerArtistIds: {
            type: 'string'
        },
        ContributingArtistIds: {
            type: 'string'
        },
        AlbumIds: {
            type: 'string'
        },
        OuterIds: {
            type: 'string'
        },
        ListItemIds: {
            type: 'string'
        },
        AudioLanguages: {
            type: 'string'
        },
        SubtitleLanguages: {
            type: 'string'
        },
        CanEditItems: {
            type: 'boolean',
            nullable: true
        },
        GroupItemsInto: {
            '$ref': '#/components/schemas/Library.ItemLinkType'
        },
        IsStandaloneSpecial: {
            type: 'boolean',
            nullable: true
        },
        MinWidth: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MinHeight: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MaxWidth: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MaxHeight: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        GroupProgramsBySeries: {
            type: 'boolean'
        },
        AirDays: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DayOfWeek'
            }
        },
        IsAiring: {
            type: 'boolean',
            nullable: true
        },
        HasAired: {
            type: 'boolean',
            nullable: true
        },
        CollectionTypes: {
            type: 'string'
        },
        ExcludeSources: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Controller.Api.BaseItemsRequest'
} as const;

export const $LiveTv_KeywordType = {
    enum: ['Name', 'EpisodeTitle', 'Overview', 'Actor', 'Director'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.LiveTv.KeywordType'
} as const;

export const $Library_ItemLinkType = {
    enum: ['Artists', 'AlbumArtists', 'Genres', 'Studios', 'Tags', 'Composers', 'Collections', 'Albums', 'CollectionFolders', 'LiveTVSeries', 'GameSystems'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Controller.Library.ItemLinkType'
} as const;

export const $LiveTv_RecordingStatus = {
    enum: ['New', 'InProgress', 'Completed', 'Cancelled', 'ConflictedOk', 'ConflictedNotOk', 'Error'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.LiveTv.RecordingStatus'
} as const;

export const $QueryResult_LiveTv_TimerInfoDto = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LiveTv.TimerInfoDto'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $LiveTv_TimerInfoDto = {
    type: 'object',
    properties: {
        Status: {
            '$ref': '#/components/schemas/LiveTv.RecordingStatus'
        },
        SeriesTimerId: {
            type: 'string',
            description: 'The series timer identifier.'
        },
        RunTimeTicks: {
            type: 'integer',
            description: 'The run time ticks.',
            format: 'int64',
            nullable: true
        },
        ProgramInfo: {
            '$ref': '#/components/schemas/BaseItemDto'
        },
        TimerType: {
            '$ref': '#/components/schemas/LiveTv.TimerType'
        },
        Id: {
            type: 'string',
            description: 'Id of the recording.'
        },
        Type: {
            type: 'string'
        },
        ServerId: {
            type: 'string',
            description: 'The server identifier.'
        },
        ChannelId: {
            type: 'string',
            description: 'ChannelId of the recording.'
        },
        ChannelName: {
            type: 'string',
            description: 'ChannelName of the recording.'
        },
        ChannelNumber: {
            type: 'string'
        },
        ChannelPrimaryImageTag: {
            type: 'string'
        },
        ProgramId: {
            type: 'string',
            description: 'The program identifier.'
        },
        Name: {
            type: 'string',
            description: 'Name of the recording.'
        },
        Overview: {
            type: 'string',
            description: 'Description of the recording.'
        },
        ParentFolderId: {
            type: 'string'
        },
        StartDate: {
            type: 'string',
            description: 'The start date of the recording, in UTC.',
            format: 'date-time'
        },
        EndDate: {
            type: 'string',
            description: 'The end date of the recording, in UTC.',
            format: 'date-time'
        },
        Priority: {
            type: 'integer',
            description: 'The priority.',
            format: 'int32'
        },
        PrePaddingSeconds: {
            type: 'integer',
            description: 'The pre padding seconds.',
            format: 'int32'
        },
        PostPaddingSeconds: {
            type: 'integer',
            description: 'The post padding seconds.',
            format: 'int32'
        },
        IsPrePaddingRequired: {
            type: 'boolean',
            description: 'A value indicating whether this instance is pre padding required.'
        },
        ParentBackdropItemId: {
            type: 'string',
            description: 'If the item does not have any backdrops, this will hold the Id of the Parent that has one.'
        },
        ParentBackdropImageTags: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'The parent backdrop image tags.'
        },
        IsPostPaddingRequired: {
            type: 'boolean',
            description: 'A value indicating whether this instance is post padding required.'
        },
        KeepUntil: {
            '$ref': '#/components/schemas/LiveTv.KeepUntil'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.LiveTv.TimerInfoDto'
} as const;

export const $LiveTv_KeepUntil = {
    enum: ['UntilDeleted', 'UntilSpaceNeeded', 'UntilWatched', 'UntilDate'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.LiveTv.KeepUntil'
} as const;

export const $QueryResult_LiveTv_SeriesTimerInfoDto = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LiveTv.SeriesTimerInfoDto'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $LiveTv_SeriesTimerInfoDto = {
    type: 'object',
    properties: {
        RecordAnyTime: {
            type: 'boolean',
            description: 'A value indicating whether \\[record any time\\].'
        },
        SkipEpisodesInLibrary: {
            type: 'boolean'
        },
        MatchExistingItemsWithAnyLibrary: {
            type: 'boolean'
        },
        RecordAnyChannel: {
            type: 'boolean',
            description: 'A value indicating whether \\[record any channel\\].'
        },
        KeepUpTo: {
            type: 'integer',
            format: 'int32'
        },
        MaxRecordingSeconds: {
            type: 'integer',
            format: 'int32'
        },
        RecordNewOnly: {
            type: 'boolean',
            description: 'A value indicating whether \\[record new only\\].'
        },
        ChannelIds: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        Days: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DayOfWeek'
            },
            description: 'The days.'
        },
        ImageTags: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'The image tags.'
        },
        ParentThumbItemId: {
            type: 'string',
            description: 'The parent thumb item id.'
        },
        ParentThumbImageTag: {
            type: 'string',
            description: 'The parent thumb image tag.'
        },
        ParentPrimaryImageItemId: {
            type: 'string',
            description: 'The parent primary image item identifier.'
        },
        ParentPrimaryImageTag: {
            type: 'string',
            description: 'The parent primary image tag.'
        },
        SeriesId: {
            type: 'string'
        },
        Keywords: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LiveTv.KeywordInfo'
            }
        },
        TimerType: {
            '$ref': '#/components/schemas/LiveTv.TimerType'
        },
        Id: {
            type: 'string',
            description: 'Id of the recording.'
        },
        Type: {
            type: 'string'
        },
        ServerId: {
            type: 'string',
            description: 'The server identifier.'
        },
        ChannelId: {
            type: 'string',
            description: 'ChannelId of the recording.'
        },
        ChannelName: {
            type: 'string',
            description: 'ChannelName of the recording.'
        },
        ChannelNumber: {
            type: 'string'
        },
        ChannelPrimaryImageTag: {
            type: 'string'
        },
        ProgramId: {
            type: 'string',
            description: 'The program identifier.'
        },
        Name: {
            type: 'string',
            description: 'Name of the recording.'
        },
        Overview: {
            type: 'string',
            description: 'Description of the recording.'
        },
        ParentFolderId: {
            type: 'string'
        },
        StartDate: {
            type: 'string',
            description: 'The start date of the recording, in UTC.',
            format: 'date-time'
        },
        EndDate: {
            type: 'string',
            description: 'The end date of the recording, in UTC.',
            format: 'date-time'
        },
        Priority: {
            type: 'integer',
            description: 'The priority.',
            format: 'int32'
        },
        PrePaddingSeconds: {
            type: 'integer',
            description: 'The pre padding seconds.',
            format: 'int32'
        },
        PostPaddingSeconds: {
            type: 'integer',
            description: 'The post padding seconds.',
            format: 'int32'
        },
        IsPrePaddingRequired: {
            type: 'boolean',
            description: 'A value indicating whether this instance is pre padding required.'
        },
        ParentBackdropItemId: {
            type: 'string',
            description: 'If the item does not have any backdrops, this will hold the Id of the Parent that has one.'
        },
        ParentBackdropImageTags: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'The parent backdrop image tags.'
        },
        IsPostPaddingRequired: {
            type: 'boolean',
            description: 'A value indicating whether this instance is post padding required.'
        },
        KeepUntil: {
            '$ref': '#/components/schemas/LiveTv.KeepUntil'
        }
    },
    description: `Class SeriesTimerInfoDto.
`,
    'x-internal-ref-name': 'MediaBrowser.Model.LiveTv.SeriesTimerInfoDto'
} as const;

export const $LiveTv_KeywordInfo = {
    type: 'object',
    properties: {
        KeywordType: {
            '$ref': '#/components/schemas/LiveTv.KeywordType'
        },
        Keyword: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.LiveTv.KeywordInfo'
} as const;

export const $LiveTv_SeriesTimerInfo = {
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'Id of the recording.'
        },
        ChannelId: {
            type: 'string',
            description: 'ChannelId of the recording.'
        },
        ChannelIds: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ParentFolderId: {
            type: 'integer',
            format: 'int64'
        },
        ProgramId: {
            type: 'string',
            description: 'The program identifier.'
        },
        Name: {
            type: 'string',
            description: 'Name of the recording.'
        },
        ServiceName: {
            type: 'string'
        },
        Overview: {
            type: 'string',
            description: 'Description of the recording.'
        },
        StartDate: {
            type: 'string',
            description: 'The start date of the recording, in UTC.',
            format: 'date-time'
        },
        EndDate: {
            type: 'string',
            description: 'The end date of the recording, in UTC.',
            format: 'date-time'
        },
        RecordAnyTime: {
            type: 'boolean',
            description: 'A value indicating whether \\[record any time\\].'
        },
        KeepUpTo: {
            type: 'integer',
            format: 'int32'
        },
        KeepUntil: {
            '$ref': '#/components/schemas/LiveTv.KeepUntil'
        },
        SkipEpisodesInLibrary: {
            type: 'boolean'
        },
        MatchExistingItemsWithAnyLibrary: {
            type: 'boolean'
        },
        RecordNewOnly: {
            type: 'boolean',
            description: 'A value indicating whether \\[record new only\\].'
        },
        Days: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DayOfWeek'
            },
            description: 'The days.'
        },
        Priority: {
            type: 'integer',
            description: 'The priority.',
            format: 'int32'
        },
        PrePaddingSeconds: {
            type: 'integer',
            description: 'The pre padding seconds.',
            format: 'int32'
        },
        PostPaddingSeconds: {
            type: 'integer',
            description: 'The post padding seconds.',
            format: 'int32'
        },
        IsPrePaddingRequired: {
            type: 'boolean',
            description: 'A value indicating whether this instance is pre padding required.'
        },
        IsPostPaddingRequired: {
            type: 'boolean',
            description: 'A value indicating whether this instance is post padding required.'
        },
        SeriesId: {
            type: 'string',
            description: 'The series identifier.'
        },
        ProviderIds: {
            '$ref': '#/components/schemas/ProviderIdDictionary'
        },
        MaxRecordingSeconds: {
            type: 'integer',
            format: 'int32'
        },
        Keywords: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LiveTv.KeywordInfo'
            }
        },
        TimerType: {
            '$ref': '#/components/schemas/LiveTv.TimerType'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Controller.LiveTv.SeriesTimerInfo'
} as const;

export const $LiveTv_GuideInfo = {
    type: 'object',
    properties: {
        StartDate: {
            type: 'string',
            description: 'The start date.',
            format: 'date-time'
        },
        EndDate: {
            type: 'string',
            description: 'The end date.',
            format: 'date-time'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.LiveTv.GuideInfo'
} as const;

export const $Api_AvailableRecordingOptions = {
    type: 'object',
    properties: {
        RecordingFolders: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Api.NameIdDescriptionPair'
            }
        },
        MovieRecordingFolders: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Api.NameIdDescriptionPair'
            }
        },
        SeriesRecordingFolders: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Api.NameIdDescriptionPair'
            }
        }
    },
    'x-internal-ref-name': 'Emby.LiveTV.Api.AvailableRecordingOptions'
} as const;

export const $Api_NameIdDescriptionPair = {
    type: 'object',
    properties: {
        ShortOverview: {
            type: 'string'
        },
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Id: {
            type: 'string',
            description: 'The identifier.'
        }
    },
    'x-internal-ref-name': 'Emby.LiveTV.Api.NameIdDescriptionPair'
} as const;

export const $ParentalRating = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Value: {
            type: 'integer',
            description: 'The value.',
            format: 'int32'
        }
    },
    description: `Class ParentalRating
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Entities.ParentalRating'
} as const;

export const $Globalization_LocalizatonOption = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Value: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Globalization.LocalizatonOption'
} as const;

export const $Globalization_CountryInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name.'
        },
        DisplayName: {
            type: 'string',
            description: 'The display name.'
        },
        EnglishName: {
            type: 'string',
            description: 'The English name.'
        },
        TwoLetterISORegionName: {
            type: 'string',
            description: 'The name of the two letter ISO region.'
        },
        ThreeLetterISORegionName: {
            type: 'string',
            description: 'The name of the three letter ISO region.'
        }
    },
    description: `Class CountryInfo
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Globalization.CountryInfo'
} as const;

export const $Globalization_CultureDto = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name.'
        },
        DisplayName: {
            type: 'string',
            description: 'The display name.'
        },
        TwoLetterISOLanguageName: {
            type: 'string',
            description: 'The name of the two letter ISO language.'
        },
        ThreeLetterISOLanguageName: {
            type: 'string',
            description: 'The name of the three letter ISO language.'
        },
        ThreeLetterISOLanguageNames: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        TwoLetterISOLanguageNames: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    description: `Class CultureDto
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Globalization.CultureDto'
} as const;

export const $RecommendationDto = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BaseItemDto'
            }
        },
        RecommendationType: {
            '$ref': '#/components/schemas/RecommendationType'
        },
        BaselineItemName: {
            type: 'string'
        },
        CategoryId: {
            type: 'integer',
            format: 'int64'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Dto.RecommendationDto'
} as const;

export const $RecommendationType = {
    enum: ['SimilarToRecentlyPlayed', 'SimilarToLikedItem', 'HasDirectorFromRecentlyPlayed', 'HasActorFromRecentlyPlayed', 'HasLikedDirector', 'HasLikedActor'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Dto.RecommendationType'
} as const;

export const $NotificationCategoryInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        Events: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NotificationTypeInfo'
            }
        }
    },
    'x-internal-ref-name': 'Emby.Notifications.NotificationCategoryInfo'
} as const;

export const $NotificationTypeInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        CategoryName: {
            type: 'string'
        },
        CategoryId: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.Notifications.NotificationTypeInfo'
} as const;

export const $Api_AddAdminNotification = {
    type: 'object',
    properties: {
        DisplayDateTime: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'Emby.Notifications.Api.AddAdminNotification'
} as const;

export const $PlaybackStartInfo = {
    type: 'object',
    properties: {
        CanSeek: {
            type: 'boolean',
            description: 'A value indicating whether this instance can seek.'
        },
        NowPlayingQueue: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/QueueItem'
            }
        },
        PlaylistItemId: {
            type: 'string'
        },
        SessionId: {
            type: 'string',
            description: 'The session id.'
        },
        AudioStreamIndex: {
            type: 'integer',
            description: 'The index of the audio stream.',
            format: 'int32',
            nullable: true
        },
        SubtitleStreamIndex: {
            type: 'integer',
            description: 'The index of the subtitle stream.',
            format: 'int32',
            nullable: true
        },
        IsPaused: {
            type: 'boolean',
            description: 'A value indicating whether this instance is paused.'
        },
        PlaylistIndex: {
            type: 'integer',
            format: 'int32'
        },
        PlaylistLength: {
            type: 'integer',
            format: 'int32'
        },
        IsMuted: {
            type: 'boolean',
            description: 'A value indicating whether this instance is muted.'
        },
        RunTimeTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        PlaybackStartTimeTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        VolumeLevel: {
            type: 'integer',
            description: 'The volume level.',
            format: 'int32',
            nullable: true
        },
        Brightness: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        AspectRatio: {
            type: 'string'
        },
        EventName: {
            '$ref': '#/components/schemas/ProgressEvent'
        },
        PlayMethod: {
            '$ref': '#/components/schemas/PlayMethod'
        },
        RepeatMode: {
            '$ref': '#/components/schemas/RepeatMode'
        },
        SleepTimerMode: {
            '$ref': '#/components/schemas/SleepTimerMode'
        },
        SleepTimerEndTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        Shuffle: {
            type: 'boolean'
        },
        SubtitleOffset: {
            type: 'integer',
            format: 'int32'
        },
        PlaybackRate: {
            type: 'number',
            format: 'double'
        },
        PlaylistItemIds: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        PlaySessionId: {
            type: 'string',
            description: 'The play session identifier.'
        },
        ItemId: {
            type: 'string',
            description: 'The item identifier.'
        },
        LiveStreamId: {
            type: 'string',
            description: 'The live stream identifier.'
        },
        MediaSourceId: {
            type: 'string',
            description: 'The media version identifier.'
        },
        Item: {
            '$ref': '#/components/schemas/BaseItemDto'
        },
        PositionTicks: {
            type: 'integer',
            description: 'The position ticks.',
            format: 'int64',
            nullable: true
        }
    },
    description: `Class PlaybackStartInfo.
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Session.PlaybackStartInfo'
} as const;

export const $QueueItem = {
    type: 'object',
    properties: {
        Id: {
            type: 'integer',
            format: 'int64'
        },
        PlaylistItemId: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Session.QueueItem'
} as const;

export const $ProgressEvent = {
    enum: ['TimeUpdate', 'Pause', 'Unpause', 'VolumeChange', 'RepeatModeChange', 'AudioTrackChange', 'SubtitleTrackChange', 'PlaylistItemMove', 'PlaylistItemRemove', 'PlaylistItemAdd', 'QualityChange', 'StateChange', 'SubtitleOffsetChange', 'PlaybackRateChange', 'ShuffleChange', 'SleepTimerChange'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Session.ProgressEvent'
} as const;

export const $SyncTarget = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Id: {
            type: 'string',
            description: 'The identifier.'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Sync.SyncTarget'
} as const;

export const $QueryResult_SyncJob = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SyncJob'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $SyncJob = {
    type: 'object',
    properties: {
        Id: {
            type: 'integer',
            description: 'The identifier.',
            format: 'int64'
        },
        TargetId: {
            type: 'string',
            description: 'The device identifier.'
        },
        InternalTargetId: {
            type: 'integer',
            format: 'int64'
        },
        TargetName: {
            type: 'string',
            description: 'The name of the target.'
        },
        Quality: {
            type: 'string',
            description: 'The quality.'
        },
        Bitrate: {
            type: 'integer',
            description: 'The bitrate.',
            format: 'int32',
            nullable: true
        },
        Container: {
            type: 'string'
        },
        VideoCodec: {
            type: 'string'
        },
        AudioCodec: {
            type: 'string'
        },
        Profile: {
            type: 'string',
            description: 'The profile.'
        },
        Category: {
            '$ref': '#/components/schemas/SyncCategory'
        },
        ParentId: {
            type: 'integer',
            description: 'The parent identifier.',
            format: 'int64'
        },
        Progress: {
            type: 'number',
            description: 'The current progress.',
            format: 'double'
        },
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Status: {
            '$ref': '#/components/schemas/SyncJobStatus'
        },
        UserId: {
            type: 'integer',
            description: 'The user identifier.',
            format: 'int64'
        },
        UnwatchedOnly: {
            type: 'boolean',
            description: 'A value indicating whether \\[unwatched only\\].'
        },
        SyncNewContent: {
            type: 'boolean',
            description: 'A value indicating whether \\[synchronize new content\\].'
        },
        ItemLimit: {
            type: 'integer',
            description: 'The item limit.',
            format: 'int32',
            nullable: true
        },
        RequestedItemIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            },
            description: 'The requested item ids.'
        },
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        DateCreated: {
            type: 'string',
            description: 'The date created.',
            format: 'date-time'
        },
        DateLastModified: {
            type: 'string',
            description: 'The date last modified.',
            format: 'date-time'
        },
        ItemCount: {
            type: 'integer',
            description: 'The item count.',
            format: 'int32'
        },
        ParentName: {
            type: 'string'
        },
        PrimaryImageItemId: {
            type: 'string'
        },
        PrimaryImageTag: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Sync.SyncJob'
} as const;

export const $SyncCategory = {
    enum: ['Latest', 'NextUp', 'Resume'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Sync.SyncCategory'
} as const;

export const $SyncJobStatus = {
    enum: ['Queued', 'Converting', 'ReadyToTransfer', 'Transferring', 'Completed', 'CompletedWithError', 'Failed'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Sync.SyncJobStatus'
} as const;

export const $QueryResult_SyncJobItem = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SyncJobItem'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $SyncJobItem = {
    type: 'object',
    properties: {
        Id: {
            type: 'integer',
            format: 'int64'
        },
        JobId: {
            type: 'integer',
            format: 'int64'
        },
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        ItemName: {
            type: 'string'
        },
        MediaSourceId: {
            type: 'string'
        },
        MediaSource: {
            '$ref': '#/components/schemas/MediaSourceInfo'
        },
        TargetId: {
            type: 'string'
        },
        InternalTargetId: {
            type: 'integer',
            format: 'int64'
        },
        OutputPath: {
            type: 'string'
        },
        Status: {
            '$ref': '#/components/schemas/SyncJobItemStatus'
        },
        Progress: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        DateCreated: {
            type: 'string',
            format: 'date-time'
        },
        PrimaryImageItemId: {
            type: 'string'
        },
        PrimaryImageTag: {
            type: 'string'
        },
        TemporaryPath: {
            type: 'string'
        },
        AdditionalFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ItemFileInfo'
            }
        }
    },
    'x-internal-ref-name': 'Emby.Server.Sync.Model.SyncJobItem'
} as const;

export const $ItemFileInfo = {
    type: 'object',
    properties: {
        Type: {
            '$ref': '#/components/schemas/ItemFileType'
        },
        Name: {
            type: 'string'
        },
        Path: {
            type: 'string'
        },
        ImageType: {
            '$ref': '#/components/schemas/ImageType'
        },
        Index: {
            type: 'integer',
            format: 'int32'
        }
    },
    'x-internal-ref-name': 'Emby.Server.Sync.Model.ItemFileInfo'
} as const;

export const $ItemFileType = {
    enum: ['Media', 'Image', 'Subtitles'],
    type: 'string',
    'x-internal-ref-name': 'Emby.Server.Sync.Model.ItemFileType'
} as const;

export const $SyncJobRequest = {
    type: 'object',
    properties: {
        TargetId: {
            type: 'string'
        },
        ItemIds: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        Category: {
            '$ref': '#/components/schemas/SyncCategory'
        },
        ParentId: {
            type: 'string'
        },
        Quality: {
            type: 'string'
        },
        Profile: {
            type: 'string'
        },
        Container: {
            type: 'string'
        },
        VideoCodec: {
            type: 'string'
        },
        AudioCodec: {
            type: 'string'
        },
        Name: {
            type: 'string'
        },
        UserId: {
            type: 'string'
        },
        UnwatchedOnly: {
            type: 'boolean'
        },
        SyncNewContent: {
            type: 'boolean'
        },
        ItemLimit: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        Bitrate: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        Downloaded: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'Emby.Server.Sync.Model.SyncJobRequest'
} as const;

export const $SyncJobCreationResult = {
    type: 'object',
    properties: {
        Job: {
            '$ref': '#/components/schemas/SyncJob'
        },
        JobItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SyncJobItem'
            }
        }
    },
    'x-internal-ref-name': 'Emby.Server.Sync.Model.SyncJobCreationResult'
} as const;

export const $SyncDialogOptions = {
    type: 'object',
    properties: {
        Targets: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SyncTarget'
            }
        },
        Options: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SyncJobOption'
            }
        },
        QualityOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SyncQualityOption'
            }
        },
        ProfileOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SyncProfileOption'
            }
        }
    },
    'x-internal-ref-name': 'Emby.Server.Sync.Model.SyncDialogOptions'
} as const;

export const $SyncJobOption = {
    enum: ['Name', 'Quality', 'UnwatchedOnly', 'SyncNewContent', 'ItemLimit', 'Profile'],
    type: 'string',
    'x-internal-ref-name': 'Emby.Server.Sync.Model.SyncJobOption'
} as const;

export const $SyncQualityOption = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Description: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        IsDefault: {
            type: 'boolean'
        },
        IsOriginalQuality: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'Emby.Server.Sync.Model.SyncQualityOption'
} as const;

export const $SyncProfileOption = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Description: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        IsDefault: {
            type: 'boolean'
        },
        EnableQualityOptions: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'Emby.Server.Sync.Model.SyncProfileOption'
} as const;

export const $UserAction = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        ServerId: {
            type: 'string'
        },
        UserId: {
            type: 'string'
        },
        ItemId: {
            type: 'string'
        },
        Type: {
            '$ref': '#/components/schemas/UserActionType'
        },
        Date: {
            type: 'string',
            format: 'date-time'
        },
        PositionTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        Played: {
            type: 'boolean',
            nullable: true
        },
        IsFavorite: {
            type: 'boolean',
            nullable: true
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Users.UserAction'
} as const;

export const $UserActionType = {
    enum: ['PlayedItem', 'MarkPlayed', 'MarkFavorite'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Users.UserActionType'
} as const;

export const $SyncDataRequest = {
    type: 'object',
    properties: {
        LocalItemIds: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        InternalTargetIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        }
    },
    'x-internal-ref-name': 'Emby.Server.Sync.Model.SyncDataRequest'
} as const;

export const $SyncDataResponse = {
    type: 'object',
    properties: {
        ItemIdsToRemove: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    'x-internal-ref-name': 'Emby.Server.Sync.Model.SyncDataResponse'
} as const;

export const $ServerConfiguration = {
    type: 'object',
    properties: {
        EnableUPnP: {
            type: 'boolean',
            description: 'A value indicating whether \\[enable u pn p\\].'
        },
        PublicPort: {
            type: 'integer',
            description: 'The public mapped port.',
            format: 'int32'
        },
        PublicHttpsPort: {
            type: 'integer',
            description: 'The public HTTPS port.',
            format: 'int32'
        },
        HttpServerPortNumber: {
            type: 'integer',
            description: 'The HTTP server port number.',
            format: 'int32'
        },
        HttpsPortNumber: {
            type: 'integer',
            description: 'The HTTPS server port number.',
            format: 'int32'
        },
        EnableHttps: {
            type: 'boolean',
            description: 'A value indicating whether \\[use HTTPS\\].'
        },
        CertificatePath: {
            type: 'string',
            description: 'The value pointing to the file system where the ssl certiifcate is located..'
        },
        CertificatePassword: {
            type: 'string'
        },
        IsPortAuthorized: {
            type: 'boolean',
            description: 'A value indicating whether this instance is port authorized.'
        },
        AutoRunWebApp: {
            type: 'boolean'
        },
        EnableRemoteAccess: {
            type: 'boolean'
        },
        LogAllQueryTimes: {
            type: 'boolean'
        },
        DisableOutgoingIPv6: {
            type: 'boolean'
        },
        EnableCaseSensitiveItemIds: {
            type: 'boolean',
            description: 'A value indicating whether \\[enable case sensitive item ids\\].'
        },
        MetadataPath: {
            type: 'string',
            description: 'The metadata path.'
        },
        MetadataNetworkPath: {
            type: 'string'
        },
        PreferredMetadataLanguage: {
            type: 'string',
            description: 'The preferred metadata language.'
        },
        MetadataCountryCode: {
            type: 'string',
            description: 'The metadata country code.'
        },
        SortRemoveWords: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Words to be removed from strings to create a sort name'
        },
        LibraryMonitorDelaySeconds: {
            type: 'integer',
            description: 'The delay in seconds that we will wait after a file system change to try and discover what has been added\\/removed Some delay is necessary with some items because their creation is not atomic.  It involves the creation of several different directories and files.',
            format: 'int32'
        },
        EnableDashboardResponseCaching: {
            type: 'boolean',
            description: 'A value indicating whether \\[enable dashboard response caching\\]. Allows potential contributors without visual studio to modify production dashboard code and test changes.'
        },
        DashboardSourcePath: {
            type: 'string',
            description: 'Allows the dashboard to be served from a custom path.'
        },
        ImageSavingConvention: {
            '$ref': '#/components/schemas/ImageSavingConvention'
        },
        EnableAutomaticRestart: {
            type: 'boolean'
        },
        ServerName: {
            type: 'string'
        },
        PreferredDetectedRemoteAddressFamily: {
            '$ref': '#/components/schemas/Net.Sockets.AddressFamily'
        },
        WanDdns: {
            type: 'string'
        },
        UICulture: {
            type: 'string'
        },
        RemoteClientBitrateLimit: {
            type: 'integer',
            format: 'int32'
        },
        LocalNetworkSubnets: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        LocalNetworkAddresses: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        EnableExternalContentInSuggestions: {
            type: 'boolean'
        },
        RequireHttps: {
            type: 'boolean'
        },
        IsBehindProxy: {
            type: 'boolean'
        },
        RemoteIPFilter: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        IsRemoteIPFilterBlacklist: {
            type: 'boolean'
        },
        ImageExtractionTimeoutMs: {
            type: 'integer',
            format: 'int32'
        },
        PathSubstitutions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PathSubstitution'
            }
        },
        UninstalledPlugins: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        CollapseVideoFolders: {
            type: 'boolean'
        },
        EnableOriginalTrackTitles: {
            type: 'boolean'
        },
        VacuumDatabaseOnStartup: {
            type: 'boolean'
        },
        SimultaneousStreamLimit: {
            type: 'integer',
            format: 'int32'
        },
        DatabaseCacheSizeMB: {
            type: 'integer',
            format: 'int32'
        },
        EnableSqLiteMmio: {
            type: 'boolean'
        },
        PlaylistsUpgradedToM3U: {
            type: 'boolean'
        },
        ImageExtractorUpgraded1: {
            type: 'boolean'
        },
        EnablePeopleLetterSubFolders: {
            type: 'boolean'
        },
        OptimizeDatabaseOnShutdown: {
            type: 'boolean'
        },
        DatabaseAnalysisLimit: {
            type: 'integer',
            format: 'int32'
        },
        MaxLibraryDbConnections: {
            type: 'integer',
            format: 'int32'
        },
        MaxAuthDbConnections: {
            type: 'integer',
            format: 'int32'
        },
        MaxOtherDbConnections: {
            type: 'integer',
            format: 'int32'
        },
        DisableAsyncIO: {
            type: 'boolean'
        },
        MigratedToUserItemShares8: {
            type: 'boolean'
        },
        MigratedLibraryOptionsToDb: {
            type: 'boolean'
        },
        AllowLegacyLocalNetworkPassword: {
            type: 'boolean'
        },
        EnableSavedMetadataForPeople: {
            type: 'boolean'
        },
        TvChannelsRefreshed: {
            type: 'boolean'
        },
        ProxyHeaderMode: {
            '$ref': '#/components/schemas/ProxyHeaderMode'
        },
        IsInMaintenanceMode: {
            type: 'boolean'
        },
        MaintenanceModeMessage: {
            type: 'string'
        },
        EnableDebugLevelLogging: {
            type: 'boolean',
            description: 'A value indicating whether \\[enable debug level logging\\].'
        },
        RevertDebugLogging: {
            type: 'string'
        },
        EnableAutoUpdate: {
            type: 'boolean',
            description: 'Enable automatically and silently updating of the application'
        },
        LogFileRetentionDays: {
            type: 'integer',
            description: 'The number of days we should retain log files',
            format: 'int32'
        },
        RunAtStartup: {
            type: 'boolean',
            description: 'A value indicating whether \\[run at startup\\].'
        },
        IsStartupWizardCompleted: {
            type: 'boolean',
            description: 'A value indicating whether this instance is first run.'
        },
        CachePath: {
            type: 'string',
            description: 'The cache path.'
        }
    },
    description: `Represents the server configuration.
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Configuration.ServerConfiguration'
} as const;

export const $ImageSavingConvention = {
    enum: ['Legacy', 'Compatible'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Configuration.ImageSavingConvention'
} as const;

export const $Net_Sockets_AddressFamily = {
    enum: ['Unspecified', 'Unix', 'InterNetwork', 'ImpLink', 'Pup', 'Chaos', 'NS', 'Ipx', 'Iso', 'Osi', 'Ecma', 'DataKit', 'Ccitt', 'Sna', 'DecNet', 'DataLink', 'Lat', 'HyperChannel', 'AppleTalk', 'NetBios', 'VoiceView', 'FireFox', 'Banyan', 'Atm', 'InterNetworkV6', 'Cluster', 'Ieee12844', 'Irda', 'NetworkDesigners', 'Max', 'Packet', 'ControllerAreaNetwork', 'Unknown'],
    type: 'string',
    'x-internal-ref-name': 'System.Net.Sockets.AddressFamily'
} as const;

export const $PathSubstitution = {
    type: 'object',
    properties: {
        From: {
            type: 'string'
        },
        To: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Configuration.PathSubstitution'
} as const;

export const $ProxyHeaderMode = {
    enum: ['None', 'LanAddressesOnly', 'RemoteAddressesOnly', 'AllAddresses'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Configuration.ProxyHeaderMode'
} as const;

export const $WakeOnLanInfo = {
    type: 'object',
    properties: {
        MacAddress: {
            type: 'string'
        },
        BroadcastAddress: {
            type: 'string'
        },
        Port: {
            type: 'integer',
            format: 'int32'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.System.WakeOnLanInfo'
} as const;

export const $SystemInfo = {
    type: 'object',
    properties: {
        SystemUpdateLevel: {
            '$ref': '#/components/schemas/PackageVersionClass'
        },
        OperatingSystemDisplayName: {
            type: 'string',
            description: 'The display name of the operating system.'
        },
        PackageName: {
            type: 'string'
        },
        HasPendingRestart: {
            type: 'boolean',
            description: 'A value indicating whether this instance has pending restart.'
        },
        IsShuttingDown: {
            type: 'boolean'
        },
        HasImageEnhancers: {
            type: 'boolean'
        },
        OperatingSystem: {
            type: 'string',
            description: 'The operating sytem.'
        },
        SupportsLibraryMonitor: {
            type: 'boolean',
            description: 'A value indicating whether \\[supports library monitor\\].'
        },
        SupportsLocalPortConfiguration: {
            type: 'boolean'
        },
        SupportsWakeServer: {
            type: 'boolean'
        },
        WebSocketPortNumber: {
            type: 'integer',
            description: 'The web socket port number.',
            format: 'int32'
        },
        CompletedInstallations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InstallationInfo'
            },
            description: 'The completed installations.'
        },
        CanSelfRestart: {
            type: 'boolean',
            description: 'A value indicating whether this instance can self restart.'
        },
        CanSelfUpdate: {
            type: 'boolean',
            description: 'A value indicating whether this instance can self update.'
        },
        CanLaunchWebBrowser: {
            type: 'boolean'
        },
        ProgramDataPath: {
            type: 'string',
            description: 'The program data path.'
        },
        ItemsByNamePath: {
            type: 'string',
            description: 'The items by name path.'
        },
        CachePath: {
            type: 'string',
            description: 'The cache path.'
        },
        LogPath: {
            type: 'string',
            description: 'The log path.'
        },
        InternalMetadataPath: {
            type: 'string',
            description: 'The internal metadata path.'
        },
        TranscodingTempPath: {
            type: 'string',
            description: 'The transcoding temporary path.'
        },
        HttpServerPortNumber: {
            type: 'integer',
            description: 'The HTTP server port number.',
            format: 'int32'
        },
        SupportsHttps: {
            type: 'boolean',
            description: 'A value indicating whether \\[enable HTTPS\\].'
        },
        HttpsPortNumber: {
            type: 'integer',
            description: 'The HTTPS server port number.',
            format: 'int32'
        },
        HasUpdateAvailable: {
            type: 'boolean',
            description: 'A value indicating whether this instance has update available.'
        },
        SupportsAutoRunAtStartup: {
            type: 'boolean',
            description: 'A value indicating whether \\[supports automatic run at startup\\].'
        },
        HardwareAccelerationRequiresPremiere: {
            type: 'boolean'
        },
        WakeOnLanInfo: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WakeOnLanInfo'
            }
        },
        IsInMaintenanceMode: {
            type: 'boolean'
        },
        LocalAddress: {
            type: 'string',
            description: 'The local address.'
        },
        LocalAddresses: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        WanAddress: {
            type: 'string',
            description: 'The wan address.'
        },
        RemoteAddresses: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ServerName: {
            type: 'string',
            description: 'The name of the server.'
        },
        Version: {
            type: 'string',
            description: 'The version.'
        },
        Id: {
            type: 'string',
            description: 'The id.'
        }
    },
    description: `Class SystemInfo
`,
    'x-internal-ref-name': 'MediaBrowser.Model.System.SystemInfo'
} as const;

export const $InstallationInfo = {
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            description: 'The id.',
            format: 'guid'
        },
        Name: {
            type: 'string',
            description: 'The name.'
        },
        AssemblyGuid: {
            type: 'string',
            description: 'The assembly guid.'
        },
        Version: {
            type: 'string',
            description: 'The version.'
        },
        UpdateClass: {
            '$ref': '#/components/schemas/PackageVersionClass'
        },
        PercentComplete: {
            type: 'number',
            description: 'The percent complete.',
            format: 'double',
            nullable: true
        }
    },
    description: `Class InstallationInfo
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Updates.InstallationInfo'
} as const;

export const $Net_EndPointInfo = {
    type: 'object',
    properties: {
        IsLocal: {
            type: 'boolean'
        },
        IsInNetwork: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Net.EndPointInfo'
} as const;

export const $UIViewInfo = {
    type: 'object',
    properties: {
        ViewId: {
            type: 'string'
        },
        PageId: {
            type: 'string'
        },
        Caption: {
            type: 'string'
        },
        SubCaption: {
            type: 'string'
        },
        PluginId: {
            type: 'string'
        },
        ViewType: {
            '$ref': '#/components/schemas/Enums.UIViewType'
        },
        ShowDialogFullScreen: {
            type: 'boolean'
        },
        IsInSequence: {
            type: 'boolean'
        },
        RedirectViewUrl: {
            type: 'string'
        },
        EditObjectContainer: {
            '$ref': '#/components/schemas/GenericEdit.IEditObjectContainer'
        },
        Commands: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UICommand'
            }
        },
        TabPageInfos: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UITabPageInfo'
            }
        },
        IsPageChangeInfo: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'Emby.Web.GenericUI.Model.UIViewInfo'
} as const;

export const $Enums_UIViewType = {
    enum: ['RegularPage', 'Dialog', 'Wizard'],
    type: 'string',
    'x-internal-ref-name': 'Emby.Web.GenericUI.Model.Enums.UIViewType'
} as const;

export const $GenericEdit_IEditObjectContainer = {
    type: 'object',
    properties: {
        Object: {
            type: 'object'
        },
        DefaultObject: {
            type: 'object'
        },
        TypeName: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.GenericEdit.IEditObjectContainer'
} as const;

export const $UICommand = {
    type: 'object',
    properties: {
        CommandType: {
            '$ref': '#/components/schemas/Enums.UICommandType'
        },
        CommandId: {
            type: 'string'
        },
        IsVisible: {
            type: 'boolean'
        },
        IsEnabled: {
            type: 'boolean'
        },
        Caption: {
            type: 'string'
        },
        SetFocus: {
            type: 'boolean'
        },
        ConfirmationPrompt: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.Web.GenericUI.Model.UICommand'
} as const;

export const $Enums_UICommandType = {
    enum: ['Custom', 'WizardCancel', 'WizardBack', 'WizardNext', 'WizardFinish', 'DialogCancel', 'DialogOk', 'PageSave', 'PageBack', 'WizardButton1', 'WizardButton2', 'WizardButton3'],
    type: 'string',
    'x-internal-ref-name': 'Emby.Web.GenericUI.Model.Enums.UICommandType'
} as const;

export const $UITabPageInfo = {
    type: 'object',
    properties: {
        PageId: {
            type: 'string'
        },
        DisplayName: {
            type: 'string'
        },
        PluginId: {
            type: 'string'
        },
        Href: {
            type: 'string'
        },
        NavKey: {
            type: 'string'
        },
        Index: {
            type: 'integer',
            format: 'int32'
        }
    },
    'x-internal-ref-name': 'Emby.Web.GenericUI.Model.UITabPageInfo'
} as const;

export const $RunUICommand = {
    type: 'object',
    properties: {
        PageId: {
            type: 'string'
        },
        CommandId: {
            type: 'string'
        },
        Data: {
            type: 'string'
        },
        ItemId: {
            type: 'string'
        },
        ClientLocale: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.Web.GenericUI.Api.Endpoints.RunUICommand'
} as const;

export const $UserDto = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name.'
        },
        ServerId: {
            type: 'string',
            description: 'The server identifier.'
        },
        ServerName: {
            type: 'string',
            description: 'The name of the server. This is not used by the server and is for client\\-side usage only.'
        },
        Prefix: {
            type: 'string'
        },
        ConnectUserName: {
            type: 'string',
            description: 'The name of the connect user.'
        },
        DateCreated: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        ConnectLinkType: {
            '$ref': '#/components/schemas/Connect.UserLinkType'
        },
        Id: {
            type: 'string',
            description: 'The id.'
        },
        PrimaryImageTag: {
            type: 'string',
            description: 'The primary image tag.'
        },
        HasPassword: {
            type: 'boolean',
            description: 'A value indicating whether this instance has password.'
        },
        HasConfiguredPassword: {
            type: 'boolean',
            description: 'A value indicating whether this instance has configured password.'
        },
        EnableAutoLogin: {
            type: 'boolean',
            nullable: true
        },
        LastLoginDate: {
            type: 'string',
            description: 'The last login date.',
            format: 'date-time',
            nullable: true
        },
        LastActivityDate: {
            type: 'string',
            description: 'The last activity date.',
            format: 'date-time',
            nullable: true
        },
        Configuration: {
            '$ref': '#/components/schemas/UserConfiguration'
        },
        Policy: {
            '$ref': '#/components/schemas/UserPolicy'
        },
        PrimaryImageAspectRatio: {
            type: 'number',
            description: 'The primary image aspect ratio.',
            format: 'double',
            nullable: true
        },
        HasConfiguredEasyPassword: {
            type: 'boolean',
            deprecated: true
        },
        UserItemShareLevel: {
            '$ref': '#/components/schemas/UserItemShareLevel'
        }
    },
    description: `Class UserDto
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Dto.UserDto'
} as const;

export const $Connect_UserLinkType = {
    enum: ['LinkedUser', 'Guest'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Connect.UserLinkType'
} as const;

export const $UserConfiguration = {
    type: 'object',
    properties: {
        AudioLanguagePreference: {
            type: 'string',
            description: 'The audio language preference.'
        },
        PlayDefaultAudioTrack: {
            type: 'boolean',
            description: 'A value indicating whether \\[play default audio track\\].'
        },
        SubtitleLanguagePreference: {
            type: 'string',
            description: 'The subtitle language preference.'
        },
        ProfilePin: {
            type: 'string'
        },
        DisplayMissingEpisodes: {
            type: 'boolean'
        },
        SubtitleMode: {
            '$ref': '#/components/schemas/SubtitlePlaybackMode'
        },
        OrderedViews: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        LatestItemsExcludes: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        MyMediaExcludes: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        HidePlayedInLatest: {
            type: 'boolean'
        },
        HidePlayedInMoreLikeThis: {
            type: 'boolean'
        },
        HidePlayedInSuggestions: {
            type: 'boolean'
        },
        RememberAudioSelections: {
            type: 'boolean'
        },
        RememberSubtitleSelections: {
            type: 'boolean'
        },
        EnableNextEpisodeAutoPlay: {
            type: 'boolean'
        },
        ResumeRewindSeconds: {
            type: 'integer',
            format: 'int32'
        },
        IntroSkipMode: {
            '$ref': '#/components/schemas/SegmentSkipMode'
        },
        EnableLocalPassword: {
            type: 'boolean',
            deprecated: true
        }
    },
    description: `Class UserConfiguration
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Configuration.UserConfiguration'
} as const;

export const $SubtitlePlaybackMode = {
    enum: ['Default', 'Always', 'OnlyForced', 'None', 'Smart', 'HearingImpaired'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Configuration.SubtitlePlaybackMode'
} as const;

export const $SegmentSkipMode = {
    enum: ['ShowButton', 'AutoSkip', 'None'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Configuration.SegmentSkipMode'
} as const;

export const $UserPolicy = {
    type: 'object',
    properties: {
        IsAdministrator: {
            type: 'boolean',
            description: 'A value indicating whether this instance is administrator.'
        },
        IsHidden: {
            type: 'boolean',
            description: 'A value indicating whether this instance is hidden.'
        },
        IsHiddenRemotely: {
            type: 'boolean'
        },
        IsHiddenFromUnusedDevices: {
            type: 'boolean'
        },
        IsDisabled: {
            type: 'boolean',
            description: 'A value indicating whether this instance is disabled.'
        },
        LockedOutDate: {
            type: 'integer',
            format: 'int64'
        },
        MaxParentalRating: {
            type: 'integer',
            description: 'The max parental rating.',
            format: 'int32',
            nullable: true
        },
        AllowTagOrRating: {
            type: 'boolean'
        },
        BlockedTags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        IsTagBlockingModeInclusive: {
            type: 'boolean'
        },
        IncludeTags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        EnableUserPreferenceAccess: {
            type: 'boolean'
        },
        AccessSchedules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AccessSchedule'
            }
        },
        BlockUnratedItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UnratedItem'
            }
        },
        EnableRemoteControlOfOtherUsers: {
            type: 'boolean'
        },
        EnableSharedDeviceControl: {
            type: 'boolean'
        },
        EnableRemoteAccess: {
            type: 'boolean'
        },
        EnableLiveTvManagement: {
            type: 'boolean'
        },
        EnableLiveTvAccess: {
            type: 'boolean'
        },
        EnableMediaPlayback: {
            type: 'boolean'
        },
        EnableAudioPlaybackTranscoding: {
            type: 'boolean'
        },
        EnableVideoPlaybackTranscoding: {
            type: 'boolean'
        },
        EnablePlaybackRemuxing: {
            type: 'boolean'
        },
        EnableContentDeletion: {
            type: 'boolean'
        },
        RestrictedFeatures: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        EnableContentDeletionFromFolders: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        EnableContentDownloading: {
            type: 'boolean'
        },
        EnableSubtitleDownloading: {
            type: 'boolean'
        },
        EnableSubtitleManagement: {
            type: 'boolean'
        },
        EnableSyncTranscoding: {
            type: 'boolean',
            description: 'A value indicating whether \\[enable synchronize\\].'
        },
        EnableMediaConversion: {
            type: 'boolean'
        },
        EnabledChannels: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        EnableAllChannels: {
            type: 'boolean'
        },
        EnabledFolders: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        EnableAllFolders: {
            type: 'boolean'
        },
        InvalidLoginAttemptCount: {
            type: 'integer',
            format: 'int32'
        },
        EnablePublicSharing: {
            type: 'boolean'
        },
        RemoteClientBitrateLimit: {
            type: 'integer',
            format: 'int32'
        },
        AuthenticationProviderId: {
            type: 'string'
        },
        ExcludedSubFolders: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        SimultaneousStreamLimit: {
            type: 'integer',
            format: 'int32'
        },
        EnabledDevices: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        EnableAllDevices: {
            type: 'boolean'
        },
        AllowCameraUpload: {
            type: 'boolean'
        },
        AllowSharingPersonalItems: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Users.UserPolicy'
} as const;

export const $AccessSchedule = {
    type: 'object',
    properties: {
        DayOfWeek: {
            '$ref': '#/components/schemas/DynamicDayOfWeek'
        },
        StartHour: {
            type: 'number',
            description: 'The start hour.',
            format: 'double'
        },
        EndHour: {
            type: 'number',
            description: 'The end hour.',
            format: 'double'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Configuration.AccessSchedule'
} as const;

export const $DynamicDayOfWeek = {
    enum: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Everyday', 'Weekday', 'Weekend'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Configuration.DynamicDayOfWeek'
} as const;

export const $UnratedItem = {
    enum: ['Movie', 'Trailer', 'Series', 'Music', 'Game', 'Book', 'LiveTvChannel', 'LiveTvProgram', 'ChannelContent', 'Other'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Configuration.UnratedItem'
} as const;

export const $QueryResult_UserDto = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UserDto'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $AuthenticateUserByName = {
    type: 'object',
    properties: {
        Username: {
            type: 'string'
        },
        Pw: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.Api.AuthenticateUserByName'
} as const;

export const $Authentication_AuthenticationResult = {
    type: 'object',
    properties: {
        User: {
            '$ref': '#/components/schemas/UserDto'
        },
        SessionInfo: {
            '$ref': '#/components/schemas/Session.SessionInfo'
        },
        AccessToken: {
            type: 'string',
            description: 'The authentication token.'
        },
        ServerId: {
            type: 'string',
            description: 'The server identifier.'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Controller.Authentication.AuthenticationResult'
} as const;

export const $CreateUserByName = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        CopyFromUserId: {
            type: 'string'
        },
        UserCopyOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Library.UserCopyOptions'
            }
        }
    },
    'x-internal-ref-name': 'Emby.Api.CreateUserByName'
} as const;

export const $Library_UserCopyOptions = {
    enum: ['UserPolicy', 'UserConfiguration', 'UserData'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Controller.Library.UserCopyOptions'
} as const;

export const $ForgotPassword = {
    type: 'object',
    properties: {
        EnteredUsername: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.Api.ForgotPassword'
} as const;

export const $ForgotPasswordResult = {
    type: 'object',
    properties: {
        Action: {
            '$ref': '#/components/schemas/ForgotPasswordAction'
        },
        PinFile: {
            type: 'string',
            description: 'The pin file.'
        },
        PinExpirationDate: {
            type: 'string',
            description: 'The pin expiration date.',
            format: 'date-time',
            nullable: true
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Users.ForgotPasswordResult'
} as const;

export const $ForgotPasswordAction = {
    enum: ['ContactAdmin', 'PinCode'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Users.ForgotPasswordAction'
} as const;

export const $Api_ConfigurationPageInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        EnableInMainMenu: {
            type: 'boolean'
        },
        EnableInUserMenu: {
            type: 'boolean'
        },
        FeatureId: {
            type: 'string'
        },
        MenuSection: {
            type: 'string'
        },
        MenuIcon: {
            type: 'string'
        },
        DisplayName: {
            type: 'string'
        },
        ConfigurationPageType: {
            '$ref': '#/components/schemas/Plugins.ConfigurationPageType'
        },
        PluginId: {
            type: 'string'
        },
        Href: {
            type: 'string'
        },
        NavMenuId: {
            type: 'string'
        },
        Plugin: {
            '$ref': '#/components/schemas/Common.Plugins.IPlugin'
        },
        Translations: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    'x-internal-ref-name': 'Emby.Web.Api.ConfigurationPageInfo'
} as const;

export const $Plugins_ConfigurationPageType = {
    enum: ['PluginConfiguration', 'None'],
    type: 'string',
    description: `Enum ConfigurationPageType
`,
    'x-internal-ref-name': 'MediaBrowser.Controller.Plugins.ConfigurationPageType'
} as const;

export const $Common_Plugins_IPlugin = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name of the plugin'
        },
        Description: {
            type: 'string',
            description: 'The description.'
        },
        Id: {
            type: 'string',
            description: 'The unique id.',
            format: 'guid'
        },
        Version: {
            '$ref': '#/components/schemas/Version'
        },
        AssemblyFilePath: {
            type: 'string',
            description: 'The path to the assembly file'
        },
        DataFolderPath: {
            type: 'string',
            description: 'The full path to the data folder, where the plugin can store any miscellaneous files needed'
        }
    },
    description: `Interface IPlugin
`,
    'x-internal-ref-name': 'MediaBrowser.Common.Plugins.IPlugin'
} as const;

export const $Version = {
    type: 'object',
    properties: {
        Major: {
            type: 'integer',
            format: 'int32'
        },
        Minor: {
            type: 'integer',
            format: 'int32'
        },
        Build: {
            type: 'integer',
            format: 'int32'
        },
        Revision: {
            type: 'integer',
            format: 'int32'
        },
        MajorRevision: {
            type: 'integer',
            format: 'int32'
        },
        MinorRevision: {
            type: 'integer',
            format: 'int32'
        }
    },
    'x-internal-ref-name': 'System.Version'
} as const;

export const $VideoCodecBase = {
    type: 'object',
    properties: {
        CodecDeviceInfo: {
            '$ref': '#/components/schemas/Common.Interfaces.ICodecDeviceInfo'
        },
        CodecKind: {
            '$ref': '#/components/schemas/CodecKinds'
        },
        MediaTypeName: {
            type: 'string'
        },
        VideoMediaType: {
            '$ref': '#/components/schemas/VideoMediaTypes'
        },
        MinWidth: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MaxWidth: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MinHeight: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MaxHeight: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        WidthAlignment: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        HeightAlignment: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MaxBitRate: {
            '$ref': '#/components/schemas/BitRate'
        },
        SupportedColorFormats: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ColorFormats'
            }
        },
        SupportedColorFormatStrings: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ProfileAndLevelInformation: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProfileLevelInformation'
            }
        },
        Id: {
            type: 'string'
        },
        Direction: {
            '$ref': '#/components/schemas/CodecDirections'
        },
        Name: {
            type: 'string'
        },
        Description: {
            type: 'string'
        },
        FrameworkCodec: {
            type: 'string'
        },
        IsHardwareCodec: {
            type: 'boolean'
        },
        SecondaryFramework: {
            '$ref': '#/components/schemas/SecondaryFrameworks'
        },
        SecondaryFrameworkCodec: {
            type: 'string'
        },
        MaxInstanceCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        IsEnabledByDefault: {
            type: 'boolean'
        },
        DefaultPriority: {
            type: 'integer',
            format: 'int32'
        }
    },
    'x-internal-ref-name': 'Emby.Server.MediaEncoding.Codecs.VideoCodecs.VideoCodecBase'
} as const;

export const $Common_Interfaces_ICodecDeviceInfo = {
    type: 'object',
    properties: {
        Capabilities: {
            '$ref': '#/components/schemas/Common.Interfaces.ICodecDeviceCapabilities'
        },
        Adapter: {
            type: 'integer',
            format: 'int32'
        },
        Name: {
            type: 'string'
        },
        Desription: {
            type: 'string'
        },
        Driver: {
            type: 'string'
        },
        DriverVersion: {
            '$ref': '#/components/schemas/Version'
        },
        ApiVersion: {
            '$ref': '#/components/schemas/Version'
        },
        VendorId: {
            type: 'integer',
            format: 'int32'
        },
        DeviceId: {
            type: 'integer',
            format: 'int32'
        },
        DeviceIdentifier: {
            type: 'string'
        },
        HardwareContextFramework: {
            '$ref': '#/components/schemas/SecondaryFrameworks'
        },
        DevPath: {
            type: 'string'
        },
        DrmNode: {
            type: 'string'
        },
        VendorName: {
            type: 'string'
        },
        DeviceName: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.Server.MediaEncoding.Codecs.Common.Interfaces.ICodecDeviceInfo'
} as const;

export const $Common_Interfaces_ICodecDeviceCapabilities = {
    type: 'object',
    properties: {
        SupportsHwUpload: {
            type: 'boolean'
        },
        SupportsHwDownload: {
            type: 'boolean'
        },
        SupportsStandaloneDeviceInit: {
            type: 'boolean'
        },
        Supports10BitProcessing: {
            type: 'boolean'
        },
        SupportsNativeToneMapping: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'Emby.Server.MediaEncoding.Codecs.Common.Interfaces.ICodecDeviceCapabilities'
} as const;

export const $SecondaryFrameworks = {
    enum: ['Unknown', 'None', 'AmdAmf', 'MediaCodec', 'NvEncDec', 'OpenMax', 'QuickSync', 'VaApi', 'V4L2', 'DxVa', 'D3d11va', 'VideoToolbox', 'Mmal'],
    type: 'string',
    description: `Enum defining secondary frameworks for encoding and decoding.


While most of these are hardware acceleration frameworks, this is not a necessity             (e.g. Android MediaCodec offers software codecs as well).
`,
    'x-internal-ref-name': 'Emby.Media.Model.Enums.SecondaryFrameworks'
} as const;

export const $CodecKinds = {
    enum: ['Audio', 'Video', 'SubTitles'],
    type: 'string',
    description: `Enum defining the kind of media a codec is processing.
`,
    'x-internal-ref-name': 'Emby.Media.Model.Enums.CodecKinds'
} as const;

export const $VideoMediaTypes = {
    enum: ['Unknown', 'copy', 'flv1', 'h263', 'h263p', 'h264', 'hevc', 'mjpeg', 'mpeg1video', 'mpeg2video', 'mpeg4', 'msvideo1', 'theora', 'vc1image', 'vc1', 'vp8', 'vp9', 'wmv1', 'wmv2', 'wmv3', '_012v', '_4xm', '_8bps', 'a64_multi', 'a64_multi5', 'aasc', 'aic', 'alias_pix', 'amv', 'anm', 'ansi', 'apng', 'asv1', 'asv2', 'aura', 'aura2', 'av1', 'avrn', 'avrp', 'avs', 'avui', 'ayuv', 'bethsoftvid', 'bfi', 'binkvideo', 'bintext', 'bitpacked', 'bmp', 'bmv_video', 'brender_pix', 'c93', 'cavs', 'cdgraphics', 'cdxl', 'cfhd', 'cinepak', 'clearvideo', 'cljr', 'cllc', 'cmv', 'cpia', 'cscd', 'cyuv', 'daala', 'dds', 'dfa', 'dirac', 'dnxhd', 'dpx', 'dsicinvideo', 'dvvideo', 'dxa', 'dxtory', 'dxv', 'escape124', 'escape130', 'exr', 'ffv1', 'ffvhuff', 'fic', 'fits', 'flashsv', 'flashsv2', 'flic', 'fmvc', 'fraps', 'frwu', 'g2m', 'gdv', 'gif', 'h261', 'h263i', 'hap', 'hnm4video', 'hq_hqa', 'hqx', 'huffyuv', 'idcin', 'idf', 'iff_ilbm', 'indeo2', 'indeo3', 'indeo4', 'indeo5', 'interplayvideo', 'jpeg2000', 'jpegls', 'jv', 'kgv1', 'kmvc', 'lagarith', 'ljpeg', 'loco', 'm101', 'mad', 'magicyuv', 'mdec', 'mimic', 'mjpegb', 'mmvideo', 'motionpixels', 'msa1', 'mscc', 'msmpeg4v1', 'msmpeg4v2', 'msmpeg4v3', 'msrle', 'mss1', 'mss2', 'mszh', 'mts2', 'mvc1', 'mvc2', 'mxpeg', 'nuv', 'paf_video', 'pam', 'pbm', 'pcx', 'pgm', 'pgmyuv', 'pictor', 'pixlet', 'png', 'ppm', 'prores', 'psd', 'ptx', 'qdraw', 'qpeg', 'qtrle', 'r10k', 'r210', 'rawvideo', 'rl2', 'roq', 'rpza', 'rscc', 'rv10', 'rv20', 'rv30', 'rv40', 'sanm', 'scpr', 'screenpresso', 'sgi', 'sgirle', 'sheervideo', 'smackvideo', 'smc', 'smvjpeg', 'snow', 'sp5x', 'speedhq', 'srgc', 'sunrast', 'svg', 'svq1', 'svq3', 'targa', 'targa_y216', 'tdsc', 'tgq', 'tgv', 'thp', 'tiertexseqvideo', 'tiff', 'tmv', 'tqi', 'truemotion1', 'truemotion2', 'truemotion2rt', 'tscc', 'tscc2', 'txd', 'ulti', 'utvideo', 'v210', 'v210x', 'v308', 'v408', 'v410', 'vb', 'vble', 'vcr1', 'vixl', 'vmdvideo', 'vmnc', 'vp3', 'vp5', 'vp6', 'vp6a', 'vp6f', 'vp7', 'webp', 'wmv3image', 'wnv1', 'wrapped_avframe', 'ws_vqa', 'xan_wc3', 'xan_wc4', 'xbin', 'xbm', 'xface', 'xpm', 'xwd', 'y41p', 'ylc', 'yop', 'yuv4', 'zerocodec', 'zlib', 'zmbv'],
    type: 'string',
    description: `Enum listing video media types.


The enum member names are matching exactly those that are used by ffmpeg. Exception: Items that are starting with a number are prefixed with an underscore here.
`,
    'x-internal-ref-name': 'Emby.Media.Model.Enums.VideoMediaTypes'
} as const;

export const $BitRate = {
    type: 'object',
    properties: {
        bps: {
            type: 'integer',
            format: 'int64'
        },
        kbps: {
            type: 'number',
            format: 'double'
        },
        Mbps: {
            type: 'number',
            format: 'double'
        }
    },
    description: `A type for handling bit rates.


The purpose of this type is to avoid manual calculations and conversions in code,             unified handling and conversion as well as presentation through its various To\*\*\*String methods.


\`System.IComparable\`


\`System.IEquatable\`1\`
`,
    'x-internal-ref-name': 'Emby.Media.Model.Types.BitRate'
} as const;

export const $ColorFormats = {
    enum: ['Unknown', 'yuv420p', 'yuyv422', 'rgb24', 'bgr24', 'yuv422p', 'yuv444p', 'yuv410p', 'yuv411p', 'gray', 'monow', 'monob', 'pal8', 'yuvj420p', 'yuvj422p', 'yuvj444p', 'uyvy422', 'uyyvyy411', 'bgr8', 'bgr4', 'bgr4_byte', 'rgb8', 'rgb4', 'rgb4_byte', 'nv12', 'nv21', 'argb', 'rgba', 'abgr', 'bgra', 'gray16', 'yuv440p', 'yuvj440p', 'yuva420p', 'rgb48', 'rgb565', 'rgb555', 'bgr565', 'bgr555', 'vaapi_moco', 'vaapi_idct', 'vaapi_vld', 'yuv420p16', 'yuv422p16', 'yuv444p16', 'dxva2_vld', 'rgb444', 'bgr444', 'ya8', 'bgr48', 'yuv420p9', 'yuv420p10', 'yuv422p10', 'yuv444p9', 'yuv444p10', 'yuv422p9', 'gbrp', 'gbrp9', 'gbrp10', 'gbrp16', 'yuva422p', 'yuva444p', 'yuva420p9', 'yuva422p9', 'yuva444p9', 'yuva420p10', 'yuva422p10', 'yuva444p10', 'yuva420p16', 'yuva422p16', 'yuva444p16', 'vdpau', 'xyz12', 'nv16', 'nv20', 'rgba64', 'bgra64', 'yvyu422', 'ya16', 'gbrap', 'gbrap16', 'qsv', 'mmal', 'd3d11va_vld', 'cuda', '_0rgb', 'rgb0', '_0bgr', 'bgr0', 'yuv420p12', 'yuv420p14', 'yuv422p12', 'yuv422p14', 'yuv444p12', 'yuv444p14', 'gbrp12', 'gbrp14', 'yuvj411p', 'bayer_bggr8', 'bayer_rggb8', 'bayer_gbrg8', 'bayer_grbg8', 'bayer_bggr16', 'bayer_rggb16', 'bayer_gbrg16', 'bayer_grbg16', 'xvmc', 'yuv440p10', 'yuv440p12', 'ayuv64', 'videotoolbox_vld', 'p010', 'gbrap12', 'gbrap10', 'mediacodec', 'gray12', 'gray10', 'gray14', 'p016', 'd3d11', 'gray9', 'gbrpf32', 'gbrapf32', 'drm_prime', 'opencl', 'grayf32', 'yuva422p12', 'yuva444p12', 'nv24', 'nv42'],
    type: 'string',
    description: `Enum listing color formats.


The enum member names are matching those that are used by ffmpeg. (execute 'ffmpeg \-pix\_fmts' to list them) Exception: Items that are starting with a number are prefixed with an underscore here. In ffmpeg code these are prefixed with 'AV\_PIX\_FMT\_' and all\-caps.
`,
    'x-internal-ref-name': 'Emby.Media.Model.Enums.ColorFormats'
} as const;

export const $ProfileLevelInformation = {
    type: 'object',
    properties: {
        Profile: {
            '$ref': '#/components/schemas/ProfileInformation'
        },
        Level: {
            '$ref': '#/components/schemas/LevelInformation'
        }
    },
    description: `A class combining both \`Emby.Media.Model.Types.ProfileInformation\` and \`Emby.Media.Model.Types.LevelInformation\`.
`,
    'x-internal-ref-name': 'Emby.Media.Model.Types.ProfileLevelInformation'
} as const;

export const $ProfileInformation = {
    type: 'object',
    properties: {
        ShortName: {
            type: 'string',
            description: 'The enum member name of the profile.'
        },
        Description: {
            type: 'string',
            description: 'The common name of the profile.'
        },
        Details: {
            type: 'string',
            description: 'Detail information about the profile.'
        },
        Id: {
            type: 'string',
            description: 'A unique identifier.'
        },
        BitDepths: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            description: 'The bit depths.'
        }
    },
    description: `Class for unified presentation of all information associated with a specific codec profile.
`,
    'x-internal-ref-name': 'Emby.Media.Model.Types.ProfileInformation'
} as const;

export const $LevelInformation = {
    type: 'object',
    properties: {
        ShortName: {
            type: 'string',
            description: 'The enum member name of the level.'
        },
        Description: {
            type: 'string',
            description: 'The common name of the level.'
        },
        Ordinal: {
            type: 'integer',
            description: "A value indicating the level's ranking relative to other levels.",
            format: 'int32',
            nullable: true
        },
        MaxBitRate: {
            '$ref': '#/components/schemas/BitRate'
        },
        MaxBitRateDisplay: {
            type: 'string',
            description: 'A display value of the `Emby.Media.Model.Types.LevelInformation.MaxBitRate` property.'
        },
        Id: {
            type: 'string',
            description: 'A unique identifier.'
        },
        ResolutionRates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ResolutionWithRate'
            },
            description: 'Examples for the maximum supported combinations of resolution and rate for this level.'
        },
        ResolutionRateStrings: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Examples for the maximum supported combinations of resolution and rate for this level as string values.'
        },
        ResolutionRatesDisplay: {
            type: 'string',
            description: 'A single string from the `Emby.Media.Model.Types.LevelInformation.ResolutionRateStrings` list.'
        }
    },
    description: `Class for unified presentation of all information associated with a specific codec level.
`,
    'x-internal-ref-name': 'Emby.Media.Model.Types.LevelInformation'
} as const;

export const $ResolutionWithRate = {
    type: 'object',
    properties: {
        Width: {
            type: 'integer',
            description: 'The resolution width.',
            format: 'int32'
        },
        Height: {
            type: 'integer',
            description: 'The resolution height.',
            format: 'int32'
        },
        FrameRate: {
            type: 'number',
            description: 'The frame rate in frames\\/second (fps).',
            format: 'double'
        },
        Resolution: {
            '$ref': '#/components/schemas/Resolution'
        }
    },
    description: `Struct representing a combination of video resolution and frame rate.


\`System.IEquatable\`1\`
`,
    'x-internal-ref-name': 'Emby.Media.Model.Types.ResolutionWithRate'
} as const;

export const $Resolution = {
    type: 'object',
    properties: {
        Width: {
            type: 'integer',
            description: 'The resolution width.',
            format: 'int32'
        },
        Height: {
            type: 'integer',
            description: 'The resolution height.',
            format: 'int32'
        }
    },
    description: `Struct representing a video resolution specified in X and Y dimension.


\`System.IComparable\`


\`System.IEquatable\`1\`
`,
    'x-internal-ref-name': 'Emby.Media.Model.Types.Resolution'
} as const;

export const $CodecDirections = {
    enum: ['Encoder', 'Decoder'],
    type: 'string',
    description: `Enum for indicating the processing direction of a codec.
`,
    'x-internal-ref-name': 'Emby.Media.Model.Enums.CodecDirections'
} as const;

export const $CodecConfiguration = {
    type: 'object',
    properties: {
        IsEnabled: {
            type: 'boolean',
            description: 'A value indicating whether the codec is enabled.'
        },
        Priority: {
            type: 'integer',
            description: `The selection priority for the codec.

Higher values mean higher priority.`,
            format: 'int32'
        },
        CodecId: {
            type: 'string',
            description: 'The codec identifier.'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Configuration.CodecConfiguration'
} as const;

export const $ExternalIdInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Key: {
            type: 'string',
            description: 'The key.'
        },
        Website: {
            type: 'string'
        },
        UrlFormatString: {
            type: 'string',
            description: 'The URL format string.'
        },
        IsSupportedAsIdentifier: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Providers.ExternalIdInfo'
} as const;

export const $RemoteSearchQuery_TrailerInfo = {
    type: 'object',
    properties: {
        SearchInfo: {
            '$ref': '#/components/schemas/TrailerInfo'
        },
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        SearchProviderName: {
            type: 'string'
        },
        Providers: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        IncludeDisabledProviders: {
            type: 'boolean'
        }
    }
} as const;

export const $TrailerInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Path: {
            type: 'string'
        },
        MetadataLanguage: {
            type: 'string',
            description: 'The metadata language.'
        },
        MetadataCountryCode: {
            type: 'string',
            description: 'The metadata country code.'
        },
        MetadataLanguages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Globalization.CultureDto'
            }
        },
        ProviderIds: {
            '$ref': '#/components/schemas/ProviderIdDictionary'
        },
        Year: {
            type: 'integer',
            description: 'The year.',
            format: 'int32',
            nullable: true
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PremiereDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        IsAutomated: {
            type: 'boolean'
        },
        EnableAdultMetadata: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Controller.Providers.TrailerInfo'
} as const;

export const $RemoteSearchResult = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name.'
        },
        OriginalTitle: {
            type: 'string'
        },
        ProviderIds: {
            '$ref': '#/components/schemas/ProviderIdDictionary'
        },
        ProductionYear: {
            type: 'integer',
            description: 'The year.',
            format: 'int32',
            nullable: true
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        IndexNumberEnd: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        SortIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        SortParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PremiereDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        StartDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        EndDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        ImageUrl: {
            type: 'string'
        },
        SearchProviderName: {
            type: 'string'
        },
        GameSystem: {
            type: 'string'
        },
        Overview: {
            type: 'string'
        },
        DisambiguationComment: {
            type: 'string'
        },
        AlbumArtist: {
            '$ref': '#/components/schemas/RemoteSearchResult'
        },
        Artists: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RemoteSearchResult'
            }
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Providers.RemoteSearchResult'
} as const;

export const $RemoteSearchQuery_BookInfo = {
    type: 'object',
    properties: {
        SearchInfo: {
            '$ref': '#/components/schemas/BookInfo'
        },
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        SearchProviderName: {
            type: 'string'
        },
        Providers: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        IncludeDisabledProviders: {
            type: 'boolean'
        }
    }
} as const;

export const $BookInfo = {
    type: 'object',
    properties: {
        SeriesName: {
            type: 'string'
        },
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Path: {
            type: 'string'
        },
        MetadataLanguage: {
            type: 'string',
            description: 'The metadata language.'
        },
        MetadataCountryCode: {
            type: 'string',
            description: 'The metadata country code.'
        },
        MetadataLanguages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Globalization.CultureDto'
            }
        },
        ProviderIds: {
            '$ref': '#/components/schemas/ProviderIdDictionary'
        },
        Year: {
            type: 'integer',
            description: 'The year.',
            format: 'int32',
            nullable: true
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PremiereDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        IsAutomated: {
            type: 'boolean'
        },
        EnableAdultMetadata: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Controller.Providers.BookInfo'
} as const;

export const $RemoteSearchQuery_MovieInfo = {
    type: 'object',
    properties: {
        SearchInfo: {
            '$ref': '#/components/schemas/MovieInfo'
        },
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        SearchProviderName: {
            type: 'string'
        },
        Providers: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        IncludeDisabledProviders: {
            type: 'boolean'
        }
    }
} as const;

export const $MovieInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Path: {
            type: 'string'
        },
        MetadataLanguage: {
            type: 'string',
            description: 'The metadata language.'
        },
        MetadataCountryCode: {
            type: 'string',
            description: 'The metadata country code.'
        },
        MetadataLanguages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Globalization.CultureDto'
            }
        },
        ProviderIds: {
            '$ref': '#/components/schemas/ProviderIdDictionary'
        },
        Year: {
            type: 'integer',
            description: 'The year.',
            format: 'int32',
            nullable: true
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PremiereDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        IsAutomated: {
            type: 'boolean'
        },
        EnableAdultMetadata: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Controller.Providers.MovieInfo'
} as const;

export const $RemoteSearchQuery_SeriesInfo = {
    type: 'object',
    properties: {
        SearchInfo: {
            '$ref': '#/components/schemas/SeriesInfo'
        },
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        SearchProviderName: {
            type: 'string'
        },
        Providers: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        IncludeDisabledProviders: {
            type: 'boolean'
        }
    }
} as const;

export const $SeriesInfo = {
    type: 'object',
    properties: {
        EpisodeAirDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        DisplayOrder: {
            '$ref': '#/components/schemas/SeriesDisplayOrder'
        },
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Path: {
            type: 'string'
        },
        MetadataLanguage: {
            type: 'string',
            description: 'The metadata language.'
        },
        MetadataCountryCode: {
            type: 'string',
            description: 'The metadata country code.'
        },
        MetadataLanguages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Globalization.CultureDto'
            }
        },
        ProviderIds: {
            '$ref': '#/components/schemas/ProviderIdDictionary'
        },
        Year: {
            type: 'integer',
            description: 'The year.',
            format: 'int32',
            nullable: true
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PremiereDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        IsAutomated: {
            type: 'boolean'
        },
        EnableAdultMetadata: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Controller.Providers.SeriesInfo'
} as const;

export const $SeriesDisplayOrder = {
    enum: ['Aired', 'Dvd', 'Absolute'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Entities.SeriesDisplayOrder'
} as const;

export const $RemoteSearchQuery_GameInfo = {
    type: 'object',
    properties: {
        SearchInfo: {
            '$ref': '#/components/schemas/GameInfo'
        },
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        SearchProviderName: {
            type: 'string'
        },
        Providers: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        IncludeDisabledProviders: {
            type: 'boolean'
        }
    }
} as const;

export const $GameInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Path: {
            type: 'string'
        },
        MetadataLanguage: {
            type: 'string',
            description: 'The metadata language.'
        },
        MetadataCountryCode: {
            type: 'string',
            description: 'The metadata country code.'
        },
        MetadataLanguages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Globalization.CultureDto'
            }
        },
        ProviderIds: {
            '$ref': '#/components/schemas/ProviderIdDictionary'
        },
        Year: {
            type: 'integer',
            description: 'The year.',
            format: 'int32',
            nullable: true
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PremiereDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        IsAutomated: {
            type: 'boolean'
        },
        EnableAdultMetadata: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Controller.Providers.GameInfo'
} as const;

export const $RemoteSearchQuery_ItemLookupInfo = {
    type: 'object',
    properties: {
        SearchInfo: {
            '$ref': '#/components/schemas/ItemLookupInfo'
        },
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        SearchProviderName: {
            type: 'string'
        },
        Providers: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        IncludeDisabledProviders: {
            type: 'boolean'
        }
    }
} as const;

export const $ItemLookupInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Path: {
            type: 'string'
        },
        MetadataLanguage: {
            type: 'string',
            description: 'The metadata language.'
        },
        MetadataCountryCode: {
            type: 'string',
            description: 'The metadata country code.'
        },
        MetadataLanguages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Globalization.CultureDto'
            }
        },
        ProviderIds: {
            '$ref': '#/components/schemas/ProviderIdDictionary'
        },
        Year: {
            type: 'integer',
            description: 'The year.',
            format: 'int32',
            nullable: true
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PremiereDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        IsAutomated: {
            type: 'boolean'
        },
        EnableAdultMetadata: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Controller.Providers.ItemLookupInfo'
} as const;

export const $RemoteSearchQuery_MusicVideoInfo = {
    type: 'object',
    properties: {
        SearchInfo: {
            '$ref': '#/components/schemas/MusicVideoInfo'
        },
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        SearchProviderName: {
            type: 'string'
        },
        Providers: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        IncludeDisabledProviders: {
            type: 'boolean'
        }
    }
} as const;

export const $MusicVideoInfo = {
    type: 'object',
    properties: {
        Artists: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Path: {
            type: 'string'
        },
        MetadataLanguage: {
            type: 'string',
            description: 'The metadata language.'
        },
        MetadataCountryCode: {
            type: 'string',
            description: 'The metadata country code.'
        },
        MetadataLanguages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Globalization.CultureDto'
            }
        },
        ProviderIds: {
            '$ref': '#/components/schemas/ProviderIdDictionary'
        },
        Year: {
            type: 'integer',
            description: 'The year.',
            format: 'int32',
            nullable: true
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PremiereDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        IsAutomated: {
            type: 'boolean'
        },
        EnableAdultMetadata: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Controller.Providers.MusicVideoInfo'
} as const;

export const $RemoteSearchQuery_PersonLookupInfo = {
    type: 'object',
    properties: {
        SearchInfo: {
            '$ref': '#/components/schemas/PersonLookupInfo'
        },
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        SearchProviderName: {
            type: 'string'
        },
        Providers: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        IncludeDisabledProviders: {
            type: 'boolean'
        }
    }
} as const;

export const $PersonLookupInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Path: {
            type: 'string'
        },
        MetadataLanguage: {
            type: 'string',
            description: 'The metadata language.'
        },
        MetadataCountryCode: {
            type: 'string',
            description: 'The metadata country code.'
        },
        MetadataLanguages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Globalization.CultureDto'
            }
        },
        ProviderIds: {
            '$ref': '#/components/schemas/ProviderIdDictionary'
        },
        Year: {
            type: 'integer',
            description: 'The year.',
            format: 'int32',
            nullable: true
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PremiereDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        IsAutomated: {
            type: 'boolean'
        },
        EnableAdultMetadata: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Controller.Providers.PersonLookupInfo'
} as const;

export const $RemoteSearchQuery_AlbumInfo = {
    type: 'object',
    properties: {
        SearchInfo: {
            '$ref': '#/components/schemas/AlbumInfo'
        },
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        SearchProviderName: {
            type: 'string'
        },
        Providers: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        IncludeDisabledProviders: {
            type: 'boolean'
        }
    }
} as const;

export const $AlbumInfo = {
    type: 'object',
    properties: {
        AlbumArtists: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'The album artist.'
        },
        SongInfos: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SongInfo'
            }
        },
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Path: {
            type: 'string'
        },
        MetadataLanguage: {
            type: 'string',
            description: 'The metadata language.'
        },
        MetadataCountryCode: {
            type: 'string',
            description: 'The metadata country code.'
        },
        MetadataLanguages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Globalization.CultureDto'
            }
        },
        ProviderIds: {
            '$ref': '#/components/schemas/ProviderIdDictionary'
        },
        Year: {
            type: 'integer',
            description: 'The year.',
            format: 'int32',
            nullable: true
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PremiereDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        IsAutomated: {
            type: 'boolean'
        },
        EnableAdultMetadata: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Controller.Providers.AlbumInfo'
} as const;

export const $SongInfo = {
    type: 'object',
    properties: {
        AlbumArtists: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        Album: {
            type: 'string'
        },
        Artists: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        Composers: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Path: {
            type: 'string'
        },
        MetadataLanguage: {
            type: 'string',
            description: 'The metadata language.'
        },
        MetadataCountryCode: {
            type: 'string',
            description: 'The metadata country code.'
        },
        MetadataLanguages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Globalization.CultureDto'
            }
        },
        ProviderIds: {
            '$ref': '#/components/schemas/ProviderIdDictionary'
        },
        Year: {
            type: 'integer',
            description: 'The year.',
            format: 'int32',
            nullable: true
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PremiereDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        IsAutomated: {
            type: 'boolean'
        },
        EnableAdultMetadata: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Controller.Providers.SongInfo'
} as const;

export const $RemoteSearchQuery_ArtistInfo = {
    type: 'object',
    properties: {
        SearchInfo: {
            '$ref': '#/components/schemas/ArtistInfo'
        },
        ItemId: {
            type: 'integer',
            format: 'int64'
        },
        SearchProviderName: {
            type: 'string'
        },
        Providers: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        IncludeDisabledProviders: {
            type: 'boolean'
        }
    }
} as const;

export const $ArtistInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Path: {
            type: 'string'
        },
        MetadataLanguage: {
            type: 'string',
            description: 'The metadata language.'
        },
        MetadataCountryCode: {
            type: 'string',
            description: 'The metadata country code.'
        },
        MetadataLanguages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Globalization.CultureDto'
            }
        },
        ProviderIds: {
            '$ref': '#/components/schemas/ProviderIdDictionary'
        },
        Year: {
            type: 'integer',
            description: 'The year.',
            format: 'int32',
            nullable: true
        },
        IndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        ParentIndexNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        PremiereDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        IsAutomated: {
            type: 'boolean'
        },
        EnableAdultMetadata: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Controller.Providers.ArtistInfo'
} as const;

export const $MetadataRefreshMode = {
    enum: ['ValidationOnly', 'Default', 'FullRefresh'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Controller.Providers.MetadataRefreshMode'
} as const;

export const $BaseRefreshRequest = {
    type: 'object',
    properties: {
        ReplaceThumbnailImages: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'Emby.Api.BaseRefreshRequest'
} as const;

export const $MetadataEditorInfo = {
    type: 'object',
    properties: {
        ParentalRatingOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ParentalRating'
            }
        },
        Countries: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Globalization.CountryInfo'
            }
        },
        Cultures: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Globalization.CultureDto'
            }
        },
        ExternalIdInfos: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ExternalIdInfo'
            }
        },
        PersonExternalIdInfos: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ExternalIdInfo'
            }
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Dto.MetadataEditorInfo'
} as const;

export const $UserLibrary_LeaveSharedItems = {
    type: 'object',
    properties: {
        ItemIds: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        UserId: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.Api.UserLibrary.LeaveSharedItems'
} as const;

export const $Library_DeleteInfo = {
    type: 'object',
    properties: {
        Paths: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    'x-internal-ref-name': 'Emby.Api.Library.DeleteInfo'
} as const;

export const $AllThemeMediaResult = {
    type: 'object',
    properties: {
        ThemeVideosResult: {
            '$ref': '#/components/schemas/ThemeMediaResult'
        },
        ThemeSongsResult: {
            '$ref': '#/components/schemas/ThemeMediaResult'
        },
        SoundtrackSongsResult: {
            '$ref': '#/components/schemas/ThemeMediaResult'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Querying.AllThemeMediaResult'
} as const;

export const $ThemeMediaResult = {
    type: 'object',
    properties: {
        OwnerId: {
            type: 'integer',
            description: 'The owner id.',
            format: 'int64'
        },
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BaseItemDto'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    },
    description: `Class ThemeMediaResult
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Querying.ThemeMediaResult'
} as const;

export const $ImageInfo = {
    type: 'object',
    properties: {
        ImageType: {
            '$ref': '#/components/schemas/ImageType'
        },
        ImageIndex: {
            type: 'integer',
            description: 'The index of the image.',
            format: 'int32',
            nullable: true
        },
        Path: {
            type: 'string',
            description: 'The path.'
        },
        Filename: {
            type: 'string'
        },
        Height: {
            type: 'integer',
            description: 'The height.',
            format: 'int32',
            nullable: true
        },
        Width: {
            type: 'integer',
            description: 'The width.',
            format: 'int32',
            nullable: true
        },
        Size: {
            type: 'integer',
            description: 'The size.',
            format: 'int64'
        }
    },
    description: `Class ImageInfo
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Dto.ImageInfo'
} as const;

export const $RemoteImageResult = {
    type: 'object',
    properties: {
        Images: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RemoteImageInfo'
            },
            description: 'The images.'
        },
        TotalRecordCount: {
            type: 'integer',
            description: 'The total record count.',
            format: 'int32'
        },
        Providers: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'The providers.'
        }
    },
    description: `Class RemoteImageResult.
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Providers.RemoteImageResult'
} as const;

export const $RemoteImageInfo = {
    type: 'object',
    properties: {
        ProviderName: {
            type: 'string',
            description: 'The name of the provider.'
        },
        Url: {
            type: 'string',
            description: 'The URL.'
        },
        ThumbnailUrl: {
            type: 'string',
            description: 'A url used for previewing a smaller version'
        },
        Height: {
            type: 'integer',
            description: 'The height.',
            format: 'int32',
            nullable: true
        },
        Width: {
            type: 'integer',
            description: 'The width.',
            format: 'int32',
            nullable: true
        },
        CommunityRating: {
            type: 'number',
            description: 'The community rating.',
            format: 'double',
            nullable: true
        },
        VoteCount: {
            type: 'integer',
            description: 'The vote count.',
            format: 'int32',
            nullable: true
        },
        Language: {
            type: 'string',
            description: 'The language.'
        },
        DisplayLanguage: {
            type: 'string'
        },
        Type: {
            '$ref': '#/components/schemas/ImageType'
        },
        RatingType: {
            '$ref': '#/components/schemas/RatingType'
        }
    },
    description: `Class RemoteImageInfo
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Providers.RemoteImageInfo'
} as const;

export const $RatingType = {
    enum: ['Score', 'Likes'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Dto.RatingType'
} as const;

export const $RokuMetadata_Api_ThumbnailSetInfo = {
    type: 'object',
    properties: {
        AspectRatio: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        Thumbnails: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RokuMetadata.Api.ThumbnailInfo'
            }
        }
    },
    'x-internal-ref-name': 'RokuMetadata.Api.ThumbnailSetInfo'
} as const;

export const $RokuMetadata_Api_ThumbnailInfo = {
    type: 'object',
    properties: {
        PositionTicks: {
            type: 'integer',
            format: 'int64'
        },
        ImageTag: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'RokuMetadata.Api.ThumbnailInfo'
} as const;

export const $PlaybackInfoResponse = {
    type: 'object',
    properties: {
        MediaSources: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MediaSourceInfo'
            },
            description: 'The media sources.'
        },
        PlaySessionId: {
            type: 'string',
            description: 'The play session identifier.'
        },
        ErrorCode: {
            '$ref': '#/components/schemas/PlaybackErrorCode'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.MediaInfo.PlaybackInfoResponse'
} as const;

export const $PlaybackErrorCode = {
    enum: ['NotAllowed', 'NoCompatibleStream', 'RateLimitExceeded'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Dlna.PlaybackErrorCode'
} as const;

export const $PlaybackInfoRequest = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        UserId: {
            type: 'string'
        },
        MaxStreamingBitrate: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        StartTimeTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        AudioStreamIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        SubtitleStreamIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MaxAudioChannels: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MediaSourceId: {
            type: 'string'
        },
        LiveStreamId: {
            type: 'string'
        },
        DeviceProfile: {
            '$ref': '#/components/schemas/DeviceProfile'
        },
        EnableDirectPlay: {
            type: 'boolean'
        },
        EnableDirectStream: {
            type: 'boolean'
        },
        EnableTranscoding: {
            type: 'boolean'
        },
        AllowInterlacedVideoStreamCopy: {
            type: 'boolean'
        },
        AllowVideoStreamCopy: {
            type: 'boolean'
        },
        AllowAudioStreamCopy: {
            type: 'boolean'
        },
        IsPlayback: {
            type: 'boolean'
        },
        AutoOpenLiveStream: {
            type: 'boolean'
        },
        CurrentPlaySessionId: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.MediaInfo.PlaybackInfoRequest'
} as const;

export const $Library_PostUpdatedMedia = {
    type: 'object',
    properties: {
        Updates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Library.MediaUpdateInfo'
            }
        }
    },
    'x-internal-ref-name': 'Emby.Api.Library.PostUpdatedMedia'
} as const;

export const $Library_MediaUpdateInfo = {
    type: 'object',
    properties: {
        Path: {
            type: 'string'
        },
        UpdateType: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.Api.Library.MediaUpdateInfo'
} as const;

export const $QueryResult_VirtualFolderInfo = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/VirtualFolderInfo'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $VirtualFolderInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Locations: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'The locations.'
        },
        CollectionType: {
            type: 'string',
            description: 'The type of the collection.'
        },
        LibraryOptions: {
            '$ref': '#/components/schemas/LibraryOptions'
        },
        ItemId: {
            type: 'string',
            description: 'The item identifier.'
        },
        Id: {
            type: 'string',
            description: 'ItemId came first, so that is left for compatability purposes'
        },
        Guid: {
            type: 'string'
        },
        PrimaryImageItemId: {
            type: 'string',
            description: 'The primary image item identifier.'
        },
        PrimaryImageTag: {
            type: 'string'
        },
        RefreshProgress: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        RefreshStatus: {
            type: 'string'
        }
    },
    description: `Used to hold information about a user's list of configured virtual folders
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Entities.VirtualFolderInfo'
} as const;

export const $Library_UpdateLibraryOptions = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        LibraryOptions: {
            '$ref': '#/components/schemas/LibraryOptions'
        }
    },
    'x-internal-ref-name': 'Emby.Api.Library.UpdateLibraryOptions'
} as const;

export const $Library_RenameVirtualFolder = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        NewName: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.Api.Library.RenameVirtualFolder'
} as const;

export const $Library_RemoveVirtualFolder = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        RefreshLibrary: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'Emby.Api.Library.RemoveVirtualFolder'
} as const;

export const $Library_AddMediaPath = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        Path: {
            type: 'string'
        },
        PathInfo: {
            '$ref': '#/components/schemas/MediaPathInfo'
        },
        RefreshLibrary: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'Emby.Api.Library.AddMediaPath'
} as const;

export const $Api_TagItem = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Id: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.LiveTV.Api.TagItem'
} as const;

export const $Api_ListingProviderTypeInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        SetupUrl: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.LiveTV.Api.ListingProviderTypeInfo'
} as const;

export const $UserNotificationInfo = {
    type: 'object',
    properties: {
        NotifierKey: {
            type: 'string'
        },
        SetupModuleUrl: {
            type: 'string'
        },
        ServiceName: {
            type: 'string'
        },
        PluginId: {
            type: 'string'
        },
        FriendlyName: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        Enabled: {
            type: 'boolean'
        },
        UserIds: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Limit events based on user ids, for admin notifications'
        },
        DeviceIds: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        LibraryIds: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        EventIds: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        UserId: {
            type: 'string',
            description: 'Notification intended for a specific user'
        },
        IsSelfNotification: {
            type: 'boolean'
        },
        GroupItems: {
            type: 'boolean'
        },
        Options: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'This is for webhooks since this will cause xml serialization to fail'
        }
    },
    'x-internal-ref-name': 'Emby.Notifications.UserNotificationInfo'
} as const;

export const $Playlists_AddToPlaylistInfo = {
    type: 'object',
    properties: {
        ItemCount: {
            type: 'integer',
            format: 'int32'
        },
        ContainsDuplicates: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Controller.Playlists.AddToPlaylistInfo'
} as const;

export const $Playlists_AddToPlaylistResult = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        ItemAddedCount: {
            type: 'integer',
            format: 'int32'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Controller.Playlists.AddToPlaylistResult'
} as const;

export const $PlayCommand = {
    enum: ['PlayNow', 'PlayNext', 'PlayLast', 'PlayInstantMix', 'PlayShuffle'],
    type: 'string',
    description: `Enum PlayCommand
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Session.PlayCommand'
} as const;

export const $PlayRequest = {
    type: 'object',
    properties: {
        ControllingUserId: {
            type: 'string',
            description: 'The controlling user identifier.'
        },
        SubtitleStreamIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        AudioStreamIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        MediaSourceId: {
            type: 'string'
        },
        StartIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        }
    },
    description: `Class PlayRequest
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Session.PlayRequest'
} as const;

export const $GeneralCommand = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        ControllingUserId: {
            type: 'string'
        },
        Arguments: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Session.GeneralCommand'
} as const;

export const $ClientCapabilities = {
    type: 'object',
    properties: {
        PlayableMediaTypes: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        SupportedCommands: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        SupportsMediaControl: {
            type: 'boolean'
        },
        PushToken: {
            type: 'string'
        },
        PushTokenType: {
            type: 'string'
        },
        SupportsSync: {
            type: 'boolean'
        },
        DeviceProfile: {
            '$ref': '#/components/schemas/DeviceProfile'
        },
        IconUrl: {
            type: 'string'
        },
        AppId: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Session.ClientCapabilities'
} as const;

export const $PlaybackProgressInfo = {
    type: 'object',
    properties: {
        CanSeek: {
            type: 'boolean',
            description: 'A value indicating whether this instance can seek.'
        },
        NowPlayingQueue: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/QueueItem'
            }
        },
        PlaylistItemId: {
            type: 'string'
        },
        SessionId: {
            type: 'string',
            description: 'The session id.'
        },
        AudioStreamIndex: {
            type: 'integer',
            description: 'The index of the audio stream.',
            format: 'int32',
            nullable: true
        },
        SubtitleStreamIndex: {
            type: 'integer',
            description: 'The index of the subtitle stream.',
            format: 'int32',
            nullable: true
        },
        IsPaused: {
            type: 'boolean',
            description: 'A value indicating whether this instance is paused.'
        },
        PlaylistIndex: {
            type: 'integer',
            format: 'int32'
        },
        PlaylistLength: {
            type: 'integer',
            format: 'int32'
        },
        IsMuted: {
            type: 'boolean',
            description: 'A value indicating whether this instance is muted.'
        },
        RunTimeTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        PlaybackStartTimeTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        VolumeLevel: {
            type: 'integer',
            description: 'The volume level.',
            format: 'int32',
            nullable: true
        },
        Brightness: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        AspectRatio: {
            type: 'string'
        },
        EventName: {
            '$ref': '#/components/schemas/ProgressEvent'
        },
        PlayMethod: {
            '$ref': '#/components/schemas/PlayMethod'
        },
        RepeatMode: {
            '$ref': '#/components/schemas/RepeatMode'
        },
        SleepTimerMode: {
            '$ref': '#/components/schemas/SleepTimerMode'
        },
        SleepTimerEndTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        Shuffle: {
            type: 'boolean'
        },
        SubtitleOffset: {
            type: 'integer',
            format: 'int32'
        },
        PlaybackRate: {
            type: 'number',
            format: 'double'
        },
        PlaylistItemIds: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        PlaySessionId: {
            type: 'string',
            description: 'The play session identifier.'
        },
        ItemId: {
            type: 'string',
            description: 'The item identifier.'
        },
        LiveStreamId: {
            type: 'string',
            description: 'The live stream identifier.'
        },
        MediaSourceId: {
            type: 'string',
            description: 'The media version identifier.'
        },
        Item: {
            '$ref': '#/components/schemas/BaseItemDto'
        },
        PositionTicks: {
            type: 'integer',
            description: 'The position ticks.',
            format: 'int64',
            nullable: true
        }
    },
    description: `Class PlaybackProgressInfo.
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Session.PlaybackProgressInfo'
} as const;

export const $PlaybackStopInfo = {
    type: 'object',
    properties: {
        NowPlayingQueue: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/QueueItem'
            }
        },
        PlaylistItemId: {
            type: 'string'
        },
        PlaylistIndex: {
            type: 'integer',
            format: 'int32'
        },
        PlaylistLength: {
            type: 'integer',
            format: 'int32'
        },
        SessionId: {
            type: 'string',
            description: 'The session id.'
        },
        IsAutomated: {
            type: 'boolean'
        },
        Failed: {
            type: 'boolean',
            description: 'A value indicating whether this `MediaBrowser.Model.Session.PlaybackStopInfo` is failed.'
        },
        NextMediaType: {
            type: 'string'
        },
        PlaySessionId: {
            type: 'string',
            description: 'The play session identifier.'
        },
        ItemId: {
            type: 'string',
            description: 'The item identifier.'
        },
        LiveStreamId: {
            type: 'string',
            description: 'The live stream identifier.'
        },
        MediaSourceId: {
            type: 'string',
            description: 'The media version identifier.'
        },
        Item: {
            '$ref': '#/components/schemas/BaseItemDto'
        },
        PositionTicks: {
            type: 'integer',
            description: 'The position ticks.',
            format: 'int64',
            nullable: true
        }
    },
    description: `Class PlaybackStopInfo.
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Session.PlaybackStopInfo'
} as const;

export const $SyncedItemProgress = {
    type: 'object',
    properties: {
        Progress: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        Status: {
            '$ref': '#/components/schemas/SyncJobItemStatus'
        }
    },
    'x-internal-ref-name': 'Emby.Server.Sync.Model.SyncedItemProgress'
} as const;

export const $SyncedItem = {
    type: 'object',
    properties: {
        ServerId: {
            type: 'string'
        },
        SyncJobId: {
            type: 'integer',
            format: 'int64'
        },
        SyncJobName: {
            type: 'string'
        },
        SyncJobDateCreated: {
            type: 'string',
            format: 'date-time'
        },
        SyncJobItemId: {
            type: 'integer',
            format: 'int64'
        },
        OriginalFileName: {
            type: 'string'
        },
        Item: {
            '$ref': '#/components/schemas/BaseItemDto'
        },
        UserId: {
            type: 'string'
        },
        AdditionalFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ItemFileInfo'
            }
        }
    },
    'x-internal-ref-name': 'Emby.Server.Sync.Model.SyncedItem'
} as const;

export const $QueryResult_LogFile = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LogFile'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $LogFile = {
    type: 'object',
    properties: {
        DateCreated: {
            type: 'string',
            description: 'The date created.',
            format: 'date-time'
        },
        DateModified: {
            type: 'string',
            description: 'The date modified.',
            format: 'date-time'
        },
        Size: {
            type: 'integer',
            description: 'The size.',
            format: 'int64'
        },
        Name: {
            type: 'string',
            description: 'The name.'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.System.LogFile'
} as const;

export const $PublicSystemInfo = {
    type: 'object',
    properties: {
        LocalAddress: {
            type: 'string',
            description: 'The local address.'
        },
        LocalAddresses: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        WanAddress: {
            type: 'string',
            description: 'The wan address.'
        },
        RemoteAddresses: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ServerName: {
            type: 'string',
            description: 'The name of the server.'
        },
        Version: {
            type: 'string',
            description: 'The version.'
        },
        Id: {
            type: 'string',
            description: 'The id.'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.System.PublicSystemInfo'
} as const;

export const $QueryResult_ActivityLogEntry = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ActivityLogEntry'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $ActivityLogEntry = {
    type: 'object',
    properties: {
        Id: {
            type: 'integer',
            description: 'The identifier.',
            format: 'int64'
        },
        Name: {
            type: 'string',
            description: 'The name.'
        },
        Overview: {
            type: 'string',
            description: 'The overview.'
        },
        ShortOverview: {
            type: 'string',
            description: 'The short overview.'
        },
        Type: {
            type: 'string',
            description: 'The type.'
        },
        ItemId: {
            type: 'string',
            description: 'The item identifier.'
        },
        Date: {
            type: 'string',
            description: 'The date.',
            format: 'date-time'
        },
        UserId: {
            type: 'string',
            description: 'The user identifier.'
        },
        UserPrimaryImageTag: {
            type: 'string',
            description: 'The user primary image tag.'
        },
        Severity: {
            '$ref': '#/components/schemas/Logging.LogSeverity'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Activity.ActivityLogEntry'
} as const;

export const $Logging_LogSeverity = {
    enum: ['Info', 'Debug', 'Warn', 'Error', 'Fatal'],
    type: 'string',
    description: `Enum LogSeverity
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Logging.LogSeverity'
} as const;

export const $AuthenticateUser = {
    type: 'object',
    properties: {
        Pw: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.Api.AuthenticateUser'
} as const;

export const $UpdateUserPassword = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        NewPw: {
            type: 'string'
        },
        ResetPassword: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'Emby.Api.UpdateUserPassword'
} as const;

export const $ForgotPasswordPin = {
    type: 'object',
    properties: {
        Pin: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.Api.ForgotPasswordPin'
} as const;

export const $PinRedeemResult = {
    type: 'object',
    properties: {
        Success: {
            type: 'boolean',
            description: 'A value indicating whether this `MediaBrowser.Model.Users.PinRedeemResult` is success.'
        },
        UsersReset: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'The users reset.'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Users.PinRedeemResult'
} as const;

export const $ContentSection = {
    type: 'object',
    properties: {
        Name: {
            type: 'string'
        },
        Subtitle: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        SectionType: {
            type: 'string'
        },
        CollectionType: {
            type: 'string'
        },
        ViewType: {
            type: 'string'
        },
        Monitor: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        CardSizeOffset: {
            type: 'integer',
            format: 'int32'
        },
        ScrollDirection: {
            '$ref': '#/components/schemas/ScrollDirection'
        },
        ParentItem: {
            '$ref': '#/components/schemas/BaseItemDto'
        },
        TextInfo: {
            '$ref': '#/components/schemas/TextSectionInfo'
        },
        PremiumFeature: {
            type: 'string'
        },
        PremiumMessage: {
            type: 'string'
        },
        RefreshInterval: {
            type: 'integer',
            format: 'int32',
            nullable: true
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Entities.ContentSection'
} as const;

export const $ScrollDirection = {
    enum: ['Horizontal', 'Vertical'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Entities.ScrollDirection'
} as const;

export const $TextSectionInfo = {
    type: 'object',
    properties: {
        Text: {
            type: 'string'
        },
        Name: {
            type: 'string'
        },
        Id: {
            type: 'string'
        },
        Level: {
            '$ref': '#/components/schemas/Notifications.NotificationLevel'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Entities.TextSectionInfo'
} as const;

export const $Notifications_NotificationLevel = {
    enum: ['Normal', 'Warning', 'Error'],
    type: 'string',
    'x-internal-ref-name': 'MediaBrowser.Model.Notifications.NotificationLevel'
} as const;

export const $UserLibrary_AddTags = {
    type: 'object',
    properties: {
        Tags: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NameIdPair'
            }
        }
    },
    'x-internal-ref-name': 'Emby.Api.UserLibrary.AddTags'
} as const;

export const $UserLibrary_RemoveTags = {
    type: 'object',
    properties: {
        Tags: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NameIdPair'
            }
        }
    },
    'x-internal-ref-name': 'Emby.Api.UserLibrary.RemoveTags'
} as const;

export const $ImageProviderInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'The name.'
        },
        SupportedImages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ImageType'
            }
        }
    },
    description: `Class ImageProviderInfo.
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Providers.ImageProviderInfo'
} as const;

export const $Images_BaseDownloadRemoteImage = {
    type: 'object',
    properties: {
        ImageIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        }
    },
    'x-internal-ref-name': 'Emby.Api.Images.BaseDownloadRemoteImage'
} as const;

export const $Library_UpdateMediaPath = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        PathInfo: {
            '$ref': '#/components/schemas/MediaPathInfo'
        }
    },
    'x-internal-ref-name': 'Emby.Api.Library.UpdateMediaPath'
} as const;

export const $Library_RemoveMediaPath = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        Path: {
            type: 'string'
        },
        RefreshLibrary: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'Emby.Api.Library.RemoveMediaPath'
} as const;

export const $PlaystateCommand = {
    enum: ['Stop', 'Pause', 'Unpause', 'NextTrack', 'PreviousTrack', 'Seek', 'Rewind', 'FastForward', 'PlayPause', 'SeekRelative'],
    type: 'string',
    description: `Enum PlaystateCommand
`,
    'x-internal-ref-name': 'MediaBrowser.Model.Session.PlaystateCommand'
} as const;

export const $PlaystateRequest = {
    type: 'object',
    properties: {
        Command: {
            '$ref': '#/components/schemas/PlaystateCommand'
        },
        SeekPositionTicks: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        ControllingUserId: {
            type: 'string',
            description: 'The controlling user identifier.'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Session.PlaystateRequest'
} as const;

export const $QueryResult_String = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $Connect_UserLinkResult = {
    type: 'object',
    properties: {
        IsPending: {
            type: 'boolean'
        },
        IsNewUserInvitation: {
            type: 'boolean'
        },
        GuestDisplayName: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Controller.Connect.UserLinkResult'
} as const;

export const $RemoteSubtitleInfo = {
    type: 'object',
    properties: {
        ThreeLetterISOLanguageName: {
            type: 'string',
            description: 'Use language instead to return the language specified by the subtitle provider',
            deprecated: true
        },
        Id: {
            type: 'string'
        },
        ProviderName: {
            type: 'string'
        },
        Name: {
            type: 'string'
        },
        Format: {
            type: 'string'
        },
        Author: {
            type: 'string'
        },
        Comment: {
            type: 'string'
        },
        DateCreated: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        CommunityRating: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        DownloadCount: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        IsHashMatch: {
            type: 'boolean',
            nullable: true
        },
        IsForced: {
            type: 'boolean',
            nullable: true
        },
        IsHearingImpaired: {
            type: 'boolean',
            nullable: true
        },
        Language: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'MediaBrowser.Model.Providers.RemoteSubtitleInfo'
} as const;

export const $Subtitles_SubtitleDownloadResult = {
    type: 'object',
    properties: {
        NewIndex: {
            type: 'integer',
            format: 'int32',
            nullable: true
        }
    },
    'x-internal-ref-name': 'Emby.Api.Subtitles.SubtitleDownloadResult'
} as const;

export const $Api_SetChannelDisabled = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        ManagementId: {
            type: 'string'
        },
        Disabled: {
            type: 'boolean'
        }
    },
    'x-internal-ref-name': 'Emby.LiveTV.Api.SetChannelDisabled'
} as const;

export const $QueryResult_ChannelManagementInfo = {
    type: 'object',
    properties: {
        Items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ChannelManagementInfo'
            }
        },
        TotalRecordCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $ChannelManagementInfo = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        Name: {
            type: 'string'
        }
    },
    'x-internal-ref-name': 'Emby.LiveTV.ChannelManagementInfo'
} as const;

export const $Api_SetChannelSortIndex = {
    type: 'object',
    properties: {
        Id: {
            type: 'string'
        },
        ManagementId: {
            type: 'string'
        },
        NewIndex: {
            type: 'integer',
            format: 'int32'
        }
    },
    'x-internal-ref-name': 'Emby.LiveTV.Api.SetChannelSortIndex'
} as const;

export const $Api_OnPlaybackProgress = {
    type: 'object',
    properties: {
        PlaylistIndex: {
            type: 'integer',
            format: 'int32'
        },
        PlaylistLength: {
            type: 'integer',
            format: 'int32'
        },
        Shuffle: {
            type: 'boolean'
        },
        SleepTimerMode: {
            '$ref': '#/components/schemas/SleepTimerMode'
        },
        SleepTimerEndTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        EventName: {
            '$ref': '#/components/schemas/ProgressEvent'
        }
    },
    'x-internal-ref-name': 'Emby.Server.MediaEncoding.Api.OnPlaybackProgress'
} as const;