// This file is auto-generated by @hey-api/openapi-ts

export type QueryResult_BaseItemDto = {
    Items?: Array<BaseItemDto>;
    TotalRecordCount?: number;
};

export type BaseItemDto = {
    Name?: string;
    OriginalTitle?: string;
    ServerId?: string;
    Id?: string;
    Etag?: string;
    PlaylistItemId?: string;
    DateCreated?: string | null;
    ExtraType?: string;
    AirsBeforeSeasonNumber?: number | null;
    AirsAfterSeasonNumber?: number | null;
    AirsBeforeEpisodeNumber?: number | null;
    DisplaySpecialsWithSeasons?: boolean | null;
    CanDelete?: boolean | null;
    CanDownload?: boolean | null;
    HasSubtitles?: boolean | null;
    SupportsResume?: boolean | null;
    PreferredMetadataLanguage?: string;
    PreferredMetadataCountryCode?: string;
    SupportsSync?: boolean | null;
    Container?: string;
    SortName?: string;
    ForcedSortName?: string;
    Video3DFormat?: 'HalfSideBySide' | 'FullSideBySide' | 'FullTopAndBottom' | 'HalfTopAndBottom' | 'MVC';
    PremiereDate?: string | null;
    ExternalUrls?: Array<ExternalUrl>;
    MediaSources?: Array<MediaSourceInfo>;
    CriticRating?: number | null;
    GameSystemId?: number | null;
    GameSystem?: string;
    ProductionLocations?: Array<(string)>;
    Path?: string;
    OfficialRating?: string;
    CustomRating?: string;
    ChannelId?: string;
    ChannelName?: string;
    Overview?: string;
    Taglines?: Array<(string)>;
    Genres?: Array<(string)>;
    CommunityRating?: number | null;
    RunTimeTicks?: number | null;
    PlayAccess?: 'Full' | 'None';
    AspectRatio?: string;
    ProductionYear?: number | null;
    Number?: string;
    ChannelNumber?: string;
    IndexNumber?: number | null;
    IndexNumberEnd?: number | null;
    ParentIndexNumber?: number | null;
    RemoteTrailers?: Array<MediaUrl>;
    ProviderIds?: {
        [key: string]: (string);
    };
    IsFolder?: boolean | null;
    ParentId?: string;
    Type?: string;
    People?: Array<BaseItemPerson>;
    Studios?: Array<NameLongIdPair>;
    GenreItems?: Array<NameLongIdPair>;
    ParentLogoItemId?: string;
    ParentBackdropItemId?: string;
    ParentBackdropImageTags?: Array<(string)>;
    LocalTrailerCount?: number | null;
    UserData?: UserItemDataDto;
    RecursiveItemCount?: number | null;
    ChildCount?: number | null;
    SeriesName?: string;
    SeriesId?: string;
    SeasonId?: string;
    SpecialFeatureCount?: number | null;
    DisplayPreferencesId?: string;
    Status?: string;
    AirTime?: string;
    AirDays?: Array<('Sunday' | 'Monday' | 'Tuesday' | 'Wednesday' | 'Thursday' | 'Friday' | 'Saturday')>;
    Tags?: Array<(string)>;
    PrimaryImageAspectRatio?: number | null;
    Artists?: Array<(string)>;
    ArtistItems?: Array<NameIdPair>;
    Album?: string;
    CollectionType?: string;
    DisplayOrder?: string;
    AlbumId?: string;
    AlbumPrimaryImageTag?: string;
    SeriesPrimaryImageTag?: string;
    AlbumArtist?: string;
    AlbumArtists?: Array<NameIdPair>;
    SeasonName?: string;
    MediaStreams?: Array<MediaStream>;
    PartCount?: number | null;
    ImageTags?: {
        [key: string]: (string);
    };
    BackdropImageTags?: Array<(string)>;
    ParentLogoImageTag?: string;
    ParentArtItemId?: string;
    ParentArtImageTag?: string;
    SeriesThumbImageTag?: string;
    SeriesStudio?: string;
    ParentThumbItemId?: string;
    ParentThumbImageTag?: string;
    ParentPrimaryImageItemId?: string;
    ParentPrimaryImageTag?: string;
    Chapters?: Array<ChapterInfo>;
    LocationType?: 'FileSystem' | 'Virtual';
    MediaType?: string;
    EndDate?: string | null;
    LockedFields?: Array<('Cast' | 'Genres' | 'ProductionLocations' | 'Studios' | 'Tags' | 'Name' | 'Overview' | 'Runtime' | 'OfficialRating')>;
    LockData?: boolean | null;
    Width?: number | null;
    Height?: number | null;
    CameraMake?: string;
    CameraModel?: string;
    Software?: string;
    ExposureTime?: number | null;
    FocalLength?: number | null;
    ImageOrientation?: 'TopLeft' | 'TopRight' | 'BottomRight' | 'BottomLeft' | 'LeftTop' | 'RightTop' | 'RightBottom' | 'LeftBottom';
    Aperture?: number | null;
    ShutterSpeed?: number | null;
    Latitude?: number | null;
    Longitude?: number | null;
    Altitude?: number | null;
    IsoSpeedRating?: number | null;
    SeriesTimerId?: string;
    ChannelPrimaryImageTag?: string;
    StartDate?: string | null;
    CompletionPercentage?: number | null;
    IsRepeat?: boolean | null;
    IsNew?: boolean | null;
    EpisodeTitle?: string;
    IsMovie?: boolean | null;
    IsSports?: boolean | null;
    IsSeries?: boolean | null;
    IsLive?: boolean | null;
    IsNews?: boolean | null;
    IsKids?: boolean | null;
    IsPremiere?: boolean | null;
    TimerId?: string;
    CurrentProgram?: BaseItemDto;
    MovieCount?: number | null;
    SeriesCount?: number | null;
    AlbumCount?: number | null;
    SongCount?: number | null;
    MusicVideoCount?: number | null;
};

export type ExternalUrl = {
    Name?: string;
    Url?: string;
};

export type MediaSourceInfo = {
    Protocol?: 'File' | 'Http' | 'Rtmp' | 'Rtsp' | 'Udp' | 'Rtp' | 'Ftp' | 'Mms';
    Id?: string;
    Path?: string;
    EncoderPath?: string;
    EncoderProtocol?: 'File' | 'Http' | 'Rtmp' | 'Rtsp' | 'Udp' | 'Rtp' | 'Ftp' | 'Mms';
    Type?: 'Default' | 'Grouping' | 'Placeholder';
    Container?: string;
    Size?: number | null;
    Name?: string;
    IsRemote?: boolean;
    RunTimeTicks?: number | null;
    SupportsTranscoding?: boolean;
    SupportsDirectStream?: boolean;
    SupportsDirectPlay?: boolean;
    IsInfiniteStream?: boolean;
    RequiresOpening?: boolean;
    OpenToken?: string;
    RequiresClosing?: boolean;
    LiveStreamId?: string;
    BufferMs?: number | null;
    RequiresLooping?: boolean;
    SupportsProbing?: boolean;
    Video3DFormat?: 'HalfSideBySide' | 'FullSideBySide' | 'FullTopAndBottom' | 'HalfTopAndBottom' | 'MVC';
    MediaStreams?: Array<MediaStream>;
    Formats?: Array<(string)>;
    Bitrate?: number | null;
    Timestamp?: 'None' | 'Zero' | 'Valid';
    RequiredHttpHeaders?: {
        [key: string]: (string);
    };
    TranscodingUrl?: string;
    TranscodingSubProtocol?: string;
    TranscodingContainer?: string;
    AnalyzeDurationMs?: number | null;
    ReadAtNativeFramerate?: boolean;
    DefaultAudioStreamIndex?: number | null;
    DefaultSubtitleStreamIndex?: number | null;
};

export type MediaStream = {
    Codec?: string;
    CodecTag?: string;
    Language?: string;
    ColorTransfer?: string;
    ColorPrimaries?: string;
    ColorSpace?: string;
    Comment?: string;
    TimeBase?: string;
    CodecTimeBase?: string;
    Title?: string;
    Extradata?: string;
    VideoRange?: string;
    DisplayTitle?: string;
    DisplayLanguage?: string;
    NalLengthSize?: string;
    IsInterlaced?: boolean;
    IsAVC?: boolean | null;
    ChannelLayout?: string;
    BitRate?: number | null;
    BitDepth?: number | null;
    RefFrames?: number | null;
    PacketLength?: number | null;
    Channels?: number | null;
    SampleRate?: number | null;
    IsDefault?: boolean;
    IsForced?: boolean;
    Height?: number | null;
    Width?: number | null;
    AverageFrameRate?: number | null;
    RealFrameRate?: number | null;
    Profile?: string;
    Type?: 'Audio' | 'Video' | 'Subtitle' | 'EmbeddedImage';
    AspectRatio?: string;
    Index?: number;
    Score?: number | null;
    IsExternal?: boolean;
    DeliveryMethod?: 'Encode' | 'Embed' | 'External' | 'Hls';
    DeliveryUrl?: string;
    IsExternalUrl?: boolean | null;
    IsTextSubtitleStream?: boolean;
    SupportsExternalStream?: boolean;
    Path?: string;
    PixelFormat?: string;
    Level?: number | null;
    IsAnamorphic?: boolean | null;
};

export type MediaUrl = {
    Url?: string;
    Name?: string;
};

export type BaseItemPerson = {
    Name?: string;
    Id?: string;
    Role?: string;
    Type?: 'Actor' | 'Director' | 'Writer' | 'Producer' | 'GuestStar' | 'Composer' | 'Conductor' | 'Lyricist';
    PrimaryImageTag?: string;
};

export type NameLongIdPair = {
    Name?: string;
    Id?: number;
};

export type UserItemDataDto = {
    Rating?: number | null;
    PlayedPercentage?: number | null;
    UnplayedItemCount?: number | null;
    PlaybackPositionTicks?: number;
    PlayCount?: number;
    IsFavorite?: boolean;
    Likes?: boolean | null;
    LastPlayedDate?: string | null;
    Played?: boolean;
    Key?: string;
    ItemId?: string;
};

export type NameIdPair = {
    Name?: string;
    Id?: string;
};

export type ChapterInfo = {
    StartPositionTicks?: number;
    Name?: string;
    ImageTag?: string;
};

export type QueryResult_UserLibrary_TagItem = {
    Items?: Array<UserLibrary_TagItem>;
    TotalRecordCount?: number;
};

export type UserLibrary_TagItem = {
    Name?: string;
};

export type Collections_CollectionCreationResult = {
    Id?: string;
};

export type QueryResult_Devices_DeviceInfo = {
    Items?: Array<Devices_DeviceInfo>;
    TotalRecordCount?: number;
};

export type Devices_DeviceInfo = {
    Name?: string;
    Id?: string;
    LastUserName?: string;
    AppName?: string;
    AppVersion?: string;
    LastUserId?: string;
    DateLastActivity?: string;
    IconUrl?: string;
};

export type QueryResult_UserLibrary_OfficialRatingItem = {
    Items?: Array<UserLibrary_OfficialRatingItem>;
    TotalRecordCount?: number;
};

export type UserLibrary_OfficialRatingItem = {
    Name?: string;
};

export type Updates_PackageInfo = {
    id?: string;
    name?: string;
    shortDescription?: string;
    overview?: string;
    isPremium?: boolean;
    adult?: boolean;
    richDescUrl?: string;
    thumbImage?: string;
    previewImage?: string;
    type?: string;
    targetFilename?: string;
    owner?: string;
    category?: string;
    tileColor?: string;
    featureId?: string;
    regInfo?: string;
    price?: number;
    targetSystem?: 'Server' | 'MBTheater' | 'MBClassic';
    guid?: string;
    totalRatings?: number | null;
    avgRating?: number;
    isRegistered?: boolean;
    expDate?: string;
    versions?: Array<Updates_PackageVersionInfo>;
    enableInAppStore?: boolean;
    installs?: number;
};

export type Updates_PackageVersionInfo = {
    name?: string;
    guid?: string;
    versionStr?: string;
    classification?: 'Release' | 'Beta' | 'Dev';
    description?: string;
    requiredVersionStr?: string;
    sourceUrl?: string;
    checksum?: string;
    targetFilename?: string;
    infoUrl?: string;
    runtimes?: string;
};

export type Playlists_PlaylistCreationResult = {
    Id?: string;
};

export type Plugins_PluginInfo = {
    Name?: string;
    Version?: string;
    ConfigurationFileName?: string;
    Description?: string;
    Id?: string;
    ImageTag?: string;
};

export type Tasks_TaskInfo = {
    Name?: string;
    State?: 'Idle' | 'Cancelling' | 'Running';
    CurrentProgressPercentage?: number | null;
    Id?: string;
    LastExecutionResult?: Tasks_TaskResult;
    Triggers?: Array<Tasks_TaskTriggerInfo>;
    Description?: string;
    Category?: string;
    IsHidden?: boolean;
    Key?: string;
};

export type Tasks_TaskResult = {
    StartTimeUtc?: string;
    EndTimeUtc?: string;
    Status?: 'Completed' | 'Failed' | 'Cancelled' | 'Aborted';
    Name?: string;
    Key?: string;
    Id?: string;
    ErrorMessage?: string;
    LongErrorMessage?: string;
};

export type Tasks_TaskTriggerInfo = {
    Type?: string;
    TimeOfDayTicks?: number | null;
    IntervalTicks?: number | null;
    SystemEvent?: 'WakeFromSleep' | 'DisplayConfigurationChange';
    DayOfWeek?: 'Sunday' | 'Monday' | 'Tuesday' | 'Wednesday' | 'Thursday' | 'Friday' | 'Saturday';
    MaxRuntimeTicks?: number | null;
};

export type Session_SessionInfo = {
    PlayState?: PlayerStateInfo;
    AdditionalUsers?: Array<SessionUserInfo>;
    Capabilities?: ClientCapabilities;
    RemoteEndPoint?: string;
    PlayableMediaTypes?: Array<(string)>;
    PlaylistItemId?: string;
    Id?: string;
    ServerId?: string;
    UserId?: string;
    UserName?: string;
    UserPrimaryImageTag?: string;
    Client?: string;
    LastActivityDate?: string;
    DeviceName?: string;
    DeviceType?: string;
    NowPlayingItem?: BaseItemDto;
    DeviceId?: string;
    ApplicationVersion?: string;
    AppIconUrl?: string;
    SupportedCommands?: Array<(string)>;
    TranscodingInfo?: TranscodingInfo;
    SupportsRemoteControl?: boolean;
};

export type PlayerStateInfo = {
    PositionTicks?: number | null;
    CanSeek?: boolean;
    IsPaused?: boolean;
    IsMuted?: boolean;
    VolumeLevel?: number | null;
    AudioStreamIndex?: number | null;
    SubtitleStreamIndex?: number | null;
    MediaSourceId?: string;
    PlayMethod?: 'Transcode' | 'DirectStream' | 'DirectPlay';
    RepeatMode?: 'RepeatNone' | 'RepeatAll' | 'RepeatOne';
};

export type SessionUserInfo = {
    UserId?: string;
    UserName?: string;
    UserInternalId?: number;
};

export type ClientCapabilities = {
    PlayableMediaTypes?: Array<(string)>;
    SupportedCommands?: Array<(string)>;
    SupportsMediaControl?: boolean;
    PushToken?: string;
    PushTokenType?: string;
    SupportsPersistentIdentifier?: boolean;
    SupportsSync?: boolean;
    DeviceProfile?: Dlna_DeviceProfile;
    IconUrl?: string;
    AppId?: string;
};

export type Dlna_DeviceProfile = {
    Name?: string;
    Id?: string;
    Identification?: Dlna_DeviceIdentification;
    FriendlyName?: string;
    Manufacturer?: string;
    ManufacturerUrl?: string;
    ModelName?: string;
    ModelDescription?: string;
    ModelNumber?: string;
    ModelUrl?: string;
    SerialNumber?: string;
    EnableAlbumArtInDidl?: boolean;
    EnableSingleAlbumArtLimit?: boolean;
    EnableSingleSubtitleLimit?: boolean;
    SupportedMediaTypes?: string;
    UserId?: string;
    AlbumArtPn?: string;
    MaxAlbumArtWidth?: number;
    MaxAlbumArtHeight?: number;
    MaxIconWidth?: number | null;
    MaxIconHeight?: number | null;
    MaxStreamingBitrate?: number | null;
    MaxStaticBitrate?: number | null;
    MusicStreamingTranscodingBitrate?: number | null;
    MaxStaticMusicBitrate?: number | null;
    SonyAggregationFlags?: string;
    ProtocolInfo?: string;
    TimelineOffsetSeconds?: number;
    RequiresPlainVideoItems?: boolean;
    RequiresPlainFolders?: boolean;
    EnableMSMediaReceiverRegistrar?: boolean;
    IgnoreTranscodeByteRangeRequests?: boolean;
    XmlRootAttributes?: Array<Dlna_XmlAttribute>;
    DirectPlayProfiles?: Array<Dlna_DirectPlayProfile>;
    TranscodingProfiles?: Array<Dlna_TranscodingProfile>;
    ContainerProfiles?: Array<Dlna_ContainerProfile>;
    CodecProfiles?: Array<Dlna_CodecProfile>;
    ResponseProfiles?: Array<Dlna_ResponseProfile>;
    SubtitleProfiles?: Array<Dlna_SubtitleProfile>;
};

export type Dlna_DeviceIdentification = {
    FriendlyName?: string;
    ModelNumber?: string;
    SerialNumber?: string;
    ModelName?: string;
    ModelDescription?: string;
    DeviceDescription?: string;
    ModelUrl?: string;
    Manufacturer?: string;
    ManufacturerUrl?: string;
    Headers?: Array<Dlna_HttpHeaderInfo>;
};

export type Dlna_HttpHeaderInfo = {
    Name?: string;
    Value?: string;
    Match?: 'Equals' | 'Regex' | 'Substring';
};

export type Dlna_XmlAttribute = {
    Name?: string;
    Value?: string;
};

export type Dlna_DirectPlayProfile = {
    Container?: string;
    AudioCodec?: string;
    VideoCodec?: string;
    Type?: 'Audio' | 'Video' | 'Photo';
};

export type Dlna_TranscodingProfile = {
    Container?: string;
    Type?: 'Audio' | 'Video' | 'Photo';
    VideoCodec?: string;
    AudioCodec?: string;
    Protocol?: string;
    EstimateContentLength?: boolean;
    EnableMpegtsM2TsMode?: boolean;
    TranscodeSeekInfo?: 'Auto' | 'Bytes';
    CopyTimestamps?: boolean;
    Context?: 'Streaming' | 'Static';
    MaxAudioChannels?: string;
    MinSegments?: number;
    SegmentLength?: number;
    BreakOnNonKeyFrames?: boolean;
    ManifestSubtitles?: string;
};

export type Dlna_ContainerProfile = {
    Type?: 'Audio' | 'Video' | 'Photo';
    Conditions?: Array<Dlna_ProfileCondition>;
    Container?: string;
};

export type Dlna_ProfileCondition = {
    Condition?: 'Equals' | 'NotEquals' | 'LessThanEqual' | 'GreaterThanEqual' | 'EqualsAny';
    Property?: 'AudioChannels' | 'AudioBitrate' | 'AudioProfile' | 'Width' | 'Height' | 'Has64BitOffsets' | 'PacketLength' | 'VideoBitDepth' | 'VideoBitrate' | 'VideoFramerate' | 'VideoLevel' | 'VideoProfile' | 'VideoTimestamp' | 'IsAnamorphic' | 'RefFrames' | 'NumAudioStreams' | 'NumVideoStreams' | 'IsSecondaryAudio' | 'VideoCodecTag' | 'IsAvc' | 'IsInterlaced' | 'AudioSampleRate' | 'AudioBitDepth';
    Value?: string;
    IsRequired?: boolean;
};

export type Dlna_CodecProfile = {
    Type?: 'Video' | 'VideoAudio' | 'Audio';
    Conditions?: Array<Dlna_ProfileCondition>;
    ApplyConditions?: Array<Dlna_ProfileCondition>;
    Codec?: string;
    Container?: string;
};

export type Dlna_ResponseProfile = {
    Container?: string;
    AudioCodec?: string;
    VideoCodec?: string;
    Type?: 'Audio' | 'Video' | 'Photo';
    OrgPn?: string;
    MimeType?: string;
    Conditions?: Array<Dlna_ProfileCondition>;
};

export type Dlna_SubtitleProfile = {
    Format?: string;
    Method?: 'Encode' | 'Embed' | 'External' | 'Hls';
    DidlMode?: string;
    Language?: string;
    Container?: string;
};

export type TranscodingInfo = {
    AudioCodec?: string;
    VideoCodec?: string;
    Container?: string;
    IsVideoDirect?: boolean;
    IsAudioDirect?: boolean;
    Bitrate?: number | null;
    Framerate?: number | null;
    CompletionPercentage?: number | null;
    TranscodingPositionTicks?: number | null;
    TranscodingStartPositionTicks?: number | null;
    Width?: number | null;
    Height?: number | null;
    AudioChannels?: number | null;
    TranscodeReasons?: Array<('ContainerNotSupported' | 'VideoCodecNotSupported' | 'AudioCodecNotSupported' | 'ContainerBitrateExceedsLimit' | 'AudioBitrateNotSupported' | 'AudioChannelsNotSupported' | 'VideoResolutionNotSupported' | 'UnknownVideoStreamInfo' | 'UnknownAudioStreamInfo' | 'AudioProfileNotSupported' | 'AudioSampleRateNotSupported' | 'AnamorphicVideoNotSupported' | 'InterlacedVideoNotSupported' | 'SecondaryAudioNotSupported' | 'RefFramesNotSupported' | 'VideoBitDepthNotSupported' | 'VideoBitrateNotSupported' | 'VideoFramerateNotSupported' | 'VideoLevelNotSupported' | 'VideoProfileNotSupported' | 'AudioBitDepthNotSupported' | 'SubtitleCodecNotSupported' | 'DirectPlayError')>;
    CurrentCpuUsage?: number | null;
    AverageCpuUsage?: number | null;
    CpuHistory?: Array<Tuple_Double_Double>;
    CurrentThrottle?: number | null;
    VideoDecoder?: string;
    VideoDecoderIsHardware?: boolean;
    VideoDecoderMediaType?: string;
    VideoDecoderHwAccel?: string;
    VideoEncoder?: string;
    VideoEncoderIsHardware?: boolean;
    VideoEncoderMediaType?: string;
    VideoEncoderHwAccel?: string;
};

export type Tuple_Double_Double = {
    Item1?: number;
    Item2?: number;
};

export type UserDto = {
    Name?: string;
    ServerId?: string;
    ServerName?: string;
    ConnectUserName?: string;
    ConnectLinkType?: 'LinkedUser' | 'Guest';
    Id?: string;
    PrimaryImageTag?: string;
    HasPassword?: boolean;
    HasConfiguredPassword?: boolean;
    HasConfiguredEasyPassword?: boolean;
    EnableAutoLogin?: boolean | null;
    LastLoginDate?: string | null;
    LastActivityDate?: string | null;
    Configuration?: Configuration_UserConfiguration;
    Policy?: Users_UserPolicy;
    PrimaryImageAspectRatio?: number | null;
};

export type Configuration_UserConfiguration = {
    AudioLanguagePreference?: string;
    PlayDefaultAudioTrack?: boolean;
    SubtitleLanguagePreference?: string;
    DisplayMissingEpisodes?: boolean;
    GroupedFolders?: Array<(string)>;
    SubtitleMode?: 'Default' | 'Always' | 'OnlyForced' | 'None' | 'Smart';
    DisplayCollectionsView?: boolean;
    EnableLocalPassword?: boolean;
    OrderedViews?: Array<(string)>;
    LatestItemsExcludes?: Array<(string)>;
    MyMediaExcludes?: Array<(string)>;
    HidePlayedInLatest?: boolean;
    RememberAudioSelections?: boolean;
    RememberSubtitleSelections?: boolean;
    EnableNextEpisodeAutoPlay?: boolean;
};

export type Users_UserPolicy = {
    IsAdministrator?: boolean;
    IsHidden?: boolean;
    IsHiddenRemotely?: boolean;
    IsDisabled?: boolean;
    MaxParentalRating?: number | null;
    BlockedTags?: Array<(string)>;
    EnableUserPreferenceAccess?: boolean;
    AccessSchedules?: Array<Configuration_AccessSchedule>;
    BlockUnratedItems?: Array<('Movie' | 'Trailer' | 'Series' | 'Music' | 'Game' | 'Book' | 'LiveTvChannel' | 'LiveTvProgram' | 'ChannelContent' | 'Other')>;
    EnableRemoteControlOfOtherUsers?: boolean;
    EnableSharedDeviceControl?: boolean;
    EnableRemoteAccess?: boolean;
    EnableLiveTvManagement?: boolean;
    EnableLiveTvAccess?: boolean;
    EnableMediaPlayback?: boolean;
    EnableAudioPlaybackTranscoding?: boolean;
    EnableVideoPlaybackTranscoding?: boolean;
    EnablePlaybackRemuxing?: boolean;
    EnableContentDeletion?: boolean;
    EnableContentDeletionFromFolders?: Array<(string)>;
    EnableContentDownloading?: boolean;
    EnableSubtitleDownloading?: boolean;
    EnableSubtitleManagement?: boolean;
    EnableSyncTranscoding?: boolean;
    EnableMediaConversion?: boolean;
    EnabledDevices?: Array<(string)>;
    EnableAllDevices?: boolean;
    EnabledChannels?: Array<(string)>;
    EnableAllChannels?: boolean;
    EnabledFolders?: Array<(string)>;
    EnableAllFolders?: boolean;
    InvalidLoginAttemptCount?: number;
    EnablePublicSharing?: boolean;
    BlockedMediaFolders?: Array<(string)>;
    BlockedChannels?: Array<(string)>;
    RemoteClientBitrateLimit?: number;
    AuthenticationProviderId?: string;
    ExcludedSubFolders?: Array<(string)>;
    DisablePremiumFeatures?: boolean;
};

export type Configuration_AccessSchedule = {
    DayOfWeek?: 'Sunday' | 'Monday' | 'Tuesday' | 'Wednesday' | 'Thursday' | 'Friday' | 'Saturday' | 'Everyday' | 'Weekday' | 'Weekend';
    StartHour?: number;
    EndHour?: number;
};

export type NameValuePair = {
    Name?: string;
    Value?: string;
};

export type Branding_BrandingOptions = {
    LoginDisclaimer?: string;
    CustomCss?: string;
};

export type Connect_ConnectAuthenticationExchangeResult = {
    LocalUserId?: string;
    AccessToken?: string;
};

export type Devices_DeviceOptions = {
    CustomName?: string;
};

export type Devices_ContentUploadHistory = {
    DeviceId?: string;
    FilesUploaded?: Array<Devices_LocalFileInfo>;
};

export type Devices_LocalFileInfo = {
    Name?: string;
    Id?: string;
    Album?: string;
    MimeType?: string;
};

export type DisplayPreferences = {
    Id?: string;
    ViewType?: string;
    SortBy?: string;
    IndexBy?: string;
    RememberIndexing?: boolean;
    PrimaryImageHeight?: number;
    PrimaryImageWidth?: number;
    CustomPrefs?: {
        [key: string]: (string);
    };
    ScrollDirection?: 'Horizontal' | 'Vertical';
    ShowBackdrop?: boolean;
    RememberSorting?: boolean;
    SortOrder?: 'Ascending' | 'Descending';
    ShowSidebar?: boolean;
    Client?: string;
};

export type Dlna_DeviceProfileInfo = {
    Id?: string;
    Name?: string;
    Type?: 'System' | 'User';
};

export type ValidatePath = {
    ValidateWriteable?: boolean;
    IsFile?: boolean | null;
};

export type DefaultDirectoryBrowserInfo = {
    Path?: string;
};

export type IO_FileSystemEntryInfo = {
    Name?: string;
    Path?: string;
    Type?: 'File' | 'Directory' | 'NetworkComputer' | 'NetworkShare';
};

export type GameSystemSummary = {
    Name?: string;
    DisplayName?: string;
    GameCount?: number;
    GameFileExtensions?: Array<(string)>;
    ClientInstalledGameCount?: number;
};

export type ImageByNameInfo = {
    Name?: string;
    Theme?: string;
    Context?: string;
    FileLength?: number;
    Format?: string;
};

export type QueryFilters = {
    Genres?: Array<NameLongIdPair>;
    Studios?: Array<NameLongIdPair>;
    Tags?: Array<(string)>;
};

export type QueryFiltersLegacy = {
    Genres?: Array<(string)>;
    Tags?: Array<(string)>;
    OfficialRatings?: Array<(string)>;
    Years?: Array<(number)>;
};

export type ItemCounts = {
    MovieCount?: number;
    SeriesCount?: number;
    EpisodeCount?: number;
    GameCount?: number;
    ArtistCount?: number;
    ProgramCount?: number;
    GameSystemCount?: number;
    TrailerCount?: number;
    SongCount?: number;
    AlbumCount?: number;
    MusicVideoCount?: number;
    BoxSetCount?: number;
    BookCount?: number;
    ItemCount?: number;
};

export type Library_LibraryOptionsResult = {
    MetadataSavers?: Array<Library_LibraryOptionInfo>;
    MetadataReaders?: Array<Library_LibraryOptionInfo>;
    SubtitleFetchers?: Array<Library_LibraryOptionInfo>;
    TypeOptions?: Array<Library_LibraryTypeOptions>;
};

export type Library_LibraryOptionInfo = {
    Name?: string;
    DefaultEnabled?: boolean;
};

export type Library_LibraryTypeOptions = {
    Type?: string;
    MetadataFetchers?: Array<Library_LibraryOptionInfo>;
    ImageFetchers?: Array<Library_LibraryOptionInfo>;
    SupportedImageTypes?: Array<('Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail')>;
    DefaultImageOptions?: Array<Configuration_ImageOption>;
};

export type Configuration_ImageOption = {
    Type?: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
    Limit?: number;
    MinWidth?: number;
};

export type Library_MediaFolder = {
    Name?: string;
    Id?: string;
    SubFolders?: Array<Library_SubFolder>;
};

export type Library_SubFolder = {
    Name?: string;
    Id?: string;
    Path?: string;
};

export type VirtualFolderInfo = {
    Name?: string;
    Locations?: Array<(string)>;
    CollectionType?: string;
    LibraryOptions?: Configuration_LibraryOptions;
    ItemId?: string;
    PrimaryImageItemId?: string;
    RefreshProgress?: number | null;
    RefreshStatus?: string;
};

export type Configuration_LibraryOptions = {
    EnableArchiveMediaFiles?: boolean;
    EnablePhotos?: boolean;
    EnableRealtimeMonitor?: boolean;
    EnableChapterImageExtraction?: boolean;
    ExtractChapterImagesDuringLibraryScan?: boolean;
    DownloadImagesInAdvance?: boolean;
    PathInfos?: Array<Configuration_MediaPathInfo>;
    SaveLocalMetadata?: boolean;
    SaveLocalThumbnailSets?: boolean;
    ImportMissingEpisodes?: boolean;
    EnableAutomaticSeriesGrouping?: boolean;
    EnableEmbeddedTitles?: boolean;
    EnableAudioResume?: boolean;
    AutomaticRefreshIntervalDays?: number;
    PreferredMetadataLanguage?: string;
    ContentType?: string;
    MetadataCountryCode?: string;
    SeasonZeroDisplayName?: string;
    MetadataSavers?: Array<(string)>;
    DisabledLocalMetadataReaders?: Array<(string)>;
    LocalMetadataReaderOrder?: Array<(string)>;
    DisabledSubtitleFetchers?: Array<(string)>;
    SubtitleFetcherOrder?: Array<(string)>;
    SkipSubtitlesIfEmbeddedSubtitlesPresent?: boolean;
    SkipSubtitlesIfAudioTrackMatches?: boolean;
    SubtitleDownloadLanguages?: Array<(string)>;
    RequirePerfectSubtitleMatch?: boolean;
    SaveSubtitlesWithMedia?: boolean;
    ForcedSubtitlesOnly?: boolean;
    TypeOptions?: Array<Configuration_TypeOptions>;
    CollapseSingleItemFolders?: boolean;
    MinResumePct?: number;
    MaxResumePct?: number;
    MinResumeDurationSeconds?: number;
    ThumbnailImagesIntervalSeconds?: number;
};

export type Configuration_MediaPathInfo = {
    Path?: string;
    NetworkPath?: string;
};

export type Configuration_TypeOptions = {
    Type?: string;
    MetadataFetchers?: Array<(string)>;
    MetadataFetcherOrder?: Array<(string)>;
    ImageFetchers?: Array<(string)>;
    ImageFetcherOrder?: Array<(string)>;
    ImageOptions?: Array<Configuration_ImageOption>;
};

export type Library_AddVirtualFolder = {
    Name?: string;
    CollectionType?: string;
    RefreshLibrary?: boolean;
    Paths?: Array<(string)>;
    LibraryOptions?: Configuration_LibraryOptions;
};

export type MediaInfo_LiveStreamRequest = {
    OpenToken?: string;
    UserId?: string;
    PlaySessionId?: string;
    MaxStreamingBitrate?: number | null;
    StartTimeTicks?: number | null;
    AudioStreamIndex?: number | null;
    SubtitleStreamIndex?: number | null;
    MaxAudioChannels?: number | null;
    ItemId?: number;
    DeviceProfile?: Dlna_DeviceProfile;
    EnableDirectPlay?: boolean;
    EnableDirectStream?: boolean;
    EnableTranscoding?: boolean;
    AllowVideoStreamCopy?: boolean;
    AllowAudioStreamCopy?: boolean;
    DirectPlayProtocols?: Array<('File' | 'Http' | 'Rtmp' | 'Rtsp' | 'Udp' | 'Rtp' | 'Ftp' | 'Mms')>;
};

export type MediaInfo_LiveStreamResponse = {
    MediaSource?: MediaSourceInfo;
};

export type LiveTv_SetChannelMapping = {
    TunerChannelId?: string;
    ProviderChannelId?: string;
};

export type LiveTv_ListingsProviderInfo = {
    Name?: string;
    SetupUrl?: string;
    Id?: string;
    Type?: string;
    Username?: string;
    Password?: string;
    ListingsId?: string;
    ZipCode?: string;
    Country?: string;
    Path?: string;
    EnabledTuners?: Array<(string)>;
    EnableAllTuners?: boolean;
    NewsCategories?: Array<(string)>;
    SportsCategories?: Array<(string)>;
    KidsCategories?: Array<(string)>;
    MovieCategories?: Array<(string)>;
    ChannelMappings?: Array<NameValuePair>;
    MoviePrefix?: string;
    PreferredLanguage?: string;
    UserAgent?: string;
};

export type LiveTv_TunerHostInfo = {
    Id?: string;
    Url?: string;
    Type?: string;
    DeviceId?: string;
    FriendlyName?: string;
    ImportFavoritesOnly?: boolean;
    AllowHWTranscoding?: boolean;
    Source?: string;
    TunerCount?: number;
    UserAgent?: string;
};

export type LiveTv_LiveTvInfo = {
    Services?: Array<LiveTv_LiveTvServiceInfo>;
    IsEnabled?: boolean;
    EnabledUsers?: Array<(string)>;
};

export type LiveTv_LiveTvServiceInfo = {
    Name?: string;
    HomePageUrl?: string;
    Status?: 'Ok' | 'Unavailable';
    StatusMessage?: string;
    Version?: string;
    HasUpdateAvailable?: boolean;
    IsVisible?: boolean;
    Tuners?: Array<(string)>;
};

export type LiveTv_GetPrograms = {
    IsAiring?: boolean | null;
    EnableTotalRecordCount?: boolean;
    SeriesTimerId?: string;
    LibrarySeriesId?: string;
};

export type QueryResult_LiveTv_TimerInfoDto = {
    Items?: Array<LiveTv_TimerInfoDto>;
    TotalRecordCount?: number;
};

export type LiveTv_TimerInfoDto = {
    Status?: 'New' | 'InProgress' | 'Completed' | 'Cancelled' | 'ConflictedOk' | 'ConflictedNotOk' | 'Error';
    SeriesTimerId?: string;
    ExternalSeriesTimerId?: string;
    RunTimeTicks?: number | null;
    ProgramInfo?: BaseItemDto;
    Id?: string;
    Type?: string;
    ServerId?: string;
    ExternalId?: string;
    ChannelId?: string;
    ExternalChannelId?: string;
    ChannelName?: string;
    ChannelPrimaryImageTag?: string;
    ProgramId?: string;
    ExternalProgramId?: string;
    Name?: string;
    Overview?: string;
    StartDate?: string;
    EndDate?: string;
    ServiceName?: string;
    Priority?: number;
    PrePaddingSeconds?: number;
    PostPaddingSeconds?: number;
    IsPrePaddingRequired?: boolean;
    ParentBackdropItemId?: string;
    ParentBackdropImageTags?: Array<(string)>;
    IsPostPaddingRequired?: boolean;
    KeepUntil?: 'UntilDeleted' | 'UntilSpaceNeeded' | 'UntilWatched' | 'UntilDate';
};

export type QueryResult_LiveTv_SeriesTimerInfoDto = {
    Items?: Array<LiveTv_SeriesTimerInfoDto>;
    TotalRecordCount?: number;
};

export type LiveTv_SeriesTimerInfoDto = {
    RecordAnyTime?: boolean;
    SkipEpisodesInLibrary?: boolean;
    RecordAnyChannel?: boolean;
    KeepUpTo?: number;
    RecordNewOnly?: boolean;
    Days?: Array<('Sunday' | 'Monday' | 'Tuesday' | 'Wednesday' | 'Thursday' | 'Friday' | 'Saturday')>;
    DayPattern?: 'Daily' | 'Weekdays' | 'Weekends';
    ImageTags?: {
        [key: string]: (string);
    };
    ParentThumbItemId?: string;
    ParentThumbImageTag?: string;
    ParentPrimaryImageItemId?: string;
    ParentPrimaryImageTag?: string;
    Id?: string;
    Type?: string;
    ServerId?: string;
    ExternalId?: string;
    ChannelId?: string;
    ExternalChannelId?: string;
    ChannelName?: string;
    ChannelPrimaryImageTag?: string;
    ProgramId?: string;
    ExternalProgramId?: string;
    Name?: string;
    Overview?: string;
    StartDate?: string;
    EndDate?: string;
    ServiceName?: string;
    Priority?: number;
    PrePaddingSeconds?: number;
    PostPaddingSeconds?: number;
    IsPrePaddingRequired?: boolean;
    ParentBackdropItemId?: string;
    ParentBackdropImageTags?: Array<(string)>;
    IsPostPaddingRequired?: boolean;
    KeepUntil?: 'UntilDeleted' | 'UntilSpaceNeeded' | 'UntilWatched' | 'UntilDate';
};

export type LiveTv_GuideInfo = {
    StartDate?: string;
    EndDate?: string;
};

export type ParentalRating = {
    Name?: string;
    Value?: number;
};

export type Globalization_LocalizatonOption = {
    Name?: string;
    Value?: string;
};

export type Globalization_CountryInfo = {
    Name?: string;
    DisplayName?: string;
    TwoLetterISORegionName?: string;
    ThreeLetterISORegionName?: string;
};

export type Globalization_CultureDto = {
    Name?: string;
    DisplayName?: string;
    TwoLetterISOLanguageName?: string;
    ThreeLetterISOLanguageName?: string;
    ThreeLetterISOLanguageNames?: Array<(string)>;
};

export type RecommendationDto = {
    Items?: Array<BaseItemDto>;
    RecommendationType?: 'SimilarToRecentlyPlayed' | 'SimilarToLikedItem' | 'HasDirectorFromRecentlyPlayed' | 'HasActorFromRecentlyPlayed' | 'HasLikedDirector' | 'HasLikedActor';
    BaselineItemName?: string;
    CategoryId?: number;
};

export type QueryResult_News_NewsItem = {
    Items?: Array<News_NewsItem>;
    TotalRecordCount?: number;
};

export type News_NewsItem = {
    Title?: string;
    Link?: string;
    Description?: string;
    DescriptionHtml?: string;
    Guid?: string;
    Date?: string;
};

export type Notifications_NotificationTypeInfo = {
    Type?: string;
    Name?: string;
    Enabled?: boolean;
    Category?: string;
    IsBasedOnUserEvent?: boolean;
};

export type Emby_Notifications_Api_NotificationResult = {
    Notifications?: Array<Emby_Notifications_Api_Notification>;
    TotalRecordCount?: number;
};

export type Emby_Notifications_Api_Notification = {
    Id?: string;
    UserId?: string;
    Date?: string;
    IsRead?: boolean;
    Name?: string;
    Description?: string;
    Url?: string;
    Level?: 'Normal' | 'Warning' | 'Error';
};

export type EmbyReports_Api_Model_ReportResult = {
    Rows?: Array<EmbyReports_Api_Model_ReportRow>;
    Headers?: Array<EmbyReports_Api_Model_ReportHeader>;
    Groups?: Array<EmbyReports_Api_Model_ReportGroup>;
    TotalRecordCount?: number;
    IsGrouped?: boolean;
};

export type EmbyReports_Api_Model_ReportRow = {
    Id?: string;
    HasImageTagsBackdrop?: boolean;
    HasImageTagsPrimary?: boolean;
    HasImageTagsLogo?: boolean;
    HasLocalTrailer?: boolean;
    HasLockData?: boolean;
    HasEmbeddedImage?: boolean;
    HasSubtitles?: boolean;
    HasSpecials?: boolean;
    Columns?: Array<EmbyReports_Api_Model_ReportItem>;
    RowType?: 'MusicArtist' | 'MusicAlbum' | 'Book' | 'BoxSet' | 'Episode' | 'Game' | 'Video' | 'Movie' | 'MusicVideo' | 'Trailer' | 'Season' | 'Series' | 'Audio' | 'BaseItem' | 'Artist';
    UserId?: string;
};

export type EmbyReports_Api_Model_ReportItem = {
    Id?: string;
    Name?: string;
    Image?: string;
    CustomTag?: string;
};

export type EmbyReports_Api_Model_ReportHeader = {
    HeaderFieldType?: 'String' | 'Boolean' | 'Date' | 'Time' | 'DateTime' | 'Int' | 'Image' | 'Object' | 'Minutes';
    Name?: string;
    FieldName?: 'None' | 'Path' | 'Name' | 'PremiereDate' | 'DateAdded' | 'ReleaseDate' | 'Runtime' | 'PlayCount' | 'Season' | 'SeasonNumber' | 'Series' | 'Network' | 'Year' | 'ParentalRating' | 'CommunityRating' | 'Trailers' | 'Specials' | 'GameSystem' | 'AlbumArtist' | 'Album' | 'Disc' | 'Track' | 'Audio' | 'EmbeddedImage' | 'Video' | 'Resolution' | 'Subtitles' | 'Genres' | 'Countries' | 'Status' | 'Tracks' | 'EpisodeSeries' | 'EpisodeSeason' | 'EpisodeNumber' | 'AudioAlbumArtist' | 'MusicArtist' | 'AudioAlbum' | 'Locked' | 'ImagePrimary' | 'ImageBackdrop' | 'ImageLogo' | 'Actor' | 'Studios' | 'Composer' | 'Director' | 'GuestStar' | 'Producer' | 'Writer' | 'Artist' | 'Years' | 'ParentalRatings' | 'CommunityRatings' | 'Overview' | 'ShortOverview' | 'Type' | 'Date' | 'UserPrimaryImage' | 'Severity' | 'Item' | 'User' | 'UserId';
    SortField?: string;
    Type?: string;
    ItemViewType?: 'None' | 'Detail' | 'Edit' | 'List' | 'ItemByNameDetails' | 'StatusImage' | 'EmbeddedImage' | 'SubtitleImage' | 'TrailersImage' | 'SpecialsImage' | 'LockDataImage' | 'TagsPrimaryImage' | 'TagsBackdropImage' | 'TagsLogoImage' | 'UserPrimaryImage';
    Visible?: boolean;
    DisplayType?: 'None' | 'Screen' | 'Export' | 'ScreenExport';
    ShowHeaderLabel?: boolean;
    CanGroup?: boolean;
};

export type EmbyReports_Api_Model_ReportGroup = {
    Name?: string;
    Rows?: Array<EmbyReports_Api_Model_ReportRow>;
};

export type Search_SearchHintResult = {
    SearchHints?: Array<Search_SearchHint>;
    TotalRecordCount?: number;
};

export type Search_SearchHint = {
    ItemId?: number;
    Id?: number;
    Name?: string;
    MatchedTerm?: string;
    IndexNumber?: number | null;
    ProductionYear?: number | null;
    ParentIndexNumber?: number | null;
    PrimaryImageTag?: string;
    ThumbImageTag?: string;
    ThumbImageItemId?: string;
    BackdropImageTag?: string;
    BackdropImageItemId?: string;
    Type?: string;
    IsFolder?: boolean | null;
    RunTimeTicks?: number | null;
    MediaType?: string;
    StartDate?: string | null;
    EndDate?: string | null;
    Series?: string;
    Status?: string;
    Album?: string;
    AlbumId?: number;
    AlbumArtist?: string;
    Artists?: Array<(string)>;
    SongCount?: number | null;
    EpisodeCount?: number | null;
    ChannelName?: string;
    PrimaryImageAspectRatio?: number | null;
};

export type PlaybackStartInfo = {
    CanSeek?: boolean;
    Item?: BaseItemDto;
    NowPlayingQueue?: Array<QueueItem>;
    PlaylistItemId?: string;
    ItemId?: string;
    SessionId?: string;
    MediaSourceId?: string;
    AudioStreamIndex?: number | null;
    SubtitleStreamIndex?: number | null;
    IsPaused?: boolean;
    IsMuted?: boolean;
    PositionTicks?: number | null;
    RunTimeTicks?: number | null;
    PlaybackStartTimeTicks?: number | null;
    VolumeLevel?: number | null;
    Brightness?: number | null;
    AspectRatio?: string;
    PlayMethod?: 'Transcode' | 'DirectStream' | 'DirectPlay';
    LiveStreamId?: string;
    PlaySessionId?: string;
    RepeatMode?: 'RepeatNone' | 'RepeatAll' | 'RepeatOne';
};

export type QueueItem = {
    Id?: number;
    PlaylistItemId?: string;
};

export type Sync_SyncTarget = {
    Name?: string;
    Id?: string;
};

export type QueryResult_Sync_SyncJob = {
    Items?: Array<Sync_SyncJob>;
    TotalRecordCount?: number;
};

export type Sync_SyncJob = {
    Id?: number;
    TargetId?: string;
    TargetName?: string;
    Quality?: string;
    Bitrate?: number | null;
    Profile?: string;
    Category?: 'Latest' | 'NextUp' | 'Resume';
    ParentId?: number;
    Progress?: number;
    Name?: string;
    Status?: 'Queued' | 'Converting' | 'ReadyToTransfer' | 'Transferring' | 'Completed' | 'CompletedWithError' | 'Failed';
    UserId?: number;
    UnwatchedOnly?: boolean;
    SyncNewContent?: boolean;
    ItemLimit?: number | null;
    RequestedItemIds?: Array<(number)>;
    DateCreated?: string;
    DateLastModified?: string;
    ItemCount?: number;
    ParentName?: string;
    PrimaryImageItemId?: string;
    PrimaryImageTag?: string;
};

export type QueryResult_Sync_Model_SyncJobItem = {
    Items?: Array<Sync_Model_SyncJobItem>;
    TotalRecordCount?: number;
};

export type Sync_Model_SyncJobItem = {
    Id?: number;
    JobId?: number;
    ItemId?: number;
    ItemName?: string;
    MediaSourceId?: string;
    MediaSource?: MediaSourceInfo;
    TargetId?: string;
    OutputPath?: string;
    Status?: 'Queued' | 'Converting' | 'ReadyToTransfer' | 'Transferring' | 'Synced' | 'Failed';
    Progress?: number | null;
    DateCreated?: string;
    PrimaryImageItemId?: number;
    PrimaryImageTag?: string;
    TemporaryPath?: string;
    AdditionalFiles?: Array<Sync_Model_ItemFileInfo>;
    ItemDateModifiedTicks?: number;
};

export type Sync_Model_ItemFileInfo = {
    Type?: 'Media' | 'Image' | 'Subtitles';
    Name?: string;
    Path?: string;
    ImageType?: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
    Index?: number;
};

export type Sync_Model_SyncJobRequest = {
    TargetId?: string;
    ItemIds?: Array<(string)>;
    Category?: 'Latest' | 'NextUp' | 'Resume';
    ParentId?: string;
    Quality?: string;
    Profile?: string;
    Name?: string;
    UserId?: string;
    UnwatchedOnly?: boolean;
    SyncNewContent?: boolean;
    ItemLimit?: number | null;
    Bitrate?: number | null;
};

export type Sync_Model_SyncJobCreationResult = {
    Job?: Sync_SyncJob;
    JobItems?: Array<Sync_Model_SyncJobItem>;
};

export type Sync_Model_SyncDialogOptions = {
    Targets?: Array<Sync_SyncTarget>;
    Options?: Array<('Name' | 'Quality' | 'UnwatchedOnly' | 'SyncNewContent' | 'ItemLimit' | 'Profile')>;
    QualityOptions?: Array<Sync_Model_SyncQualityOption>;
    ProfileOptions?: Array<Sync_Model_SyncProfileOption>;
};

export type Sync_Model_SyncQualityOption = {
    Name?: string;
    Description?: string;
    Id?: string;
    IsDefault?: boolean;
    IsOriginalQuality?: boolean;
};

export type Sync_Model_SyncProfileOption = {
    Name?: string;
    Description?: string;
    Id?: string;
    IsDefault?: boolean;
    EnableQualityOptions?: boolean;
};

export type Users_UserAction = {
    Id?: string;
    ServerId?: string;
    UserId?: string;
    ItemId?: string;
    Type?: 'PlayedItem';
    Date?: string;
    PositionTicks?: number | null;
};

export type Sync_Model_SyncDataRequest = {
    LocalItemIds?: Array<(string)>;
    TargetId?: string;
};

export type Sync_Model_SyncDataResponse = {
    ItemIdsToRemove?: Array<(string)>;
};

export type Configuration_ServerConfiguration = {
    EnableUPnP?: boolean;
    PublicPort?: number;
    PublicHttpsPort?: number;
    HttpServerPortNumber?: number;
    HttpsPortNumber?: number;
    EnableHttps?: boolean;
    SubtitlePermissionsUpgraded?: boolean;
    CertificatePath?: string;
    CertificatePassword?: string;
    IsPortAuthorized?: boolean;
    AutoRunWebApp?: boolean;
    EnableRemoteAccess?: boolean;
    LogAllQueryTimes?: boolean;
    EnableCaseSensitiveItemIds?: boolean;
    MetadataPath?: string;
    MetadataNetworkPath?: string;
    PreferredMetadataLanguage?: string;
    MetadataCountryCode?: string;
    SortReplaceCharacters?: Array<(string)>;
    SortRemoveCharacters?: Array<(string)>;
    SortRemoveWords?: Array<(string)>;
    LibraryMonitorDelay?: number;
    EnableDashboardResponseCaching?: boolean;
    DashboardSourcePath?: string;
    ImageSavingConvention?: 'Legacy' | 'Compatible';
    EnableAutomaticRestart?: boolean;
    SkipDeserializationForBasicTypes?: boolean;
    ServerName?: string;
    WanDdns?: string;
    UICulture?: string;
    SaveMetadataHidden?: boolean;
    RemoteClientBitrateLimit?: number;
    SchemaVersion?: number;
    DisplaySpecialsWithinSeasons?: boolean;
    LocalNetworkSubnets?: Array<(string)>;
    LocalNetworkAddresses?: Array<(string)>;
    EnableExternalContentInSuggestions?: boolean;
    RequireHttps?: boolean;
    IsBehindProxy?: boolean;
    RemoteIPFilter?: Array<(string)>;
    IsRemoteIPFilterBlacklist?: boolean;
    ImageExtractionTimeoutMs?: number;
    PathSubstitutions?: Array<Configuration_PathSubstitution>;
    UninstalledPlugins?: Array<(string)>;
    CollapseVideoFolders?: boolean;
    EnableOriginalTrackTitles?: boolean;
    EnableDebugLevelLogging?: boolean;
    EnableAutoUpdate?: boolean;
    LogFileRetentionDays?: number;
    RunAtStartup?: boolean;
    IsStartupWizardCompleted?: boolean;
    CachePath?: string;
};

export type Configuration_PathSubstitution = {
    From?: string;
    To?: string;
};

export type WakeOnLanInfo = {
    MacAddress?: string;
    BroadcastAddress?: string;
    Port?: number;
};

export type LogFile = {
    DateCreated?: string;
    DateModified?: string;
    Size?: number;
    Name?: string;
};

export type SystemInfo = {
    SystemUpdateLevel?: 'Release' | 'Beta' | 'Dev';
    OperatingSystemDisplayName?: string;
    PackageName?: string;
    HasPendingRestart?: boolean;
    IsShuttingDown?: boolean;
    SupportsLibraryMonitor?: boolean;
    WebSocketPortNumber?: number;
    CompletedInstallations?: Array<Updates_InstallationInfo>;
    CanSelfRestart?: boolean;
    CanSelfUpdate?: boolean;
    CanLaunchWebBrowser?: boolean;
    ProgramDataPath?: string;
    ItemsByNamePath?: string;
    CachePath?: string;
    LogPath?: string;
    InternalMetadataPath?: string;
    TranscodingTempPath?: string;
    HttpServerPortNumber?: number;
    SupportsHttps?: boolean;
    HttpsPortNumber?: number;
    HasUpdateAvailable?: boolean;
    SupportsAutoRunAtStartup?: boolean;
    HardwareAccelerationRequiresPremiere?: boolean;
    LocalAddress?: string;
    WanAddress?: string;
    ServerName?: string;
    Version?: string;
    OperatingSystem?: string;
    Id?: string;
};

export type Updates_InstallationInfo = {
    Id?: string;
    Name?: string;
    AssemblyGuid?: string;
    Version?: string;
    UpdateClass?: 'Release' | 'Beta' | 'Dev';
    PercentComplete?: number | null;
};

export type Net_EndPointInfo = {
    IsLocal?: boolean;
    IsInNetwork?: boolean;
};

export type AuthenticateUserByName = {
    Username?: string;
    Password?: string;
    Pw?: string;
};

export type Authentication_AuthenticationResult = {
    User?: UserDto;
    SessionInfo?: Session_SessionInfo;
    AccessToken?: string;
    ServerId?: string;
};

export type CreateUserByName = {
    Name?: string;
};

export type ForgotPassword = {
    EnteredUsername?: string;
};

export type Users_ForgotPasswordResult = {
    Action?: 'ContactAdmin' | 'PinCode' | 'InNetworkRequired';
    PinFile?: string;
    PinExpirationDate?: string | null;
};

export type playback_reporting_Api_CustomQuery = {
    CustomQueryString?: string;
    ReplaceUserId?: boolean;
};

export type WebDashboard_Api_ConfigurationPageInfo = {
    Name?: string;
    EnableInMainMenu?: boolean;
    MenuSection?: string;
    MenuIcon?: string;
    DisplayName?: string;
    ConfigurationPageType?: 'PluginConfiguration' | 'None';
    PluginId?: string;
};

export type MediaEncoding_Codecs_VideoCodecs_VideoCodecBase = {
    CodecKind?: 'Audio' | 'Video' | 'SubTitles';
    MediaTypeName?: string;
    VideoMediaType?: 'Unknown' | 'copy' | 'flv1' | 'h263' | 'h263p' | 'h264' | 'hevc' | 'mjpeg' | 'mpeg1video' | 'mpeg2video' | 'mpeg4' | 'msvideo1' | 'theora' | 'vc1image' | 'vc1' | 'vp8' | 'vp9' | 'wmv1' | 'wmv2' | 'wmv3' | '_012v' | '_4xm' | '_8bps' | 'a64_multi' | 'a64_multi5' | 'aasc' | 'aic' | 'alias_pix' | 'amv' | 'anm' | 'ansi' | 'apng' | 'asv1' | 'asv2' | 'aura' | 'aura2' | 'av1' | 'avrn' | 'avrp' | 'avs' | 'avui' | 'ayuv' | 'bethsoftvid' | 'bfi' | 'binkvideo' | 'bintext' | 'bitpacked' | 'bmp' | 'bmv_video' | 'brender_pix' | 'c93' | 'cavs' | 'cdgraphics' | 'cdxl' | 'cfhd' | 'cinepak' | 'clearvideo' | 'cljr' | 'cllc' | 'cmv' | 'cpia' | 'cscd' | 'cyuv' | 'daala' | 'dds' | 'dfa' | 'dirac' | 'dnxhd' | 'dpx' | 'dsicinvideo' | 'dvvideo' | 'dxa' | 'dxtory' | 'dxv' | 'escape124' | 'escape130' | 'exr' | 'ffv1' | 'ffvhuff' | 'fic' | 'fits' | 'flashsv' | 'flashsv2' | 'flic' | 'fmvc' | 'fraps' | 'frwu' | 'g2m' | 'gdv' | 'gif' | 'h261' | 'h263i' | 'hap' | 'hnm4video' | 'hq_hqa' | 'hqx' | 'huffyuv' | 'idcin' | 'idf' | 'iff_ilbm' | 'indeo2' | 'indeo3' | 'indeo4' | 'indeo5' | 'interplayvideo' | 'jpeg2000' | 'jpegls' | 'jv' | 'kgv1' | 'kmvc' | 'lagarith' | 'ljpeg' | 'loco' | 'm101' | 'mad' | 'magicyuv' | 'mdec' | 'mimic' | 'mjpegb' | 'mmvideo' | 'motionpixels' | 'msa1' | 'mscc' | 'msmpeg4v1' | 'msmpeg4v2' | 'msmpeg4v3' | 'msrle' | 'mss1' | 'mss2' | 'mszh' | 'mts2' | 'mvc1' | 'mvc2' | 'mxpeg' | 'nuv' | 'paf_video' | 'pam' | 'pbm' | 'pcx' | 'pgm' | 'pgmyuv' | 'pictor' | 'pixlet' | 'png' | 'ppm' | 'prores' | 'psd' | 'ptx' | 'qdraw' | 'qpeg' | 'qtrle' | 'r10k' | 'r210' | 'rawvideo' | 'rl2' | 'roq' | 'rpza' | 'rscc' | 'rv10' | 'rv20' | 'rv30' | 'rv40' | 'sanm' | 'scpr' | 'screenpresso' | 'sgi' | 'sgirle' | 'sheervideo' | 'smackvideo' | 'smc' | 'smvjpeg' | 'snow' | 'sp5x' | 'speedhq' | 'srgc' | 'sunrast' | 'svg' | 'svq1' | 'svq3' | 'targa' | 'targa_y216' | 'tdsc' | 'tgq' | 'tgv' | 'thp' | 'tiertexseqvideo' | 'tiff' | 'tmv' | 'tqi' | 'truemotion1' | 'truemotion2' | 'truemotion2rt' | 'tscc' | 'tscc2' | 'txd' | 'ulti' | 'utvideo' | 'v210' | 'v210x' | 'v308' | 'v408' | 'v410' | 'vb' | 'vble' | 'vcr1' | 'vixl' | 'vmdvideo' | 'vmnc' | 'vp3' | 'vp5' | 'vp6' | 'vp6a' | 'vp6f' | 'vp7' | 'webp' | 'wmv3image' | 'wnv1' | 'wrapped_avframe' | 'ws_vqa' | 'xan_wc3' | 'xan_wc4' | 'xbin' | 'xbm' | 'xface' | 'xpm' | 'xwd' | 'y41p' | 'ylc' | 'yop' | 'yuv4' | 'zerocodec' | 'zlib' | 'zmbv';
    MinWidth?: number | null;
    MaxWidth?: number | null;
    MinHeight?: number | null;
    MaxHeight?: number | null;
    WidthAlignment?: number | null;
    HeightAlignment?: number | null;
    MinFrameRate?: number | null;
    MaxFrameRate?: number | null;
    SupportedColorFormats?: Array<('Unknown' | 'yuv420p' | 'yuyv422' | 'rgb24' | 'bgr24' | 'yuv422p' | 'yuv444p' | 'yuv410p' | 'yuv411p' | 'gray' | 'monow' | 'monob' | 'pal8' | 'yuvj420p' | 'yuvj422p' | 'yuvj444p' | 'uyvy422' | 'uyyvyy411' | 'bgr8' | 'bgr4' | 'bgr4_byte' | 'rgb8' | 'rgb4' | 'rgb4_byte' | 'nv12' | 'nv21' | 'argb' | 'rgba' | 'abgr' | 'bgra' | 'gray16' | 'yuv440p' | 'yuvj440p' | 'yuva420p' | 'rgb48' | 'rgb565' | 'rgb555' | 'bgr565' | 'bgr555' | 'vaapi_moco' | 'vaapi_idct' | 'vaapi_vld' | 'yuv420p16' | 'yuv422p16' | 'yuv444p16' | 'dxva2_vld' | 'rgb444' | 'bgr444' | 'ya8' | 'bgr48' | 'yuv420p9' | 'yuv420p10' | 'yuv422p10' | 'yuv444p9' | 'yuv444p10' | 'yuv422p9' | 'gbrp' | 'gbrp9' | 'gbrp10' | 'gbrp16' | 'yuva422p' | 'yuva444p' | 'yuva420p9' | 'yuva422p9' | 'yuva444p9' | 'yuva420p10' | 'yuva422p10' | 'yuva444p10' | 'yuva420p16' | 'yuva422p16' | 'yuva444p16' | 'vdpau' | 'xyz12' | 'nv16' | 'nv20' | 'rgba64' | 'bgra64' | 'yvyu422' | 'ya16' | 'gbrap' | 'gbrap16' | 'qsv' | 'mmal' | 'd3d11va_vld' | 'cuda' | '_0rgb' | 'rgb0' | '_0bgr' | 'bgr0' | 'yuv420p12' | 'yuv420p14' | 'yuv422p12' | 'yuv422p14' | 'yuv444p12' | 'yuv444p14' | 'gbrp12' | 'gbrp14' | 'yuvj411p' | 'bayer_bggr8' | 'bayer_rggb8' | 'bayer_gbrg8' | 'bayer_grbg8' | 'bayer_bggr16' | 'bayer_rggb16' | 'bayer_gbrg16' | 'bayer_grbg16' | 'xvmc' | 'yuv440p10' | 'yuv440p12' | 'ayuv64' | 'videotoolbox_vld' | 'p010' | 'gbrap12' | 'gbrap10' | 'mediacodec' | 'gray12' | 'gray10' | 'p016' | 'd3d11' | 'gray9' | 'gbrpf32' | 'gbrapf32' | 'drm_prime' | 'opencl')>;
    SupportedColorFormatStrings?: Array<(string)>;
    ProfileAndLevelInformation?: Array<MediaEncoding_Codecs_Common_Types_ProfileLevelInformation>;
    Id?: string;
    Direction?: 'Encoder' | 'Decoder';
    Name?: string;
    Description?: string;
    FrameworkCodec?: string;
    IsHardwareCodec?: boolean;
    SecondaryFramework?: 'Unknown' | 'None' | 'AmdAmf' | 'MediaCodec' | 'NvEncDec' | 'OpenMax' | 'QuickSync' | 'VaApi' | 'V4L2' | 'DxVa' | 'D3d11va' | 'VideoToolbox';
    SecondaryFrameworkCodec?: string;
    MaxInstanceCount?: number | null;
    MinBitRate?: MediaEncoding_Codecs_Common_Types_BitRate;
    MaxBitRate?: MediaEncoding_Codecs_Common_Types_BitRate;
    IsEnabledByDefault?: boolean;
    DefaultPriority?: number;
};

export type MediaEncoding_Codecs_Common_Types_ProfileLevelInformation = {
    Profile?: MediaEncoding_Codecs_Common_Types_ProfileInformation;
    Level?: MediaEncoding_Codecs_Common_Types_LevelInformation;
};

export type MediaEncoding_Codecs_Common_Types_ProfileInformation = {
    ShortName?: string;
    Description?: string;
    Details?: string;
    Id?: string;
};

export type MediaEncoding_Codecs_Common_Types_LevelInformation = {
    ShortName?: string;
    Description?: string;
    Ordinal?: number | null;
    MaxBitRate?: MediaEncoding_Codecs_Common_Types_BitRate;
    MaxBitRateDisplay?: string;
    Id?: string;
    ResolutionRates?: Array<MediaEncoding_Codecs_Common_Types_ResolutionWithRate>;
    ResolutionRateStrings?: Array<(string)>;
    ResolutionRatesDisplay?: string;
};

export type MediaEncoding_Codecs_Common_Types_BitRate = {
    bps?: number;
    kbps?: number;
    Mbps?: number;
};

export type MediaEncoding_Codecs_Common_Types_ResolutionWithRate = {
    Width?: number;
    Height?: number;
    FrameRate?: number;
    Resolution?: MediaEncoding_Codecs_Common_Types_Resolution;
};

export type MediaEncoding_Codecs_Common_Types_Resolution = {
    Width?: number;
    Height?: number;
};

export type Configuration_CodecConfiguration = {
    IsEnabled?: boolean;
    Priority?: number;
    CodecId?: string;
};

export type ExternalIdInfo = {
    Name?: string;
    Key?: string;
    UrlFormatString?: string;
};

export type Providers_RemoteSearchQuery_Providers_TrailerInfo = {
    SearchInfo?: Providers_TrailerInfo;
    ItemId?: number;
    SearchProviderName?: string;
    IncludeDisabledProviders?: boolean;
};

export type Providers_TrailerInfo = {
    Name?: string;
    MetadataLanguage?: string;
    MetadataCountryCode?: string;
    ProviderIds?: {
        [key: string]: (string);
    };
    Year?: number | null;
    IndexNumber?: number | null;
    ParentIndexNumber?: number | null;
    PremiereDate?: string | null;
    IsAutomated?: boolean;
};

export type RemoteSearchResult = {
    Name?: string;
    ProviderIds?: {
        [key: string]: (string);
    };
    ProductionYear?: number | null;
    IndexNumber?: number | null;
    IndexNumberEnd?: number | null;
    ParentIndexNumber?: number | null;
    PremiereDate?: string | null;
    ImageUrl?: string;
    SearchProviderName?: string;
    GameSystem?: string;
    Overview?: string;
    AlbumArtist?: RemoteSearchResult;
    Artists?: Array<RemoteSearchResult>;
};

export type Providers_RemoteSearchQuery_Providers_BookInfo = {
    SearchInfo?: Providers_BookInfo;
    ItemId?: number;
    SearchProviderName?: string;
    IncludeDisabledProviders?: boolean;
};

export type Providers_BookInfo = {
    SeriesName?: string;
    Name?: string;
    MetadataLanguage?: string;
    MetadataCountryCode?: string;
    ProviderIds?: {
        [key: string]: (string);
    };
    Year?: number | null;
    IndexNumber?: number | null;
    ParentIndexNumber?: number | null;
    PremiereDate?: string | null;
    IsAutomated?: boolean;
};

export type Providers_RemoteSearchQuery_Providers_MovieInfo = {
    SearchInfo?: Providers_MovieInfo;
    ItemId?: number;
    SearchProviderName?: string;
    IncludeDisabledProviders?: boolean;
};

export type Providers_MovieInfo = {
    Name?: string;
    MetadataLanguage?: string;
    MetadataCountryCode?: string;
    ProviderIds?: {
        [key: string]: (string);
    };
    Year?: number | null;
    IndexNumber?: number | null;
    ParentIndexNumber?: number | null;
    PremiereDate?: string | null;
    IsAutomated?: boolean;
};

export type Providers_RemoteSearchQuery_Providers_SeriesInfo = {
    SearchInfo?: Providers_SeriesInfo;
    ItemId?: number;
    SearchProviderName?: string;
    IncludeDisabledProviders?: boolean;
};

export type Providers_SeriesInfo = {
    EpisodeAirDate?: string | null;
    Name?: string;
    MetadataLanguage?: string;
    MetadataCountryCode?: string;
    ProviderIds?: {
        [key: string]: (string);
    };
    Year?: number | null;
    IndexNumber?: number | null;
    ParentIndexNumber?: number | null;
    PremiereDate?: string | null;
    IsAutomated?: boolean;
};

export type Providers_RemoteSearchQuery_Providers_GameInfo = {
    SearchInfo?: Providers_GameInfo;
    ItemId?: number;
    SearchProviderName?: string;
    IncludeDisabledProviders?: boolean;
};

export type Providers_GameInfo = {
    Name?: string;
    MetadataLanguage?: string;
    MetadataCountryCode?: string;
    ProviderIds?: {
        [key: string]: (string);
    };
    Year?: number | null;
    IndexNumber?: number | null;
    ParentIndexNumber?: number | null;
    PremiereDate?: string | null;
    IsAutomated?: boolean;
};

export type Providers_RemoteSearchQuery_Providers_BoxSetInfo = {
    SearchInfo?: Providers_BoxSetInfo;
    ItemId?: number;
    SearchProviderName?: string;
    IncludeDisabledProviders?: boolean;
};

export type Providers_BoxSetInfo = {
    Name?: string;
    MetadataLanguage?: string;
    MetadataCountryCode?: string;
    ProviderIds?: {
        [key: string]: (string);
    };
    Year?: number | null;
    IndexNumber?: number | null;
    ParentIndexNumber?: number | null;
    PremiereDate?: string | null;
    IsAutomated?: boolean;
};

export type Providers_RemoteSearchQuery_Providers_MusicVideoInfo = {
    SearchInfo?: Providers_MusicVideoInfo;
    ItemId?: number;
    SearchProviderName?: string;
    IncludeDisabledProviders?: boolean;
};

export type Providers_MusicVideoInfo = {
    Artists?: Array<(string)>;
    Name?: string;
    MetadataLanguage?: string;
    MetadataCountryCode?: string;
    ProviderIds?: {
        [key: string]: (string);
    };
    Year?: number | null;
    IndexNumber?: number | null;
    ParentIndexNumber?: number | null;
    PremiereDate?: string | null;
    IsAutomated?: boolean;
};

export type Providers_RemoteSearchQuery_Providers_PersonLookupInfo = {
    SearchInfo?: Providers_PersonLookupInfo;
    ItemId?: number;
    SearchProviderName?: string;
    IncludeDisabledProviders?: boolean;
};

export type Providers_PersonLookupInfo = {
    Name?: string;
    MetadataLanguage?: string;
    MetadataCountryCode?: string;
    ProviderIds?: {
        [key: string]: (string);
    };
    Year?: number | null;
    IndexNumber?: number | null;
    ParentIndexNumber?: number | null;
    PremiereDate?: string | null;
    IsAutomated?: boolean;
};

export type Providers_RemoteSearchQuery_Providers_AlbumInfo = {
    SearchInfo?: Providers_AlbumInfo;
    ItemId?: number;
    SearchProviderName?: string;
    IncludeDisabledProviders?: boolean;
};

export type Providers_AlbumInfo = {
    AlbumArtists?: Array<(string)>;
    SongInfos?: Array<Providers_SongInfo>;
    Name?: string;
    MetadataLanguage?: string;
    MetadataCountryCode?: string;
    ProviderIds?: {
        [key: string]: (string);
    };
    Year?: number | null;
    IndexNumber?: number | null;
    ParentIndexNumber?: number | null;
    PremiereDate?: string | null;
    IsAutomated?: boolean;
};

export type Providers_SongInfo = {
    AlbumArtists?: Array<(string)>;
    Album?: string;
    Artists?: Array<(string)>;
    Name?: string;
    MetadataLanguage?: string;
    MetadataCountryCode?: string;
    ProviderIds?: {
        [key: string]: (string);
    };
    Year?: number | null;
    IndexNumber?: number | null;
    ParentIndexNumber?: number | null;
    PremiereDate?: string | null;
    IsAutomated?: boolean;
};

export type Providers_RemoteSearchQuery_Providers_ArtistInfo = {
    SearchInfo?: Providers_ArtistInfo;
    ItemId?: number;
    SearchProviderName?: string;
    IncludeDisabledProviders?: boolean;
};

export type Providers_ArtistInfo = {
    Name?: string;
    MetadataLanguage?: string;
    MetadataCountryCode?: string;
    ProviderIds?: {
        [key: string]: (string);
    };
    Year?: number | null;
    IndexNumber?: number | null;
    ParentIndexNumber?: number | null;
    PremiereDate?: string | null;
    IsAutomated?: boolean;
};

export type MetadataEditorInfo = {
    ParentalRatingOptions?: Array<ParentalRating>;
    Countries?: Array<Globalization_CountryInfo>;
    Cultures?: Array<Globalization_CultureDto>;
    ExternalIdInfos?: Array<ExternalIdInfo>;
};

export type Library_DeleteInfo = {
    Paths?: Array<(string)>;
};

export type AllThemeMediaResult = {
    ThemeVideosResult?: ThemeMediaResult;
    ThemeSongsResult?: ThemeMediaResult;
    SoundtrackSongsResult?: ThemeMediaResult;
};

export type ThemeMediaResult = {
    OwnerId?: number;
    Items?: Array<BaseItemDto>;
    TotalRecordCount?: number;
};

export type ImageInfo = {
    ImageType?: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
    ImageIndex?: number | null;
    Path?: string;
    Height?: number | null;
    Width?: number | null;
    Size?: number;
};

export type RemoteImageResult = {
    Images?: Array<RemoteImageInfo>;
    TotalRecordCount?: number;
    Providers?: Array<(string)>;
};

export type RemoteImageInfo = {
    ProviderName?: string;
    Url?: string;
    ThumbnailUrl?: string;
    Height?: number | null;
    Width?: number | null;
    CommunityRating?: number | null;
    VoteCount?: number | null;
    Language?: string;
    Type?: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
    RatingType?: 'Score' | 'Likes';
};

export type RokuMetadata_Api_ThumbnailSetInfo = {
    AspectRatio?: number | null;
    Thumbnails?: Array<RokuMetadata_Api_ThumbnailInfo>;
};

export type RokuMetadata_Api_ThumbnailInfo = {
    PositionTicks?: number;
    ImageTag?: string;
};

export type MediaInfo_PlaybackInfoResponse = {
    MediaSources?: Array<MediaSourceInfo>;
    PlaySessionId?: string;
    ErrorCode?: 'NotAllowed' | 'NoCompatibleStream' | 'RateLimitExceeded';
};

export type MediaInfo_PlaybackInfoRequest = {
    Id?: string;
    UserId?: string;
    MaxStreamingBitrate?: number | null;
    StartTimeTicks?: number | null;
    AudioStreamIndex?: number | null;
    SubtitleStreamIndex?: number | null;
    MaxAudioChannels?: number | null;
    MediaSourceId?: string;
    LiveStreamId?: string;
    DeviceProfile?: Dlna_DeviceProfile;
    EnableDirectPlay?: boolean;
    EnableDirectStream?: boolean;
    EnableTranscoding?: boolean;
    AllowVideoStreamCopy?: boolean;
    AllowAudioStreamCopy?: boolean;
    IsPlayback?: boolean;
    AutoOpenLiveStream?: boolean;
    DirectPlayProtocols?: Array<('File' | 'Http' | 'Rtmp' | 'Rtsp' | 'Udp' | 'Rtp' | 'Ftp' | 'Mms')>;
};

export type Library_PostUpdatedMedia = {
    Updates?: Array<Library_MediaUpdateInfo>;
};

export type Library_MediaUpdateInfo = {
    Path?: string;
    UpdateType?: string;
};

export type Library_UpdateLibraryOptions = {
    Id?: string;
    LibraryOptions?: Configuration_LibraryOptions;
};

export type Library_RenameVirtualFolder = {
    Name?: string;
    NewName?: string;
    RefreshLibrary?: boolean;
};

export type Library_AddMediaPath = {
    Name?: string;
    Path?: string;
    PathInfo?: Configuration_MediaPathInfo;
    RefreshLibrary?: boolean;
};

export type LiveTv_ListingProviderTypeInfo = {
    Name?: string;
    Id?: string;
    SetupUrl?: string;
};

export type Emby_Notifications_Api_NotificationsSummary = {
    UnreadCount?: number;
    MaxUnreadNotificationLevel?: 'Normal' | 'Warning' | 'Error';
};

export type PlayRequest = {
    ControllingUserId?: string;
    SubtitleStreamIndex?: number | null;
    AudioStreamIndex?: number | null;
    MediaSourceId?: string;
    StartIndex?: number | null;
};

export type GeneralCommand = {
    Name?: string;
    ControllingUserId?: string;
    Arguments?: {
        [key: string]: (string);
    };
};

export type PlaybackProgressInfo = {
    CanSeek?: boolean;
    Item?: BaseItemDto;
    NowPlayingQueue?: Array<QueueItem>;
    PlaylistItemId?: string;
    ItemId?: string;
    SessionId?: string;
    MediaSourceId?: string;
    AudioStreamIndex?: number | null;
    SubtitleStreamIndex?: number | null;
    IsPaused?: boolean;
    IsMuted?: boolean;
    PositionTicks?: number | null;
    RunTimeTicks?: number | null;
    PlaybackStartTimeTicks?: number | null;
    VolumeLevel?: number | null;
    Brightness?: number | null;
    AspectRatio?: string;
    PlayMethod?: 'Transcode' | 'DirectStream' | 'DirectPlay';
    LiveStreamId?: string;
    PlaySessionId?: string;
    RepeatMode?: 'RepeatNone' | 'RepeatAll' | 'RepeatOne';
};

export type PlaybackStopInfo = {
    NowPlayingQueue?: Array<QueueItem>;
    PlaylistItemId?: string;
    Item?: BaseItemDto;
    ItemId?: string;
    SessionId?: string;
    MediaSourceId?: string;
    PositionTicks?: number | null;
    LiveStreamId?: string;
    PlaySessionId?: string;
    Failed?: boolean;
    NextMediaType?: string;
};

export type Sync_Model_SyncedItemProgress = {
    Progress?: number | null;
    Status?: 'Queued' | 'Converting' | 'ReadyToTransfer' | 'Transferring' | 'Synced' | 'Failed';
};

export type Sync_Model_SyncedItem = {
    ServerId?: string;
    SyncJobId?: number;
    SyncJobName?: string;
    SyncJobDateCreated?: string;
    SyncJobItemId?: number;
    OriginalFileName?: string;
    Item?: BaseItemDto;
    UserId?: string;
    AdditionalFiles?: Array<Sync_Model_ItemFileInfo>;
};

export type QueryResult_ActivityLogEntry = {
    Items?: Array<ActivityLogEntry>;
    TotalRecordCount?: number;
};

export type ActivityLogEntry = {
    Id?: number;
    Name?: string;
    Overview?: string;
    ShortOverview?: string;
    Type?: string;
    ItemId?: string;
    Date?: string;
    UserId?: string;
    UserPrimaryImageTag?: string;
    Severity?: 'Info' | 'Debug' | 'Warn' | 'Error' | 'Fatal';
};

export type PublicSystemInfo = {
    LocalAddress?: string;
    WanAddress?: string;
    ServerName?: string;
    Version?: string;
    OperatingSystem?: string;
    Id?: string;
};

export type AuthenticateUser = {
    Pw?: string;
    Password?: string;
};

export type UpdateUserPassword = {
    Id?: string;
    CurrentPw?: string;
    NewPw?: string;
    ResetPassword?: boolean;
};

export type UpdateUserEasyPassword = {
    Id?: string;
    NewPw?: string;
    ResetPassword?: boolean;
};

export type ForgotPasswordPin = {
    Pin?: string;
};

export type Users_PinRedeemResult = {
    Success?: boolean;
    UsersReset?: Array<(string)>;
};

export type ImageProviderInfo = {
    Name?: string;
    SupportedImages?: Array<('Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail')>;
};

export type Library_UpdateMediaPath = {
    Name?: string;
    PathInfo?: Configuration_MediaPathInfo;
};

export type PlaystateRequest = {
    Command?: 'Stop' | 'Pause' | 'Unpause' | 'NextTrack' | 'PreviousTrack' | 'Seek' | 'Rewind' | 'FastForward' | 'PlayPause';
    SeekPositionTicks?: number | null;
    ControllingUserId?: string;
};

export type Connect_UserLinkResult = {
    IsPending?: boolean;
    IsNewUserInvitation?: boolean;
    GuestDisplayName?: string;
};

export type RemoteSubtitleInfo = {
    ThreeLetterISOLanguageName?: string;
    Id?: string;
    ProviderName?: string;
    Name?: string;
    Format?: string;
    Author?: string;
    Comment?: string;
    DateCreated?: string | null;
    CommunityRating?: number | null;
    DownloadCount?: number | null;
    IsHashMatch?: boolean | null;
    IsForced?: boolean | null;
};

export type $OpenApiTs = {
    '/Artists': {
        get: {
            req: {
                /**
                 * Optional. Return items that are siblings of a supplied item.
                 */
                adjacentTo?: string;
                /**
                 * Gets all episodes that aired during a season, including specials.
                 */
                airedDuringSeason?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                 */
                albums?: string;
                /**
                 * Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                 */
                anyProviderIdEquals?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artistIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artists?: string;
                /**
                 * Artist or AlbumArtist
                 */
                artistType?: string;
                /**
                 * Optional filter by AudioCodec. Allows multiple, comma delimeted.
                 */
                audioCodecs?: string;
                /**
                 * Optional filter by Container. Allows multiple, comma delimeted.
                 */
                containers?: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                 */
                excludeItemIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                excludeItemTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                excludeLocationTypes?: string;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                 */
                filters?: string;
                /**
                 * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                 */
                genres?: string;
                /**
                 * Whether or not to hide items behind their boxsets.
                 */
                groupItemsIntoCollections?: boolean;
                /**
                 * Optional filter by items that have an imdb id or not.
                 */
                hasImdbId?: boolean | null;
                /**
                 * Optional filter by items that have official ratings
                 */
                hasOfficialRating?: boolean | null;
                /**
                 * Optional filter by items that have an overview or not.
                 */
                hasOverview?: boolean | null;
                /**
                 * Optional filter by items that have or do not have a parental rating
                 */
                hasParentalRating?: boolean | null;
                /**
                 * Optional filter by items with special features.
                 */
                hasSpecialFeature?: boolean | null;
                /**
                 * Optional filter by items with subtitles.
                 */
                hasSubtitles?: boolean | null;
                /**
                 * Optional filter by items with theme songs.
                 */
                hasThemeSong?: boolean | null;
                /**
                 * Optional filter by items with theme videos.
                 */
                hasThemeVideo?: boolean | null;
                /**
                 * Optional filter by items that have a tmdb id or not.
                 */
                hasTmdbId?: boolean | null;
                /**
                 * Optional filter by items with trailers.
                 */
                hasTrailer?: boolean | null;
                /**
                 * Optional filter by items that have a tvdb id or not.
                 */
                hasTvdbId?: boolean | null;
                /**
                 * Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                 */
                ids?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                 */
                imageTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional filter by items that are 3D, or not.
                 */
                is3D?: boolean | null;
                /**
                 * Optional filter by items that are marked as favorite, or not.
                 */
                isFavorite?: boolean | null;
                /**
                 * Optional filter by items that are HD or not.
                 */
                isHd?: boolean | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter by items that are locked.
                 */
                isLocked?: boolean | null;
                /**
                 * Optional filter by items that are missing episodes or not.
                 */
                isMissing?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter by items that are placeholders
                 */
                isPlaceHolder?: boolean | null;
                /**
                 * Optional filter by items that are played, or not.
                 */
                isPlayed?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional filter by items that are unaired episodes or not.
                 */
                isUnaired?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                locationTypes?: string;
                /**
                 * Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                 */
                maxOfficialRating?: string;
                /**
                 * Optional filter by maximum number of game players.
                 */
                maxPlayers?: number | null;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxPremiereDate?: string;
                /**
                 * Optional filter by MediaType. Allows multiple, comma delimited.
                 */
                mediaTypes?: string;
                /**
                 * Optional filter by minimum community rating.
                 */
                minCommunityRating?: number | null;
                /**
                 * Optional filter by minimum critic rating.
                 */
                minCriticRating?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSaved?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSavedForUser?: string;
                /**
                 * Optional filter by minimum index number.
                 */
                minIndexNumber?: number | null;
                /**
                 * Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                 */
                minOfficialRating?: string;
                /**
                 * Optional filter by minimum number of game players.
                 */
                minPlayers?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minPremiereDate?: string;
                /**
                 * Optional filter by items whose name is equally or lesser than a given input string.
                 */
                nameLessThan?: string;
                /**
                 * Optional filter by items whose name is sorted equally than a given input string.
                 */
                nameStartsWith?: string;
                /**
                 * Optional filter by items whose name is sorted equally or greater than a given input string.
                 */
                nameStartsWithOrGreater?: string;
                /**
                 * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                 */
                officialRatings?: string;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional filter by parent index number.
                 */
                parentIndexNumber?: number | null;
                /**
                 * Optional filter by Path.
                 */
                path?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                person?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                personIds?: string;
                /**
                 * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                 */
                personTypes?: string;
                /**
                 * When searching within folders, this determines whether or not the search will be recursive. true/false
                 */
                recursive?: boolean;
                /**
                 * Optional filter by Series Status. Allows multiple, comma delimeted.
                 */
                seriesStatus?: string;
                /**
                 * Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                 */
                sortBy?: string;
                /**
                 * Sort Order - Ascending,Descending
                 */
                sortOrder?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studioIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studios?: string;
                /**
                 * Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                 */
                subtitleCodecs?: string;
                /**
                 * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                 */
                tags?: string;
                /**
                 * User Id
                 */
                userId?: string;
                /**
                 * Optional filter by VideoCodec. Allows multiple, comma delimeted.
                 */
                videoCodecs?: string;
                /**
                 * Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                 */
                videoTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                 */
                years?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Artists/{Name}': {
        get: {
            req: {
                /**
                 * The artist name
                 */
                name: string;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a BaseItemDto object.
                 */
                200: BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Artists/AlbumArtists': {
        get: {
            req: {
                /**
                 * Optional. Return items that are siblings of a supplied item.
                 */
                adjacentTo?: string;
                /**
                 * Gets all episodes that aired during a season, including specials.
                 */
                airedDuringSeason?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                 */
                albums?: string;
                /**
                 * Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                 */
                anyProviderIdEquals?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artistIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artists?: string;
                /**
                 * Artist or AlbumArtist
                 */
                artistType?: string;
                /**
                 * Optional filter by AudioCodec. Allows multiple, comma delimeted.
                 */
                audioCodecs?: string;
                /**
                 * Optional filter by Container. Allows multiple, comma delimeted.
                 */
                containers?: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                 */
                excludeItemIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                excludeItemTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                excludeLocationTypes?: string;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                 */
                filters?: string;
                /**
                 * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                 */
                genres?: string;
                /**
                 * Whether or not to hide items behind their boxsets.
                 */
                groupItemsIntoCollections?: boolean;
                /**
                 * Optional filter by items that have an imdb id or not.
                 */
                hasImdbId?: boolean | null;
                /**
                 * Optional filter by items that have official ratings
                 */
                hasOfficialRating?: boolean | null;
                /**
                 * Optional filter by items that have an overview or not.
                 */
                hasOverview?: boolean | null;
                /**
                 * Optional filter by items that have or do not have a parental rating
                 */
                hasParentalRating?: boolean | null;
                /**
                 * Optional filter by items with special features.
                 */
                hasSpecialFeature?: boolean | null;
                /**
                 * Optional filter by items with subtitles.
                 */
                hasSubtitles?: boolean | null;
                /**
                 * Optional filter by items with theme songs.
                 */
                hasThemeSong?: boolean | null;
                /**
                 * Optional filter by items with theme videos.
                 */
                hasThemeVideo?: boolean | null;
                /**
                 * Optional filter by items that have a tmdb id or not.
                 */
                hasTmdbId?: boolean | null;
                /**
                 * Optional filter by items with trailers.
                 */
                hasTrailer?: boolean | null;
                /**
                 * Optional filter by items that have a tvdb id or not.
                 */
                hasTvdbId?: boolean | null;
                /**
                 * Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                 */
                ids?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                 */
                imageTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional filter by items that are 3D, or not.
                 */
                is3D?: boolean | null;
                /**
                 * Optional filter by items that are marked as favorite, or not.
                 */
                isFavorite?: boolean | null;
                /**
                 * Optional filter by items that are HD or not.
                 */
                isHd?: boolean | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter by items that are locked.
                 */
                isLocked?: boolean | null;
                /**
                 * Optional filter by items that are missing episodes or not.
                 */
                isMissing?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter by items that are placeholders
                 */
                isPlaceHolder?: boolean | null;
                /**
                 * Optional filter by items that are played, or not.
                 */
                isPlayed?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional filter by items that are unaired episodes or not.
                 */
                isUnaired?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                locationTypes?: string;
                /**
                 * Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                 */
                maxOfficialRating?: string;
                /**
                 * Optional filter by maximum number of game players.
                 */
                maxPlayers?: number | null;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxPremiereDate?: string;
                /**
                 * Optional filter by MediaType. Allows multiple, comma delimited.
                 */
                mediaTypes?: string;
                /**
                 * Optional filter by minimum community rating.
                 */
                minCommunityRating?: number | null;
                /**
                 * Optional filter by minimum critic rating.
                 */
                minCriticRating?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSaved?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSavedForUser?: string;
                /**
                 * Optional filter by minimum index number.
                 */
                minIndexNumber?: number | null;
                /**
                 * Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                 */
                minOfficialRating?: string;
                /**
                 * Optional filter by minimum number of game players.
                 */
                minPlayers?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minPremiereDate?: string;
                /**
                 * Optional filter by items whose name is equally or lesser than a given input string.
                 */
                nameLessThan?: string;
                /**
                 * Optional filter by items whose name is sorted equally than a given input string.
                 */
                nameStartsWith?: string;
                /**
                 * Optional filter by items whose name is sorted equally or greater than a given input string.
                 */
                nameStartsWithOrGreater?: string;
                /**
                 * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                 */
                officialRatings?: string;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional filter by parent index number.
                 */
                parentIndexNumber?: number | null;
                /**
                 * Optional filter by Path.
                 */
                path?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                person?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                personIds?: string;
                /**
                 * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                 */
                personTypes?: string;
                /**
                 * When searching within folders, this determines whether or not the search will be recursive. true/false
                 */
                recursive?: boolean;
                /**
                 * Optional filter by Series Status. Allows multiple, comma delimeted.
                 */
                seriesStatus?: string;
                /**
                 * Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                 */
                sortBy?: string;
                /**
                 * Sort Order - Ascending,Descending
                 */
                sortOrder?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studioIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studios?: string;
                /**
                 * Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                 */
                subtitleCodecs?: string;
                /**
                 * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                 */
                tags?: string;
                /**
                 * User Id
                 */
                userId?: string;
                /**
                 * Optional filter by VideoCodec. Allows multiple, comma delimeted.
                 */
                videoCodecs?: string;
                /**
                 * Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                 */
                videoTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                 */
                years?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/AudioCodecs': {
        get: {
            req: {
                /**
                 * Optional. Return items that are siblings of a supplied item.
                 */
                adjacentTo?: string;
                /**
                 * Gets all episodes that aired during a season, including specials.
                 */
                airedDuringSeason?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                 */
                albums?: string;
                /**
                 * Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                 */
                anyProviderIdEquals?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artistIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artists?: string;
                /**
                 * Artist or AlbumArtist
                 */
                artistType?: string;
                /**
                 * Optional filter by AudioCodec. Allows multiple, comma delimeted.
                 */
                audioCodecs?: string;
                /**
                 * Optional filter by Container. Allows multiple, comma delimeted.
                 */
                containers?: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                 */
                excludeItemIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                excludeItemTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                excludeLocationTypes?: string;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                 */
                filters?: string;
                /**
                 * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                 */
                genres?: string;
                /**
                 * Whether or not to hide items behind their boxsets.
                 */
                groupItemsIntoCollections?: boolean;
                /**
                 * Optional filter by items that have an imdb id or not.
                 */
                hasImdbId?: boolean | null;
                /**
                 * Optional filter by items that have official ratings
                 */
                hasOfficialRating?: boolean | null;
                /**
                 * Optional filter by items that have an overview or not.
                 */
                hasOverview?: boolean | null;
                /**
                 * Optional filter by items that have or do not have a parental rating
                 */
                hasParentalRating?: boolean | null;
                /**
                 * Optional filter by items with special features.
                 */
                hasSpecialFeature?: boolean | null;
                /**
                 * Optional filter by items with subtitles.
                 */
                hasSubtitles?: boolean | null;
                /**
                 * Optional filter by items with theme songs.
                 */
                hasThemeSong?: boolean | null;
                /**
                 * Optional filter by items with theme videos.
                 */
                hasThemeVideo?: boolean | null;
                /**
                 * Optional filter by items that have a tmdb id or not.
                 */
                hasTmdbId?: boolean | null;
                /**
                 * Optional filter by items with trailers.
                 */
                hasTrailer?: boolean | null;
                /**
                 * Optional filter by items that have a tvdb id or not.
                 */
                hasTvdbId?: boolean | null;
                /**
                 * Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                 */
                ids?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                 */
                imageTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional filter by items that are 3D, or not.
                 */
                is3D?: boolean | null;
                /**
                 * Optional filter by items that are marked as favorite, or not.
                 */
                isFavorite?: boolean | null;
                /**
                 * Optional filter by items that are HD or not.
                 */
                isHd?: boolean | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter by items that are locked.
                 */
                isLocked?: boolean | null;
                /**
                 * Optional filter by items that are missing episodes or not.
                 */
                isMissing?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter by items that are placeholders
                 */
                isPlaceHolder?: boolean | null;
                /**
                 * Optional filter by items that are played, or not.
                 */
                isPlayed?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional filter by items that are unaired episodes or not.
                 */
                isUnaired?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                locationTypes?: string;
                /**
                 * Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                 */
                maxOfficialRating?: string;
                /**
                 * Optional filter by maximum number of game players.
                 */
                maxPlayers?: number | null;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxPremiereDate?: string;
                /**
                 * Optional filter by MediaType. Allows multiple, comma delimited.
                 */
                mediaTypes?: string;
                /**
                 * Optional filter by minimum community rating.
                 */
                minCommunityRating?: number | null;
                /**
                 * Optional filter by minimum critic rating.
                 */
                minCriticRating?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSaved?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSavedForUser?: string;
                /**
                 * Optional filter by minimum index number.
                 */
                minIndexNumber?: number | null;
                /**
                 * Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                 */
                minOfficialRating?: string;
                /**
                 * Optional filter by minimum number of game players.
                 */
                minPlayers?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minPremiereDate?: string;
                /**
                 * Optional filter by items whose name is equally or lesser than a given input string.
                 */
                nameLessThan?: string;
                /**
                 * Optional filter by items whose name is sorted equally than a given input string.
                 */
                nameStartsWith?: string;
                /**
                 * Optional filter by items whose name is sorted equally or greater than a given input string.
                 */
                nameStartsWithOrGreater?: string;
                /**
                 * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                 */
                officialRatings?: string;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional filter by parent index number.
                 */
                parentIndexNumber?: number | null;
                /**
                 * Optional filter by Path.
                 */
                path?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                person?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                personIds?: string;
                /**
                 * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                 */
                personTypes?: string;
                /**
                 * When searching within folders, this determines whether or not the search will be recursive. true/false
                 */
                recursive?: boolean;
                /**
                 * Optional filter by Series Status. Allows multiple, comma delimeted.
                 */
                seriesStatus?: string;
                /**
                 * Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                 */
                sortBy?: string;
                /**
                 * Sort Order - Ascending,Descending
                 */
                sortOrder?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studioIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studios?: string;
                /**
                 * Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                 */
                subtitleCodecs?: string;
                /**
                 * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                 */
                tags?: string;
                /**
                 * User Id
                 */
                userId?: string;
                /**
                 * Optional filter by VideoCodec. Allows multiple, comma delimeted.
                 */
                videoCodecs?: string;
                /**
                 * Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                 */
                videoTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                 */
                years?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<TagItem> object.
                 */
                200: QueryResult_UserLibrary_TagItem;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Containers': {
        get: {
            req: {
                /**
                 * Optional. Return items that are siblings of a supplied item.
                 */
                adjacentTo?: string;
                /**
                 * Gets all episodes that aired during a season, including specials.
                 */
                airedDuringSeason?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                 */
                albums?: string;
                /**
                 * Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                 */
                anyProviderIdEquals?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artistIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artists?: string;
                /**
                 * Artist or AlbumArtist
                 */
                artistType?: string;
                /**
                 * Optional filter by AudioCodec. Allows multiple, comma delimeted.
                 */
                audioCodecs?: string;
                /**
                 * Optional filter by Container. Allows multiple, comma delimeted.
                 */
                containers?: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                 */
                excludeItemIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                excludeItemTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                excludeLocationTypes?: string;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                 */
                filters?: string;
                /**
                 * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                 */
                genres?: string;
                /**
                 * Whether or not to hide items behind their boxsets.
                 */
                groupItemsIntoCollections?: boolean;
                /**
                 * Optional filter by items that have an imdb id or not.
                 */
                hasImdbId?: boolean | null;
                /**
                 * Optional filter by items that have official ratings
                 */
                hasOfficialRating?: boolean | null;
                /**
                 * Optional filter by items that have an overview or not.
                 */
                hasOverview?: boolean | null;
                /**
                 * Optional filter by items that have or do not have a parental rating
                 */
                hasParentalRating?: boolean | null;
                /**
                 * Optional filter by items with special features.
                 */
                hasSpecialFeature?: boolean | null;
                /**
                 * Optional filter by items with subtitles.
                 */
                hasSubtitles?: boolean | null;
                /**
                 * Optional filter by items with theme songs.
                 */
                hasThemeSong?: boolean | null;
                /**
                 * Optional filter by items with theme videos.
                 */
                hasThemeVideo?: boolean | null;
                /**
                 * Optional filter by items that have a tmdb id or not.
                 */
                hasTmdbId?: boolean | null;
                /**
                 * Optional filter by items with trailers.
                 */
                hasTrailer?: boolean | null;
                /**
                 * Optional filter by items that have a tvdb id or not.
                 */
                hasTvdbId?: boolean | null;
                /**
                 * Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                 */
                ids?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                 */
                imageTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional filter by items that are 3D, or not.
                 */
                is3D?: boolean | null;
                /**
                 * Optional filter by items that are marked as favorite, or not.
                 */
                isFavorite?: boolean | null;
                /**
                 * Optional filter by items that are HD or not.
                 */
                isHd?: boolean | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter by items that are locked.
                 */
                isLocked?: boolean | null;
                /**
                 * Optional filter by items that are missing episodes or not.
                 */
                isMissing?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter by items that are placeholders
                 */
                isPlaceHolder?: boolean | null;
                /**
                 * Optional filter by items that are played, or not.
                 */
                isPlayed?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional filter by items that are unaired episodes or not.
                 */
                isUnaired?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                locationTypes?: string;
                /**
                 * Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                 */
                maxOfficialRating?: string;
                /**
                 * Optional filter by maximum number of game players.
                 */
                maxPlayers?: number | null;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxPremiereDate?: string;
                /**
                 * Optional filter by MediaType. Allows multiple, comma delimited.
                 */
                mediaTypes?: string;
                /**
                 * Optional filter by minimum community rating.
                 */
                minCommunityRating?: number | null;
                /**
                 * Optional filter by minimum critic rating.
                 */
                minCriticRating?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSaved?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSavedForUser?: string;
                /**
                 * Optional filter by minimum index number.
                 */
                minIndexNumber?: number | null;
                /**
                 * Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                 */
                minOfficialRating?: string;
                /**
                 * Optional filter by minimum number of game players.
                 */
                minPlayers?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minPremiereDate?: string;
                /**
                 * Optional filter by items whose name is equally or lesser than a given input string.
                 */
                nameLessThan?: string;
                /**
                 * Optional filter by items whose name is sorted equally than a given input string.
                 */
                nameStartsWith?: string;
                /**
                 * Optional filter by items whose name is sorted equally or greater than a given input string.
                 */
                nameStartsWithOrGreater?: string;
                /**
                 * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                 */
                officialRatings?: string;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional filter by parent index number.
                 */
                parentIndexNumber?: number | null;
                /**
                 * Optional filter by Path.
                 */
                path?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                person?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                personIds?: string;
                /**
                 * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                 */
                personTypes?: string;
                /**
                 * When searching within folders, this determines whether or not the search will be recursive. true/false
                 */
                recursive?: boolean;
                /**
                 * Optional filter by Series Status. Allows multiple, comma delimeted.
                 */
                seriesStatus?: string;
                /**
                 * Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                 */
                sortBy?: string;
                /**
                 * Sort Order - Ascending,Descending
                 */
                sortOrder?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studioIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studios?: string;
                /**
                 * Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                 */
                subtitleCodecs?: string;
                /**
                 * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                 */
                tags?: string;
                /**
                 * User Id
                 */
                userId?: string;
                /**
                 * Optional filter by VideoCodec. Allows multiple, comma delimeted.
                 */
                videoCodecs?: string;
                /**
                 * Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                 */
                videoTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                 */
                years?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<TagItem> object.
                 */
                200: QueryResult_UserLibrary_TagItem;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/SubtitleCodecs': {
        get: {
            req: {
                /**
                 * Optional. Return items that are siblings of a supplied item.
                 */
                adjacentTo?: string;
                /**
                 * Gets all episodes that aired during a season, including specials.
                 */
                airedDuringSeason?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                 */
                albums?: string;
                /**
                 * Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                 */
                anyProviderIdEquals?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artistIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artists?: string;
                /**
                 * Artist or AlbumArtist
                 */
                artistType?: string;
                /**
                 * Optional filter by AudioCodec. Allows multiple, comma delimeted.
                 */
                audioCodecs?: string;
                /**
                 * Optional filter by Container. Allows multiple, comma delimeted.
                 */
                containers?: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                 */
                excludeItemIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                excludeItemTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                excludeLocationTypes?: string;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                 */
                filters?: string;
                /**
                 * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                 */
                genres?: string;
                /**
                 * Whether or not to hide items behind their boxsets.
                 */
                groupItemsIntoCollections?: boolean;
                /**
                 * Optional filter by items that have an imdb id or not.
                 */
                hasImdbId?: boolean | null;
                /**
                 * Optional filter by items that have official ratings
                 */
                hasOfficialRating?: boolean | null;
                /**
                 * Optional filter by items that have an overview or not.
                 */
                hasOverview?: boolean | null;
                /**
                 * Optional filter by items that have or do not have a parental rating
                 */
                hasParentalRating?: boolean | null;
                /**
                 * Optional filter by items with special features.
                 */
                hasSpecialFeature?: boolean | null;
                /**
                 * Optional filter by items with subtitles.
                 */
                hasSubtitles?: boolean | null;
                /**
                 * Optional filter by items with theme songs.
                 */
                hasThemeSong?: boolean | null;
                /**
                 * Optional filter by items with theme videos.
                 */
                hasThemeVideo?: boolean | null;
                /**
                 * Optional filter by items that have a tmdb id or not.
                 */
                hasTmdbId?: boolean | null;
                /**
                 * Optional filter by items with trailers.
                 */
                hasTrailer?: boolean | null;
                /**
                 * Optional filter by items that have a tvdb id or not.
                 */
                hasTvdbId?: boolean | null;
                /**
                 * Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                 */
                ids?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                 */
                imageTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional filter by items that are 3D, or not.
                 */
                is3D?: boolean | null;
                /**
                 * Optional filter by items that are marked as favorite, or not.
                 */
                isFavorite?: boolean | null;
                /**
                 * Optional filter by items that are HD or not.
                 */
                isHd?: boolean | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter by items that are locked.
                 */
                isLocked?: boolean | null;
                /**
                 * Optional filter by items that are missing episodes or not.
                 */
                isMissing?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter by items that are placeholders
                 */
                isPlaceHolder?: boolean | null;
                /**
                 * Optional filter by items that are played, or not.
                 */
                isPlayed?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional filter by items that are unaired episodes or not.
                 */
                isUnaired?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                locationTypes?: string;
                /**
                 * Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                 */
                maxOfficialRating?: string;
                /**
                 * Optional filter by maximum number of game players.
                 */
                maxPlayers?: number | null;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxPremiereDate?: string;
                /**
                 * Optional filter by MediaType. Allows multiple, comma delimited.
                 */
                mediaTypes?: string;
                /**
                 * Optional filter by minimum community rating.
                 */
                minCommunityRating?: number | null;
                /**
                 * Optional filter by minimum critic rating.
                 */
                minCriticRating?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSaved?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSavedForUser?: string;
                /**
                 * Optional filter by minimum index number.
                 */
                minIndexNumber?: number | null;
                /**
                 * Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                 */
                minOfficialRating?: string;
                /**
                 * Optional filter by minimum number of game players.
                 */
                minPlayers?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minPremiereDate?: string;
                /**
                 * Optional filter by items whose name is equally or lesser than a given input string.
                 */
                nameLessThan?: string;
                /**
                 * Optional filter by items whose name is sorted equally than a given input string.
                 */
                nameStartsWith?: string;
                /**
                 * Optional filter by items whose name is sorted equally or greater than a given input string.
                 */
                nameStartsWithOrGreater?: string;
                /**
                 * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                 */
                officialRatings?: string;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional filter by parent index number.
                 */
                parentIndexNumber?: number | null;
                /**
                 * Optional filter by Path.
                 */
                path?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                person?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                personIds?: string;
                /**
                 * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                 */
                personTypes?: string;
                /**
                 * When searching within folders, this determines whether or not the search will be recursive. true/false
                 */
                recursive?: boolean;
                /**
                 * Optional filter by Series Status. Allows multiple, comma delimeted.
                 */
                seriesStatus?: string;
                /**
                 * Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                 */
                sortBy?: string;
                /**
                 * Sort Order - Ascending,Descending
                 */
                sortOrder?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studioIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studios?: string;
                /**
                 * Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                 */
                subtitleCodecs?: string;
                /**
                 * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                 */
                tags?: string;
                /**
                 * User Id
                 */
                userId?: string;
                /**
                 * Optional filter by VideoCodec. Allows multiple, comma delimeted.
                 */
                videoCodecs?: string;
                /**
                 * Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                 */
                videoTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                 */
                years?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<TagItem> object.
                 */
                200: QueryResult_UserLibrary_TagItem;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Tags': {
        get: {
            req: {
                /**
                 * Optional. Return items that are siblings of a supplied item.
                 */
                adjacentTo?: string;
                /**
                 * Gets all episodes that aired during a season, including specials.
                 */
                airedDuringSeason?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                 */
                albums?: string;
                /**
                 * Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                 */
                anyProviderIdEquals?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artistIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artists?: string;
                /**
                 * Artist or AlbumArtist
                 */
                artistType?: string;
                /**
                 * Optional filter by AudioCodec. Allows multiple, comma delimeted.
                 */
                audioCodecs?: string;
                /**
                 * Optional filter by Container. Allows multiple, comma delimeted.
                 */
                containers?: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                 */
                excludeItemIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                excludeItemTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                excludeLocationTypes?: string;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                 */
                filters?: string;
                /**
                 * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                 */
                genres?: string;
                /**
                 * Whether or not to hide items behind their boxsets.
                 */
                groupItemsIntoCollections?: boolean;
                /**
                 * Optional filter by items that have an imdb id or not.
                 */
                hasImdbId?: boolean | null;
                /**
                 * Optional filter by items that have official ratings
                 */
                hasOfficialRating?: boolean | null;
                /**
                 * Optional filter by items that have an overview or not.
                 */
                hasOverview?: boolean | null;
                /**
                 * Optional filter by items that have or do not have a parental rating
                 */
                hasParentalRating?: boolean | null;
                /**
                 * Optional filter by items with special features.
                 */
                hasSpecialFeature?: boolean | null;
                /**
                 * Optional filter by items with subtitles.
                 */
                hasSubtitles?: boolean | null;
                /**
                 * Optional filter by items with theme songs.
                 */
                hasThemeSong?: boolean | null;
                /**
                 * Optional filter by items with theme videos.
                 */
                hasThemeVideo?: boolean | null;
                /**
                 * Optional filter by items that have a tmdb id or not.
                 */
                hasTmdbId?: boolean | null;
                /**
                 * Optional filter by items with trailers.
                 */
                hasTrailer?: boolean | null;
                /**
                 * Optional filter by items that have a tvdb id or not.
                 */
                hasTvdbId?: boolean | null;
                /**
                 * Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                 */
                ids?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                 */
                imageTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional filter by items that are 3D, or not.
                 */
                is3D?: boolean | null;
                /**
                 * Optional filter by items that are marked as favorite, or not.
                 */
                isFavorite?: boolean | null;
                /**
                 * Optional filter by items that are HD or not.
                 */
                isHd?: boolean | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter by items that are locked.
                 */
                isLocked?: boolean | null;
                /**
                 * Optional filter by items that are missing episodes or not.
                 */
                isMissing?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter by items that are placeholders
                 */
                isPlaceHolder?: boolean | null;
                /**
                 * Optional filter by items that are played, or not.
                 */
                isPlayed?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional filter by items that are unaired episodes or not.
                 */
                isUnaired?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                locationTypes?: string;
                /**
                 * Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                 */
                maxOfficialRating?: string;
                /**
                 * Optional filter by maximum number of game players.
                 */
                maxPlayers?: number | null;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxPremiereDate?: string;
                /**
                 * Optional filter by MediaType. Allows multiple, comma delimited.
                 */
                mediaTypes?: string;
                /**
                 * Optional filter by minimum community rating.
                 */
                minCommunityRating?: number | null;
                /**
                 * Optional filter by minimum critic rating.
                 */
                minCriticRating?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSaved?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSavedForUser?: string;
                /**
                 * Optional filter by minimum index number.
                 */
                minIndexNumber?: number | null;
                /**
                 * Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                 */
                minOfficialRating?: string;
                /**
                 * Optional filter by minimum number of game players.
                 */
                minPlayers?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minPremiereDate?: string;
                /**
                 * Optional filter by items whose name is equally or lesser than a given input string.
                 */
                nameLessThan?: string;
                /**
                 * Optional filter by items whose name is sorted equally than a given input string.
                 */
                nameStartsWith?: string;
                /**
                 * Optional filter by items whose name is sorted equally or greater than a given input string.
                 */
                nameStartsWithOrGreater?: string;
                /**
                 * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                 */
                officialRatings?: string;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional filter by parent index number.
                 */
                parentIndexNumber?: number | null;
                /**
                 * Optional filter by Path.
                 */
                path?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                person?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                personIds?: string;
                /**
                 * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                 */
                personTypes?: string;
                /**
                 * When searching within folders, this determines whether or not the search will be recursive. true/false
                 */
                recursive?: boolean;
                /**
                 * Optional filter by Series Status. Allows multiple, comma delimeted.
                 */
                seriesStatus?: string;
                /**
                 * Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                 */
                sortBy?: string;
                /**
                 * Sort Order - Ascending,Descending
                 */
                sortOrder?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studioIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studios?: string;
                /**
                 * Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                 */
                subtitleCodecs?: string;
                /**
                 * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                 */
                tags?: string;
                /**
                 * User Id
                 */
                userId?: string;
                /**
                 * Optional filter by VideoCodec. Allows multiple, comma delimeted.
                 */
                videoCodecs?: string;
                /**
                 * Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                 */
                videoTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                 */
                years?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<TagItem> object.
                 */
                200: QueryResult_UserLibrary_TagItem;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/VideoCodecs': {
        get: {
            req: {
                /**
                 * Optional. Return items that are siblings of a supplied item.
                 */
                adjacentTo?: string;
                /**
                 * Gets all episodes that aired during a season, including specials.
                 */
                airedDuringSeason?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                 */
                albums?: string;
                /**
                 * Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                 */
                anyProviderIdEquals?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artistIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artists?: string;
                /**
                 * Artist or AlbumArtist
                 */
                artistType?: string;
                /**
                 * Optional filter by AudioCodec. Allows multiple, comma delimeted.
                 */
                audioCodecs?: string;
                /**
                 * Optional filter by Container. Allows multiple, comma delimeted.
                 */
                containers?: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                 */
                excludeItemIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                excludeItemTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                excludeLocationTypes?: string;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                 */
                filters?: string;
                /**
                 * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                 */
                genres?: string;
                /**
                 * Whether or not to hide items behind their boxsets.
                 */
                groupItemsIntoCollections?: boolean;
                /**
                 * Optional filter by items that have an imdb id or not.
                 */
                hasImdbId?: boolean | null;
                /**
                 * Optional filter by items that have official ratings
                 */
                hasOfficialRating?: boolean | null;
                /**
                 * Optional filter by items that have an overview or not.
                 */
                hasOverview?: boolean | null;
                /**
                 * Optional filter by items that have or do not have a parental rating
                 */
                hasParentalRating?: boolean | null;
                /**
                 * Optional filter by items with special features.
                 */
                hasSpecialFeature?: boolean | null;
                /**
                 * Optional filter by items with subtitles.
                 */
                hasSubtitles?: boolean | null;
                /**
                 * Optional filter by items with theme songs.
                 */
                hasThemeSong?: boolean | null;
                /**
                 * Optional filter by items with theme videos.
                 */
                hasThemeVideo?: boolean | null;
                /**
                 * Optional filter by items that have a tmdb id or not.
                 */
                hasTmdbId?: boolean | null;
                /**
                 * Optional filter by items with trailers.
                 */
                hasTrailer?: boolean | null;
                /**
                 * Optional filter by items that have a tvdb id or not.
                 */
                hasTvdbId?: boolean | null;
                /**
                 * Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                 */
                ids?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                 */
                imageTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional filter by items that are 3D, or not.
                 */
                is3D?: boolean | null;
                /**
                 * Optional filter by items that are marked as favorite, or not.
                 */
                isFavorite?: boolean | null;
                /**
                 * Optional filter by items that are HD or not.
                 */
                isHd?: boolean | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter by items that are locked.
                 */
                isLocked?: boolean | null;
                /**
                 * Optional filter by items that are missing episodes or not.
                 */
                isMissing?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter by items that are placeholders
                 */
                isPlaceHolder?: boolean | null;
                /**
                 * Optional filter by items that are played, or not.
                 */
                isPlayed?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional filter by items that are unaired episodes or not.
                 */
                isUnaired?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                locationTypes?: string;
                /**
                 * Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                 */
                maxOfficialRating?: string;
                /**
                 * Optional filter by maximum number of game players.
                 */
                maxPlayers?: number | null;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxPremiereDate?: string;
                /**
                 * Optional filter by MediaType. Allows multiple, comma delimited.
                 */
                mediaTypes?: string;
                /**
                 * Optional filter by minimum community rating.
                 */
                minCommunityRating?: number | null;
                /**
                 * Optional filter by minimum critic rating.
                 */
                minCriticRating?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSaved?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSavedForUser?: string;
                /**
                 * Optional filter by minimum index number.
                 */
                minIndexNumber?: number | null;
                /**
                 * Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                 */
                minOfficialRating?: string;
                /**
                 * Optional filter by minimum number of game players.
                 */
                minPlayers?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minPremiereDate?: string;
                /**
                 * Optional filter by items whose name is equally or lesser than a given input string.
                 */
                nameLessThan?: string;
                /**
                 * Optional filter by items whose name is sorted equally than a given input string.
                 */
                nameStartsWith?: string;
                /**
                 * Optional filter by items whose name is sorted equally or greater than a given input string.
                 */
                nameStartsWithOrGreater?: string;
                /**
                 * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                 */
                officialRatings?: string;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional filter by parent index number.
                 */
                parentIndexNumber?: number | null;
                /**
                 * Optional filter by Path.
                 */
                path?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                person?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                personIds?: string;
                /**
                 * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                 */
                personTypes?: string;
                /**
                 * When searching within folders, this determines whether or not the search will be recursive. true/false
                 */
                recursive?: boolean;
                /**
                 * Optional filter by Series Status. Allows multiple, comma delimeted.
                 */
                seriesStatus?: string;
                /**
                 * Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                 */
                sortBy?: string;
                /**
                 * Sort Order - Ascending,Descending
                 */
                sortOrder?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studioIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studios?: string;
                /**
                 * Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                 */
                subtitleCodecs?: string;
                /**
                 * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                 */
                tags?: string;
                /**
                 * User Id
                 */
                userId?: string;
                /**
                 * Optional filter by VideoCodec. Allows multiple, comma delimeted.
                 */
                videoCodecs?: string;
                /**
                 * Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                 */
                videoTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                 */
                years?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<TagItem> object.
                 */
                200: QueryResult_UserLibrary_TagItem;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Years': {
        get: {
            req: {
                /**
                 * Optional. Return items that are siblings of a supplied item.
                 */
                adjacentTo?: string;
                /**
                 * Gets all episodes that aired during a season, including specials.
                 */
                airedDuringSeason?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                 */
                albums?: string;
                /**
                 * Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                 */
                anyProviderIdEquals?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artistIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artists?: string;
                /**
                 * Artist or AlbumArtist
                 */
                artistType?: string;
                /**
                 * Optional filter by AudioCodec. Allows multiple, comma delimeted.
                 */
                audioCodecs?: string;
                /**
                 * Optional filter by Container. Allows multiple, comma delimeted.
                 */
                containers?: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                 */
                excludeItemIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                excludeItemTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                excludeLocationTypes?: string;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                 */
                filters?: string;
                /**
                 * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                 */
                genres?: string;
                /**
                 * Whether or not to hide items behind their boxsets.
                 */
                groupItemsIntoCollections?: boolean;
                /**
                 * Optional filter by items that have an imdb id or not.
                 */
                hasImdbId?: boolean | null;
                /**
                 * Optional filter by items that have official ratings
                 */
                hasOfficialRating?: boolean | null;
                /**
                 * Optional filter by items that have an overview or not.
                 */
                hasOverview?: boolean | null;
                /**
                 * Optional filter by items that have or do not have a parental rating
                 */
                hasParentalRating?: boolean | null;
                /**
                 * Optional filter by items with special features.
                 */
                hasSpecialFeature?: boolean | null;
                /**
                 * Optional filter by items with subtitles.
                 */
                hasSubtitles?: boolean | null;
                /**
                 * Optional filter by items with theme songs.
                 */
                hasThemeSong?: boolean | null;
                /**
                 * Optional filter by items with theme videos.
                 */
                hasThemeVideo?: boolean | null;
                /**
                 * Optional filter by items that have a tmdb id or not.
                 */
                hasTmdbId?: boolean | null;
                /**
                 * Optional filter by items with trailers.
                 */
                hasTrailer?: boolean | null;
                /**
                 * Optional filter by items that have a tvdb id or not.
                 */
                hasTvdbId?: boolean | null;
                /**
                 * Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                 */
                ids?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                 */
                imageTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional filter by items that are 3D, or not.
                 */
                is3D?: boolean | null;
                /**
                 * Optional filter by items that are marked as favorite, or not.
                 */
                isFavorite?: boolean | null;
                /**
                 * Optional filter by items that are HD or not.
                 */
                isHd?: boolean | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter by items that are locked.
                 */
                isLocked?: boolean | null;
                /**
                 * Optional filter by items that are missing episodes or not.
                 */
                isMissing?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter by items that are placeholders
                 */
                isPlaceHolder?: boolean | null;
                /**
                 * Optional filter by items that are played, or not.
                 */
                isPlayed?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional filter by items that are unaired episodes or not.
                 */
                isUnaired?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                locationTypes?: string;
                /**
                 * Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                 */
                maxOfficialRating?: string;
                /**
                 * Optional filter by maximum number of game players.
                 */
                maxPlayers?: number | null;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxPremiereDate?: string;
                /**
                 * Optional filter by MediaType. Allows multiple, comma delimited.
                 */
                mediaTypes?: string;
                /**
                 * Optional filter by minimum community rating.
                 */
                minCommunityRating?: number | null;
                /**
                 * Optional filter by minimum critic rating.
                 */
                minCriticRating?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSaved?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSavedForUser?: string;
                /**
                 * Optional filter by minimum index number.
                 */
                minIndexNumber?: number | null;
                /**
                 * Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                 */
                minOfficialRating?: string;
                /**
                 * Optional filter by minimum number of game players.
                 */
                minPlayers?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minPremiereDate?: string;
                /**
                 * Optional filter by items whose name is equally or lesser than a given input string.
                 */
                nameLessThan?: string;
                /**
                 * Optional filter by items whose name is sorted equally than a given input string.
                 */
                nameStartsWith?: string;
                /**
                 * Optional filter by items whose name is sorted equally or greater than a given input string.
                 */
                nameStartsWithOrGreater?: string;
                /**
                 * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                 */
                officialRatings?: string;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional filter by parent index number.
                 */
                parentIndexNumber?: number | null;
                /**
                 * Optional filter by Path.
                 */
                path?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                person?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                personIds?: string;
                /**
                 * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                 */
                personTypes?: string;
                /**
                 * When searching within folders, this determines whether or not the search will be recursive. true/false
                 */
                recursive?: boolean;
                /**
                 * Optional filter by Series Status. Allows multiple, comma delimeted.
                 */
                seriesStatus?: string;
                /**
                 * Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                 */
                sortBy?: string;
                /**
                 * Sort Order - Ascending,Descending
                 */
                sortOrder?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studioIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studios?: string;
                /**
                 * Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                 */
                subtitleCodecs?: string;
                /**
                 * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                 */
                tags?: string;
                /**
                 * User Id
                 */
                userId?: string;
                /**
                 * Optional filter by VideoCodec. Allows multiple, comma delimeted.
                 */
                videoCodecs?: string;
                /**
                 * Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                 */
                videoTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                 */
                years?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<TagItem> object.
                 */
                200: QueryResult_UserLibrary_TagItem;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Artists/Prefixes': {
        get: {
            req: {
                /**
                 * Optional. Return items that are siblings of a supplied item.
                 */
                adjacentTo?: string;
                /**
                 * Gets all episodes that aired during a season, including specials.
                 */
                airedDuringSeason?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                 */
                albums?: string;
                /**
                 * Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                 */
                anyProviderIdEquals?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artistIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artists?: string;
                /**
                 * Artist or AlbumArtist
                 */
                artistType?: string;
                /**
                 * Optional filter by AudioCodec. Allows multiple, comma delimeted.
                 */
                audioCodecs?: string;
                /**
                 * Optional filter by Container. Allows multiple, comma delimeted.
                 */
                containers?: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                 */
                excludeItemIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                excludeItemTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                excludeLocationTypes?: string;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                 */
                filters?: string;
                /**
                 * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                 */
                genres?: string;
                /**
                 * Whether or not to hide items behind their boxsets.
                 */
                groupItemsIntoCollections?: boolean;
                /**
                 * Optional filter by items that have an imdb id or not.
                 */
                hasImdbId?: boolean | null;
                /**
                 * Optional filter by items that have official ratings
                 */
                hasOfficialRating?: boolean | null;
                /**
                 * Optional filter by items that have an overview or not.
                 */
                hasOverview?: boolean | null;
                /**
                 * Optional filter by items that have or do not have a parental rating
                 */
                hasParentalRating?: boolean | null;
                /**
                 * Optional filter by items with special features.
                 */
                hasSpecialFeature?: boolean | null;
                /**
                 * Optional filter by items with subtitles.
                 */
                hasSubtitles?: boolean | null;
                /**
                 * Optional filter by items with theme songs.
                 */
                hasThemeSong?: boolean | null;
                /**
                 * Optional filter by items with theme videos.
                 */
                hasThemeVideo?: boolean | null;
                /**
                 * Optional filter by items that have a tmdb id or not.
                 */
                hasTmdbId?: boolean | null;
                /**
                 * Optional filter by items with trailers.
                 */
                hasTrailer?: boolean | null;
                /**
                 * Optional filter by items that have a tvdb id or not.
                 */
                hasTvdbId?: boolean | null;
                /**
                 * Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                 */
                ids?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                 */
                imageTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional filter by items that are 3D, or not.
                 */
                is3D?: boolean | null;
                /**
                 * Optional filter by items that are marked as favorite, or not.
                 */
                isFavorite?: boolean | null;
                /**
                 * Optional filter by items that are HD or not.
                 */
                isHd?: boolean | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter by items that are locked.
                 */
                isLocked?: boolean | null;
                /**
                 * Optional filter by items that are missing episodes or not.
                 */
                isMissing?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter by items that are placeholders
                 */
                isPlaceHolder?: boolean | null;
                /**
                 * Optional filter by items that are played, or not.
                 */
                isPlayed?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional filter by items that are unaired episodes or not.
                 */
                isUnaired?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                locationTypes?: string;
                /**
                 * Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                 */
                maxOfficialRating?: string;
                /**
                 * Optional filter by maximum number of game players.
                 */
                maxPlayers?: number | null;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxPremiereDate?: string;
                /**
                 * Optional filter by MediaType. Allows multiple, comma delimited.
                 */
                mediaTypes?: string;
                /**
                 * Optional filter by minimum community rating.
                 */
                minCommunityRating?: number | null;
                /**
                 * Optional filter by minimum critic rating.
                 */
                minCriticRating?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSaved?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSavedForUser?: string;
                /**
                 * Optional filter by minimum index number.
                 */
                minIndexNumber?: number | null;
                /**
                 * Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                 */
                minOfficialRating?: string;
                /**
                 * Optional filter by minimum number of game players.
                 */
                minPlayers?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minPremiereDate?: string;
                /**
                 * Optional filter by items whose name is equally or lesser than a given input string.
                 */
                nameLessThan?: string;
                /**
                 * Optional filter by items whose name is sorted equally than a given input string.
                 */
                nameStartsWith?: string;
                /**
                 * Optional filter by items whose name is sorted equally or greater than a given input string.
                 */
                nameStartsWithOrGreater?: string;
                /**
                 * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                 */
                officialRatings?: string;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional filter by parent index number.
                 */
                parentIndexNumber?: number | null;
                /**
                 * Optional filter by Path.
                 */
                path?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                person?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                personIds?: string;
                /**
                 * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                 */
                personTypes?: string;
                /**
                 * When searching within folders, this determines whether or not the search will be recursive. true/false
                 */
                recursive?: boolean;
                /**
                 * Optional filter by Series Status. Allows multiple, comma delimeted.
                 */
                seriesStatus?: string;
                /**
                 * Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                 */
                sortBy?: string;
                /**
                 * Sort Order - Ascending,Descending
                 */
                sortOrder?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studioIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studios?: string;
                /**
                 * Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                 */
                subtitleCodecs?: string;
                /**
                 * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                 */
                tags?: string;
                /**
                 * User Id
                 */
                userId?: string;
                /**
                 * Optional filter by VideoCodec. Allows multiple, comma delimeted.
                 */
                videoCodecs?: string;
                /**
                 * Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                 */
                videoTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                 */
                years?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a NameValuePair[] object.
                 */
                200: Array<NameValuePair>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/Prefixes': {
        get: {
            req: {
                /**
                 * Optional. Return items that are siblings of a supplied item.
                 */
                adjacentTo?: string;
                /**
                 * Gets all episodes that aired during a season, including specials.
                 */
                airedDuringSeason?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                 */
                albums?: string;
                /**
                 * Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                 */
                anyProviderIdEquals?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artistIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artists?: string;
                /**
                 * Artist or AlbumArtist
                 */
                artistType?: string;
                /**
                 * Optional filter by AudioCodec. Allows multiple, comma delimeted.
                 */
                audioCodecs?: string;
                /**
                 * Optional filter by Container. Allows multiple, comma delimeted.
                 */
                containers?: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                 */
                excludeItemIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                excludeItemTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                excludeLocationTypes?: string;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                 */
                filters?: string;
                /**
                 * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                 */
                genres?: string;
                /**
                 * Whether or not to hide items behind their boxsets.
                 */
                groupItemsIntoCollections?: boolean;
                /**
                 * Optional filter by items that have an imdb id or not.
                 */
                hasImdbId?: boolean | null;
                /**
                 * Optional filter by items that have official ratings
                 */
                hasOfficialRating?: boolean | null;
                /**
                 * Optional filter by items that have an overview or not.
                 */
                hasOverview?: boolean | null;
                /**
                 * Optional filter by items that have or do not have a parental rating
                 */
                hasParentalRating?: boolean | null;
                /**
                 * Optional filter by items with special features.
                 */
                hasSpecialFeature?: boolean | null;
                /**
                 * Optional filter by items with subtitles.
                 */
                hasSubtitles?: boolean | null;
                /**
                 * Optional filter by items with theme songs.
                 */
                hasThemeSong?: boolean | null;
                /**
                 * Optional filter by items with theme videos.
                 */
                hasThemeVideo?: boolean | null;
                /**
                 * Optional filter by items that have a tmdb id or not.
                 */
                hasTmdbId?: boolean | null;
                /**
                 * Optional filter by items with trailers.
                 */
                hasTrailer?: boolean | null;
                /**
                 * Optional filter by items that have a tvdb id or not.
                 */
                hasTvdbId?: boolean | null;
                /**
                 * Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                 */
                ids?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                 */
                imageTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional filter by items that are 3D, or not.
                 */
                is3D?: boolean | null;
                /**
                 * Optional filter by items that are marked as favorite, or not.
                 */
                isFavorite?: boolean | null;
                /**
                 * Optional filter by items that are HD or not.
                 */
                isHd?: boolean | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter by items that are locked.
                 */
                isLocked?: boolean | null;
                /**
                 * Optional filter by items that are missing episodes or not.
                 */
                isMissing?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter by items that are placeholders
                 */
                isPlaceHolder?: boolean | null;
                /**
                 * Optional filter by items that are played, or not.
                 */
                isPlayed?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional filter by items that are unaired episodes or not.
                 */
                isUnaired?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                locationTypes?: string;
                /**
                 * Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                 */
                maxOfficialRating?: string;
                /**
                 * Optional filter by maximum number of game players.
                 */
                maxPlayers?: number | null;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxPremiereDate?: string;
                /**
                 * Optional filter by MediaType. Allows multiple, comma delimited.
                 */
                mediaTypes?: string;
                /**
                 * Optional filter by minimum community rating.
                 */
                minCommunityRating?: number | null;
                /**
                 * Optional filter by minimum critic rating.
                 */
                minCriticRating?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSaved?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSavedForUser?: string;
                /**
                 * Optional filter by minimum index number.
                 */
                minIndexNumber?: number | null;
                /**
                 * Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                 */
                minOfficialRating?: string;
                /**
                 * Optional filter by minimum number of game players.
                 */
                minPlayers?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minPremiereDate?: string;
                /**
                 * Optional filter by items whose name is equally or lesser than a given input string.
                 */
                nameLessThan?: string;
                /**
                 * Optional filter by items whose name is sorted equally than a given input string.
                 */
                nameStartsWith?: string;
                /**
                 * Optional filter by items whose name is sorted equally or greater than a given input string.
                 */
                nameStartsWithOrGreater?: string;
                /**
                 * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                 */
                officialRatings?: string;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional filter by parent index number.
                 */
                parentIndexNumber?: number | null;
                /**
                 * Optional filter by Path.
                 */
                path?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                person?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                personIds?: string;
                /**
                 * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                 */
                personTypes?: string;
                /**
                 * When searching within folders, this determines whether or not the search will be recursive. true/false
                 */
                recursive?: boolean;
                /**
                 * Optional filter by Series Status. Allows multiple, comma delimeted.
                 */
                seriesStatus?: string;
                /**
                 * Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                 */
                sortBy?: string;
                /**
                 * Sort Order - Ascending,Descending
                 */
                sortOrder?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studioIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studios?: string;
                /**
                 * Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                 */
                subtitleCodecs?: string;
                /**
                 * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                 */
                tags?: string;
                /**
                 * User Id
                 */
                userId?: string;
                /**
                 * Optional filter by VideoCodec. Allows multiple, comma delimeted.
                 */
                videoCodecs?: string;
                /**
                 * Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                 */
                videoTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                 */
                years?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a NameValuePair[] object.
                 */
                200: Array<NameValuePair>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Channels': {
        get: {
            req: {
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * User Id
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Channels/{Id}/Items': {
        get: {
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Channels/Items/Latest': {
        get: {
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Collections': {
        post: {
            req: {
                /**
                 * Item Ids to add to the collection
                 */
                ids?: string;
                /**
                 * Whether or not to lock the new collection.
                 */
                isLocked?: boolean;
                /**
                 * The name of the new collection.
                 */
                name?: string;
                /**
                 * Optional - create the collection within a specific folder
                 */
                parentId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a CollectionCreationResult object.
                 */
                200: Collections_CollectionCreationResult;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Collections/{Id}/Items': {
        post: {
            req: {
                id: string;
                /**
                 * Item id, comma delimited
                 */
                ids: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            req: {
                id: string;
                /**
                 * Item id, comma delimited
                 */
                ids: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Devices': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a QueryResult<DeviceInfo> object.
                 */
                200: QueryResult_Devices_DeviceInfo;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            req: {
                /**
                 * Device Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Devices/Options': {
        post: {
            req: {
                /**
                 * DeviceOptions:
                 */
                requestBody: Devices_DeviceOptions;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        get: {
            req: {
                /**
                 * Device Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Returning a DeviceOptions object.
                 */
                200: Devices_DeviceOptions;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Devices/Info': {
        get: {
            req: {
                /**
                 * Device Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Returning a DeviceInfo object.
                 */
                200: Devices_DeviceInfo;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Devices/CameraUploads': {
        get: {
            req: {
                /**
                 * Device Id
                 */
                deviceId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a ContentUploadHistory object.
                 */
                200: Devices_ContentUploadHistory;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        post: {
            req: {
                /**
                 * Album
                 */
                album: string;
                /**
                 * Device Id
                 */
                deviceId: string;
                /**
                 * Id
                 */
                id: string;
                /**
                 * Name
                 */
                name: string;
                /**
                 * Binary stream
                 */
                requestBody: (Blob | File);
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/GameGenres': {
        get: {
            req: {
                /**
                 * Optional. Return items that are siblings of a supplied item.
                 */
                adjacentTo?: string;
                /**
                 * Gets all episodes that aired during a season, including specials.
                 */
                airedDuringSeason?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                 */
                albums?: string;
                /**
                 * Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                 */
                anyProviderIdEquals?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artistIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artists?: string;
                /**
                 * Artist or AlbumArtist
                 */
                artistType?: string;
                /**
                 * Optional filter by AudioCodec. Allows multiple, comma delimeted.
                 */
                audioCodecs?: string;
                /**
                 * Optional filter by Container. Allows multiple, comma delimeted.
                 */
                containers?: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                 */
                excludeItemIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                excludeItemTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                excludeLocationTypes?: string;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                 */
                filters?: string;
                /**
                 * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                 */
                genres?: string;
                /**
                 * Whether or not to hide items behind their boxsets.
                 */
                groupItemsIntoCollections?: boolean;
                /**
                 * Optional filter by items that have an imdb id or not.
                 */
                hasImdbId?: boolean | null;
                /**
                 * Optional filter by items that have official ratings
                 */
                hasOfficialRating?: boolean | null;
                /**
                 * Optional filter by items that have an overview or not.
                 */
                hasOverview?: boolean | null;
                /**
                 * Optional filter by items that have or do not have a parental rating
                 */
                hasParentalRating?: boolean | null;
                /**
                 * Optional filter by items with special features.
                 */
                hasSpecialFeature?: boolean | null;
                /**
                 * Optional filter by items with subtitles.
                 */
                hasSubtitles?: boolean | null;
                /**
                 * Optional filter by items with theme songs.
                 */
                hasThemeSong?: boolean | null;
                /**
                 * Optional filter by items with theme videos.
                 */
                hasThemeVideo?: boolean | null;
                /**
                 * Optional filter by items that have a tmdb id or not.
                 */
                hasTmdbId?: boolean | null;
                /**
                 * Optional filter by items with trailers.
                 */
                hasTrailer?: boolean | null;
                /**
                 * Optional filter by items that have a tvdb id or not.
                 */
                hasTvdbId?: boolean | null;
                /**
                 * Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                 */
                ids?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                 */
                imageTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional filter by items that are 3D, or not.
                 */
                is3D?: boolean | null;
                /**
                 * Optional filter by items that are marked as favorite, or not.
                 */
                isFavorite?: boolean | null;
                /**
                 * Optional filter by items that are HD or not.
                 */
                isHd?: boolean | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter by items that are locked.
                 */
                isLocked?: boolean | null;
                /**
                 * Optional filter by items that are missing episodes or not.
                 */
                isMissing?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter by items that are placeholders
                 */
                isPlaceHolder?: boolean | null;
                /**
                 * Optional filter by items that are played, or not.
                 */
                isPlayed?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional filter by items that are unaired episodes or not.
                 */
                isUnaired?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                locationTypes?: string;
                /**
                 * Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                 */
                maxOfficialRating?: string;
                /**
                 * Optional filter by maximum number of game players.
                 */
                maxPlayers?: number | null;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxPremiereDate?: string;
                /**
                 * Optional filter by MediaType. Allows multiple, comma delimited.
                 */
                mediaTypes?: string;
                /**
                 * Optional filter by minimum community rating.
                 */
                minCommunityRating?: number | null;
                /**
                 * Optional filter by minimum critic rating.
                 */
                minCriticRating?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSaved?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSavedForUser?: string;
                /**
                 * Optional filter by minimum index number.
                 */
                minIndexNumber?: number | null;
                /**
                 * Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                 */
                minOfficialRating?: string;
                /**
                 * Optional filter by minimum number of game players.
                 */
                minPlayers?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minPremiereDate?: string;
                /**
                 * Optional filter by items whose name is equally or lesser than a given input string.
                 */
                nameLessThan?: string;
                /**
                 * Optional filter by items whose name is sorted equally than a given input string.
                 */
                nameStartsWith?: string;
                /**
                 * Optional filter by items whose name is sorted equally or greater than a given input string.
                 */
                nameStartsWithOrGreater?: string;
                /**
                 * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                 */
                officialRatings?: string;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional filter by parent index number.
                 */
                parentIndexNumber?: number | null;
                /**
                 * Optional filter by Path.
                 */
                path?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                person?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                personIds?: string;
                /**
                 * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                 */
                personTypes?: string;
                /**
                 * When searching within folders, this determines whether or not the search will be recursive. true/false
                 */
                recursive?: boolean;
                /**
                 * Optional filter by Series Status. Allows multiple, comma delimeted.
                 */
                seriesStatus?: string;
                /**
                 * Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                 */
                sortBy?: string;
                /**
                 * Sort Order - Ascending,Descending
                 */
                sortOrder?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studioIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studios?: string;
                /**
                 * Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                 */
                subtitleCodecs?: string;
                /**
                 * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                 */
                tags?: string;
                /**
                 * User Id
                 */
                userId?: string;
                /**
                 * Optional filter by VideoCodec. Allows multiple, comma delimeted.
                 */
                videoCodecs?: string;
                /**
                 * Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                 */
                videoTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                 */
                years?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/GameGenres/{Name}': {
        get: {
            req: {
                /**
                 * The genre name
                 */
                name: string;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a BaseItemDto object.
                 */
                200: BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Genres': {
        get: {
            req: {
                /**
                 * Optional. Return items that are siblings of a supplied item.
                 */
                adjacentTo?: string;
                /**
                 * Gets all episodes that aired during a season, including specials.
                 */
                airedDuringSeason?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                 */
                albums?: string;
                /**
                 * Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                 */
                anyProviderIdEquals?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artistIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artists?: string;
                /**
                 * Artist or AlbumArtist
                 */
                artistType?: string;
                /**
                 * Optional filter by AudioCodec. Allows multiple, comma delimeted.
                 */
                audioCodecs?: string;
                /**
                 * Optional filter by Container. Allows multiple, comma delimeted.
                 */
                containers?: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                 */
                excludeItemIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                excludeItemTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                excludeLocationTypes?: string;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                 */
                filters?: string;
                /**
                 * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                 */
                genres?: string;
                /**
                 * Whether or not to hide items behind their boxsets.
                 */
                groupItemsIntoCollections?: boolean;
                /**
                 * Optional filter by items that have an imdb id or not.
                 */
                hasImdbId?: boolean | null;
                /**
                 * Optional filter by items that have official ratings
                 */
                hasOfficialRating?: boolean | null;
                /**
                 * Optional filter by items that have an overview or not.
                 */
                hasOverview?: boolean | null;
                /**
                 * Optional filter by items that have or do not have a parental rating
                 */
                hasParentalRating?: boolean | null;
                /**
                 * Optional filter by items with special features.
                 */
                hasSpecialFeature?: boolean | null;
                /**
                 * Optional filter by items with subtitles.
                 */
                hasSubtitles?: boolean | null;
                /**
                 * Optional filter by items with theme songs.
                 */
                hasThemeSong?: boolean | null;
                /**
                 * Optional filter by items with theme videos.
                 */
                hasThemeVideo?: boolean | null;
                /**
                 * Optional filter by items that have a tmdb id or not.
                 */
                hasTmdbId?: boolean | null;
                /**
                 * Optional filter by items with trailers.
                 */
                hasTrailer?: boolean | null;
                /**
                 * Optional filter by items that have a tvdb id or not.
                 */
                hasTvdbId?: boolean | null;
                /**
                 * Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                 */
                ids?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                 */
                imageTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional filter by items that are 3D, or not.
                 */
                is3D?: boolean | null;
                /**
                 * Optional filter by items that are marked as favorite, or not.
                 */
                isFavorite?: boolean | null;
                /**
                 * Optional filter by items that are HD or not.
                 */
                isHd?: boolean | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter by items that are locked.
                 */
                isLocked?: boolean | null;
                /**
                 * Optional filter by items that are missing episodes or not.
                 */
                isMissing?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter by items that are placeholders
                 */
                isPlaceHolder?: boolean | null;
                /**
                 * Optional filter by items that are played, or not.
                 */
                isPlayed?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional filter by items that are unaired episodes or not.
                 */
                isUnaired?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                locationTypes?: string;
                /**
                 * Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                 */
                maxOfficialRating?: string;
                /**
                 * Optional filter by maximum number of game players.
                 */
                maxPlayers?: number | null;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxPremiereDate?: string;
                /**
                 * Optional filter by MediaType. Allows multiple, comma delimited.
                 */
                mediaTypes?: string;
                /**
                 * Optional filter by minimum community rating.
                 */
                minCommunityRating?: number | null;
                /**
                 * Optional filter by minimum critic rating.
                 */
                minCriticRating?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSaved?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSavedForUser?: string;
                /**
                 * Optional filter by minimum index number.
                 */
                minIndexNumber?: number | null;
                /**
                 * Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                 */
                minOfficialRating?: string;
                /**
                 * Optional filter by minimum number of game players.
                 */
                minPlayers?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minPremiereDate?: string;
                /**
                 * Optional filter by items whose name is equally or lesser than a given input string.
                 */
                nameLessThan?: string;
                /**
                 * Optional filter by items whose name is sorted equally than a given input string.
                 */
                nameStartsWith?: string;
                /**
                 * Optional filter by items whose name is sorted equally or greater than a given input string.
                 */
                nameStartsWithOrGreater?: string;
                /**
                 * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                 */
                officialRatings?: string;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional filter by parent index number.
                 */
                parentIndexNumber?: number | null;
                /**
                 * Optional filter by Path.
                 */
                path?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                person?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                personIds?: string;
                /**
                 * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                 */
                personTypes?: string;
                /**
                 * When searching within folders, this determines whether or not the search will be recursive. true/false
                 */
                recursive?: boolean;
                /**
                 * Optional filter by Series Status. Allows multiple, comma delimeted.
                 */
                seriesStatus?: string;
                /**
                 * Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                 */
                sortBy?: string;
                /**
                 * Sort Order - Ascending,Descending
                 */
                sortOrder?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studioIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studios?: string;
                /**
                 * Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                 */
                subtitleCodecs?: string;
                /**
                 * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                 */
                tags?: string;
                /**
                 * User Id
                 */
                userId?: string;
                /**
                 * Optional filter by VideoCodec. Allows multiple, comma delimeted.
                 */
                videoCodecs?: string;
                /**
                 * Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                 */
                videoTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                 */
                years?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Genres/{Name}': {
        get: {
            req: {
                /**
                 * The genre name
                 */
                name: string;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a BaseItemDto object.
                 */
                200: BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items': {
        get: {
            req: {
                /**
                 * Optional. Return items that are siblings of a supplied item.
                 */
                adjacentTo?: string;
                /**
                 * Gets all episodes that aired during a season, including specials.
                 */
                airedDuringSeason?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                 */
                albums?: string;
                /**
                 * Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                 */
                anyProviderIdEquals?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artistIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artists?: string;
                /**
                 * Artist or AlbumArtist
                 */
                artistType?: string;
                /**
                 * Optional filter by AudioCodec. Allows multiple, comma delimeted.
                 */
                audioCodecs?: string;
                /**
                 * Optional filter by Container. Allows multiple, comma delimeted.
                 */
                containers?: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                 */
                excludeItemIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                excludeItemTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                excludeLocationTypes?: string;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                 */
                filters?: string;
                /**
                 * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                 */
                genres?: string;
                /**
                 * Whether or not to hide items behind their boxsets.
                 */
                groupItemsIntoCollections?: boolean;
                /**
                 * Optional filter by items that have an imdb id or not.
                 */
                hasImdbId?: boolean | null;
                /**
                 * Optional filter by items that have official ratings
                 */
                hasOfficialRating?: boolean | null;
                /**
                 * Optional filter by items that have an overview or not.
                 */
                hasOverview?: boolean | null;
                /**
                 * Optional filter by items that have or do not have a parental rating
                 */
                hasParentalRating?: boolean | null;
                /**
                 * Optional filter by items with special features.
                 */
                hasSpecialFeature?: boolean | null;
                /**
                 * Optional filter by items with subtitles.
                 */
                hasSubtitles?: boolean | null;
                /**
                 * Optional filter by items with theme songs.
                 */
                hasThemeSong?: boolean | null;
                /**
                 * Optional filter by items with theme videos.
                 */
                hasThemeVideo?: boolean | null;
                /**
                 * Optional filter by items that have a tmdb id or not.
                 */
                hasTmdbId?: boolean | null;
                /**
                 * Optional filter by items with trailers.
                 */
                hasTrailer?: boolean | null;
                /**
                 * Optional filter by items that have a tvdb id or not.
                 */
                hasTvdbId?: boolean | null;
                /**
                 * Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                 */
                ids?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                 */
                imageTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional filter by items that are 3D, or not.
                 */
                is3D?: boolean | null;
                /**
                 * Optional filter by items that are marked as favorite, or not.
                 */
                isFavorite?: boolean | null;
                /**
                 * Optional filter by items that are HD or not.
                 */
                isHd?: boolean | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter by items that are locked.
                 */
                isLocked?: boolean | null;
                /**
                 * Optional filter by items that are missing episodes or not.
                 */
                isMissing?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter by items that are placeholders
                 */
                isPlaceHolder?: boolean | null;
                /**
                 * Optional filter by items that are played, or not.
                 */
                isPlayed?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional filter by items that are unaired episodes or not.
                 */
                isUnaired?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                locationTypes?: string;
                /**
                 * Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                 */
                maxOfficialRating?: string;
                /**
                 * Optional filter by maximum number of game players.
                 */
                maxPlayers?: number | null;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxPremiereDate?: string;
                /**
                 * Optional filter by MediaType. Allows multiple, comma delimited.
                 */
                mediaTypes?: string;
                /**
                 * Optional filter by minimum community rating.
                 */
                minCommunityRating?: number | null;
                /**
                 * Optional filter by minimum critic rating.
                 */
                minCriticRating?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSaved?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSavedForUser?: string;
                /**
                 * Optional filter by minimum index number.
                 */
                minIndexNumber?: number | null;
                /**
                 * Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                 */
                minOfficialRating?: string;
                /**
                 * Optional filter by minimum number of game players.
                 */
                minPlayers?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minPremiereDate?: string;
                /**
                 * Optional filter by items whose name is equally or lesser than a given input string.
                 */
                nameLessThan?: string;
                /**
                 * Optional filter by items whose name is sorted equally than a given input string.
                 */
                nameStartsWith?: string;
                /**
                 * Optional filter by items whose name is sorted equally or greater than a given input string.
                 */
                nameStartsWithOrGreater?: string;
                /**
                 * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                 */
                officialRatings?: string;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional filter by parent index number.
                 */
                parentIndexNumber?: number | null;
                /**
                 * Optional filter by Path.
                 */
                path?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                person?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                personIds?: string;
                /**
                 * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                 */
                personTypes?: string;
                /**
                 * When searching within folders, this determines whether or not the search will be recursive. true/false
                 */
                recursive?: boolean;
                /**
                 * Optional filter by Series Status. Allows multiple, comma delimeted.
                 */
                seriesStatus?: string;
                /**
                 * Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                 */
                sortBy?: string;
                /**
                 * Sort Order - Ascending,Descending
                 */
                sortOrder?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studioIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studios?: string;
                /**
                 * Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                 */
                subtitleCodecs?: string;
                /**
                 * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                 */
                tags?: string;
                /**
                 * User Id
                 */
                userId?: string;
                /**
                 * Optional filter by VideoCodec. Allows multiple, comma delimeted.
                 */
                videoCodecs?: string;
                /**
                 * Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                 */
                videoTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                 */
                years?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            req: {
                /**
                 * Ids
                 */
                ids: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/{UserId}/Items': {
        get: {
            req: {
                /**
                 * Optional. Return items that are siblings of a supplied item.
                 */
                adjacentTo?: string;
                /**
                 * Gets all episodes that aired during a season, including specials.
                 */
                airedDuringSeason?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                 */
                albums?: string;
                /**
                 * Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                 */
                anyProviderIdEquals?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artistIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artists?: string;
                /**
                 * Artist or AlbumArtist
                 */
                artistType?: string;
                /**
                 * Optional filter by AudioCodec. Allows multiple, comma delimeted.
                 */
                audioCodecs?: string;
                /**
                 * Optional filter by Container. Allows multiple, comma delimeted.
                 */
                containers?: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                 */
                excludeItemIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                excludeItemTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                excludeLocationTypes?: string;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                 */
                filters?: string;
                /**
                 * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                 */
                genres?: string;
                /**
                 * Whether or not to hide items behind their boxsets.
                 */
                groupItemsIntoCollections?: boolean;
                /**
                 * Optional filter by items that have an imdb id or not.
                 */
                hasImdbId?: boolean | null;
                /**
                 * Optional filter by items that have official ratings
                 */
                hasOfficialRating?: boolean | null;
                /**
                 * Optional filter by items that have an overview or not.
                 */
                hasOverview?: boolean | null;
                /**
                 * Optional filter by items that have or do not have a parental rating
                 */
                hasParentalRating?: boolean | null;
                /**
                 * Optional filter by items with special features.
                 */
                hasSpecialFeature?: boolean | null;
                /**
                 * Optional filter by items with subtitles.
                 */
                hasSubtitles?: boolean | null;
                /**
                 * Optional filter by items with theme songs.
                 */
                hasThemeSong?: boolean | null;
                /**
                 * Optional filter by items with theme videos.
                 */
                hasThemeVideo?: boolean | null;
                /**
                 * Optional filter by items that have a tmdb id or not.
                 */
                hasTmdbId?: boolean | null;
                /**
                 * Optional filter by items with trailers.
                 */
                hasTrailer?: boolean | null;
                /**
                 * Optional filter by items that have a tvdb id or not.
                 */
                hasTvdbId?: boolean | null;
                /**
                 * Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                 */
                ids?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                 */
                imageTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional filter by items that are 3D, or not.
                 */
                is3D?: boolean | null;
                /**
                 * Optional filter by items that are marked as favorite, or not.
                 */
                isFavorite?: boolean | null;
                /**
                 * Optional filter by items that are HD or not.
                 */
                isHd?: boolean | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter by items that are locked.
                 */
                isLocked?: boolean | null;
                /**
                 * Optional filter by items that are missing episodes or not.
                 */
                isMissing?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter by items that are placeholders
                 */
                isPlaceHolder?: boolean | null;
                /**
                 * Optional filter by items that are played, or not.
                 */
                isPlayed?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional filter by items that are unaired episodes or not.
                 */
                isUnaired?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                locationTypes?: string;
                /**
                 * Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                 */
                maxOfficialRating?: string;
                /**
                 * Optional filter by maximum number of game players.
                 */
                maxPlayers?: number | null;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxPremiereDate?: string;
                /**
                 * Optional filter by MediaType. Allows multiple, comma delimited.
                 */
                mediaTypes?: string;
                /**
                 * Optional filter by minimum community rating.
                 */
                minCommunityRating?: number | null;
                /**
                 * Optional filter by minimum critic rating.
                 */
                minCriticRating?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSaved?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSavedForUser?: string;
                /**
                 * Optional filter by minimum index number.
                 */
                minIndexNumber?: number | null;
                /**
                 * Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                 */
                minOfficialRating?: string;
                /**
                 * Optional filter by minimum number of game players.
                 */
                minPlayers?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minPremiereDate?: string;
                /**
                 * Optional filter by items whose name is equally or lesser than a given input string.
                 */
                nameLessThan?: string;
                /**
                 * Optional filter by items whose name is sorted equally than a given input string.
                 */
                nameStartsWith?: string;
                /**
                 * Optional filter by items whose name is sorted equally or greater than a given input string.
                 */
                nameStartsWithOrGreater?: string;
                /**
                 * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                 */
                officialRatings?: string;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional filter by parent index number.
                 */
                parentIndexNumber?: number | null;
                /**
                 * Optional filter by Path.
                 */
                path?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                person?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                personIds?: string;
                /**
                 * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                 */
                personTypes?: string;
                /**
                 * When searching within folders, this determines whether or not the search will be recursive. true/false
                 */
                recursive?: boolean;
                /**
                 * Optional filter by Series Status. Allows multiple, comma delimeted.
                 */
                seriesStatus?: string;
                /**
                 * Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                 */
                sortBy?: string;
                /**
                 * Sort Order - Ascending,Descending
                 */
                sortOrder?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studioIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studios?: string;
                /**
                 * Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                 */
                subtitleCodecs?: string;
                /**
                 * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                 */
                tags?: string;
                /**
                 * User Id
                 */
                userId: string;
                /**
                 * Optional filter by VideoCodec. Allows multiple, comma delimeted.
                 */
                videoCodecs?: string;
                /**
                 * Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                 */
                videoTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                 */
                years?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/{UserId}/Items/Resume': {
        get: {
            req: {
                /**
                 * Optional. Return items that are siblings of a supplied item.
                 */
                adjacentTo?: string;
                /**
                 * Gets all episodes that aired during a season, including specials.
                 */
                airedDuringSeason?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                 */
                albums?: string;
                /**
                 * Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                 */
                anyProviderIdEquals?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artistIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artists?: string;
                /**
                 * Artist or AlbumArtist
                 */
                artistType?: string;
                /**
                 * Optional filter by AudioCodec. Allows multiple, comma delimeted.
                 */
                audioCodecs?: string;
                /**
                 * Optional filter by Container. Allows multiple, comma delimeted.
                 */
                containers?: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                 */
                excludeItemIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                excludeItemTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                excludeLocationTypes?: string;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                 */
                filters?: string;
                /**
                 * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                 */
                genres?: string;
                /**
                 * Whether or not to hide items behind their boxsets.
                 */
                groupItemsIntoCollections?: boolean;
                /**
                 * Optional filter by items that have an imdb id or not.
                 */
                hasImdbId?: boolean | null;
                /**
                 * Optional filter by items that have official ratings
                 */
                hasOfficialRating?: boolean | null;
                /**
                 * Optional filter by items that have an overview or not.
                 */
                hasOverview?: boolean | null;
                /**
                 * Optional filter by items that have or do not have a parental rating
                 */
                hasParentalRating?: boolean | null;
                /**
                 * Optional filter by items with special features.
                 */
                hasSpecialFeature?: boolean | null;
                /**
                 * Optional filter by items with subtitles.
                 */
                hasSubtitles?: boolean | null;
                /**
                 * Optional filter by items with theme songs.
                 */
                hasThemeSong?: boolean | null;
                /**
                 * Optional filter by items with theme videos.
                 */
                hasThemeVideo?: boolean | null;
                /**
                 * Optional filter by items that have a tmdb id or not.
                 */
                hasTmdbId?: boolean | null;
                /**
                 * Optional filter by items with trailers.
                 */
                hasTrailer?: boolean | null;
                /**
                 * Optional filter by items that have a tvdb id or not.
                 */
                hasTvdbId?: boolean | null;
                /**
                 * Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                 */
                ids?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                 */
                imageTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional filter by items that are 3D, or not.
                 */
                is3D?: boolean | null;
                /**
                 * Optional filter by items that are marked as favorite, or not.
                 */
                isFavorite?: boolean | null;
                /**
                 * Optional filter by items that are HD or not.
                 */
                isHd?: boolean | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter by items that are locked.
                 */
                isLocked?: boolean | null;
                /**
                 * Optional filter by items that are missing episodes or not.
                 */
                isMissing?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter by items that are placeholders
                 */
                isPlaceHolder?: boolean | null;
                /**
                 * Optional filter by items that are played, or not.
                 */
                isPlayed?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional filter by items that are unaired episodes or not.
                 */
                isUnaired?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                locationTypes?: string;
                /**
                 * Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                 */
                maxOfficialRating?: string;
                /**
                 * Optional filter by maximum number of game players.
                 */
                maxPlayers?: number | null;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxPremiereDate?: string;
                /**
                 * Optional filter by MediaType. Allows multiple, comma delimited.
                 */
                mediaTypes?: string;
                /**
                 * Optional filter by minimum community rating.
                 */
                minCommunityRating?: number | null;
                /**
                 * Optional filter by minimum critic rating.
                 */
                minCriticRating?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSaved?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSavedForUser?: string;
                /**
                 * Optional filter by minimum index number.
                 */
                minIndexNumber?: number | null;
                /**
                 * Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                 */
                minOfficialRating?: string;
                /**
                 * Optional filter by minimum number of game players.
                 */
                minPlayers?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minPremiereDate?: string;
                /**
                 * Optional filter by items whose name is equally or lesser than a given input string.
                 */
                nameLessThan?: string;
                /**
                 * Optional filter by items whose name is sorted equally than a given input string.
                 */
                nameStartsWith?: string;
                /**
                 * Optional filter by items whose name is sorted equally or greater than a given input string.
                 */
                nameStartsWithOrGreater?: string;
                /**
                 * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                 */
                officialRatings?: string;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional filter by parent index number.
                 */
                parentIndexNumber?: number | null;
                /**
                 * Optional filter by Path.
                 */
                path?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                person?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                personIds?: string;
                /**
                 * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                 */
                personTypes?: string;
                /**
                 * When searching within folders, this determines whether or not the search will be recursive. true/false
                 */
                recursive?: boolean;
                /**
                 * Optional filter by Series Status. Allows multiple, comma delimeted.
                 */
                seriesStatus?: string;
                /**
                 * Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                 */
                sortBy?: string;
                /**
                 * Sort Order - Ascending,Descending
                 */
                sortOrder?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studioIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studios?: string;
                /**
                 * Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                 */
                subtitleCodecs?: string;
                /**
                 * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                 */
                tags?: string;
                /**
                 * User Id
                 */
                userId: string;
                /**
                 * Optional filter by VideoCodec. Allows multiple, comma delimeted.
                 */
                videoCodecs?: string;
                /**
                 * Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                 */
                videoTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                 */
                years?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/Counts': {
        get: {
            req: {
                /**
                 * Optional. Get counts of favorite items
                 */
                isFavorite?: boolean | null;
                /**
                 * Optional. Get counts from a specific user's library.
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a ItemCounts object.
                 */
                200: ItemCounts;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{Id}': {
        delete: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Libraries/AvailableOptions': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a LibraryOptionsResult object.
                 */
                200: Library_LibraryOptionsResult;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Library/SelectableMediaFolders': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a MediaFolder[] object.
                 */
                200: Array<Library_MediaFolder>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Library/MediaFolders': {
        get: {
            req: {
                /**
                 * Optional. Filter by folders that are marked hidden, or not.
                 */
                isHidden?: boolean | null;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Library/PhysicalPaths': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a List<String> object.
                 */
                200: Array<(string)>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Library/Refresh': {
        post: {
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Albums/{Id}/Similar': {
        get: {
            req: {
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
                 */
                fields?: string;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Artists/{Id}/Similar': {
        get: {
            req: {
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
                 */
                fields?: string;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Games/{Id}/Similar': {
        get: {
            req: {
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
                 */
                fields?: string;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{Id}/DeleteInfo': {
        get: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Returning a DeleteInfo object.
                 */
                200: Library_DeleteInfo;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{Id}/Similar': {
        get: {
            req: {
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
                 */
                fields?: string;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{Id}/Download': {
        get: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{Id}/File': {
        get: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{Id}/Ancestors': {
        get: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a BaseItemDto[] object.
                 */
                200: Array<BaseItemDto>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{Id}/CriticReviews': {
        get: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{Id}/ThemeMedia': {
        get: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Determines whether or not parent items should be searched for theme media.
                 */
                inheritFromParent?: boolean;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a AllThemeMediaResult object.
                 */
                200: AllThemeMediaResult;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{Id}/ThemeSongs': {
        get: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Determines whether or not parent items should be searched for theme media.
                 */
                inheritFromParent?: boolean;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a ThemeMediaResult object.
                 */
                200: ThemeMediaResult;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{Id}/ThemeVideos': {
        get: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Determines whether or not parent items should be searched for theme media.
                 */
                inheritFromParent?: boolean;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a ThemeMediaResult object.
                 */
                200: ThemeMediaResult;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Library/Series/Added': {
        post: {
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Library/Series/Updated': {
        post: {
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Library/Media/Updated': {
        post: {
            req: {
                /**
                 * PostUpdatedMedia
                 */
                requestBody: Library_PostUpdatedMedia;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Library/Movies/Added': {
        post: {
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Library/Movies/Updated': {
        post: {
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Movies/{Id}/Similar': {
        get: {
            req: {
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
                 */
                fields?: string;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Shows/{Id}/Similar': {
        get: {
            req: {
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
                 */
                fields?: string;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Trailers/{Id}/Similar': {
        get: {
            req: {
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
                 */
                fields?: string;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/MusicGenres': {
        get: {
            req: {
                /**
                 * Optional. Return items that are siblings of a supplied item.
                 */
                adjacentTo?: string;
                /**
                 * Gets all episodes that aired during a season, including specials.
                 */
                airedDuringSeason?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                 */
                albums?: string;
                /**
                 * Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                 */
                anyProviderIdEquals?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artistIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artists?: string;
                /**
                 * Artist or AlbumArtist
                 */
                artistType?: string;
                /**
                 * Optional filter by AudioCodec. Allows multiple, comma delimeted.
                 */
                audioCodecs?: string;
                /**
                 * Optional filter by Container. Allows multiple, comma delimeted.
                 */
                containers?: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                 */
                excludeItemIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                excludeItemTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                excludeLocationTypes?: string;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                 */
                filters?: string;
                /**
                 * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                 */
                genres?: string;
                /**
                 * Whether or not to hide items behind their boxsets.
                 */
                groupItemsIntoCollections?: boolean;
                /**
                 * Optional filter by items that have an imdb id or not.
                 */
                hasImdbId?: boolean | null;
                /**
                 * Optional filter by items that have official ratings
                 */
                hasOfficialRating?: boolean | null;
                /**
                 * Optional filter by items that have an overview or not.
                 */
                hasOverview?: boolean | null;
                /**
                 * Optional filter by items that have or do not have a parental rating
                 */
                hasParentalRating?: boolean | null;
                /**
                 * Optional filter by items with special features.
                 */
                hasSpecialFeature?: boolean | null;
                /**
                 * Optional filter by items with subtitles.
                 */
                hasSubtitles?: boolean | null;
                /**
                 * Optional filter by items with theme songs.
                 */
                hasThemeSong?: boolean | null;
                /**
                 * Optional filter by items with theme videos.
                 */
                hasThemeVideo?: boolean | null;
                /**
                 * Optional filter by items that have a tmdb id or not.
                 */
                hasTmdbId?: boolean | null;
                /**
                 * Optional filter by items with trailers.
                 */
                hasTrailer?: boolean | null;
                /**
                 * Optional filter by items that have a tvdb id or not.
                 */
                hasTvdbId?: boolean | null;
                /**
                 * Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                 */
                ids?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                 */
                imageTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional filter by items that are 3D, or not.
                 */
                is3D?: boolean | null;
                /**
                 * Optional filter by items that are marked as favorite, or not.
                 */
                isFavorite?: boolean | null;
                /**
                 * Optional filter by items that are HD or not.
                 */
                isHd?: boolean | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter by items that are locked.
                 */
                isLocked?: boolean | null;
                /**
                 * Optional filter by items that are missing episodes or not.
                 */
                isMissing?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter by items that are placeholders
                 */
                isPlaceHolder?: boolean | null;
                /**
                 * Optional filter by items that are played, or not.
                 */
                isPlayed?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional filter by items that are unaired episodes or not.
                 */
                isUnaired?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                locationTypes?: string;
                /**
                 * Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                 */
                maxOfficialRating?: string;
                /**
                 * Optional filter by maximum number of game players.
                 */
                maxPlayers?: number | null;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxPremiereDate?: string;
                /**
                 * Optional filter by MediaType. Allows multiple, comma delimited.
                 */
                mediaTypes?: string;
                /**
                 * Optional filter by minimum community rating.
                 */
                minCommunityRating?: number | null;
                /**
                 * Optional filter by minimum critic rating.
                 */
                minCriticRating?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSaved?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSavedForUser?: string;
                /**
                 * Optional filter by minimum index number.
                 */
                minIndexNumber?: number | null;
                /**
                 * Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                 */
                minOfficialRating?: string;
                /**
                 * Optional filter by minimum number of game players.
                 */
                minPlayers?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minPremiereDate?: string;
                /**
                 * Optional filter by items whose name is equally or lesser than a given input string.
                 */
                nameLessThan?: string;
                /**
                 * Optional filter by items whose name is sorted equally than a given input string.
                 */
                nameStartsWith?: string;
                /**
                 * Optional filter by items whose name is sorted equally or greater than a given input string.
                 */
                nameStartsWithOrGreater?: string;
                /**
                 * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                 */
                officialRatings?: string;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional filter by parent index number.
                 */
                parentIndexNumber?: number | null;
                /**
                 * Optional filter by Path.
                 */
                path?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                person?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                personIds?: string;
                /**
                 * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                 */
                personTypes?: string;
                /**
                 * When searching within folders, this determines whether or not the search will be recursive. true/false
                 */
                recursive?: boolean;
                /**
                 * Optional filter by Series Status. Allows multiple, comma delimeted.
                 */
                seriesStatus?: string;
                /**
                 * Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                 */
                sortBy?: string;
                /**
                 * Sort Order - Ascending,Descending
                 */
                sortOrder?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studioIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studios?: string;
                /**
                 * Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                 */
                subtitleCodecs?: string;
                /**
                 * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                 */
                tags?: string;
                /**
                 * User Id
                 */
                userId?: string;
                /**
                 * Optional filter by VideoCodec. Allows multiple, comma delimeted.
                 */
                videoCodecs?: string;
                /**
                 * Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                 */
                videoTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                 */
                years?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/MusicGenres/{Name}': {
        get: {
            req: {
                /**
                 * The genre name
                 */
                name: string;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a BaseItemDto object.
                 */
                200: BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/OfficialRatings': {
        get: {
            req: {
                /**
                 * Optional. Return items that are siblings of a supplied item.
                 */
                adjacentTo?: string;
                /**
                 * Gets all episodes that aired during a season, including specials.
                 */
                airedDuringSeason?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                 */
                albums?: string;
                /**
                 * Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                 */
                anyProviderIdEquals?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artistIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artists?: string;
                /**
                 * Artist or AlbumArtist
                 */
                artistType?: string;
                /**
                 * Optional filter by AudioCodec. Allows multiple, comma delimeted.
                 */
                audioCodecs?: string;
                /**
                 * Optional filter by Container. Allows multiple, comma delimeted.
                 */
                containers?: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                 */
                excludeItemIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                excludeItemTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                excludeLocationTypes?: string;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                 */
                filters?: string;
                /**
                 * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                 */
                genres?: string;
                /**
                 * Whether or not to hide items behind their boxsets.
                 */
                groupItemsIntoCollections?: boolean;
                /**
                 * Optional filter by items that have an imdb id or not.
                 */
                hasImdbId?: boolean | null;
                /**
                 * Optional filter by items that have official ratings
                 */
                hasOfficialRating?: boolean | null;
                /**
                 * Optional filter by items that have an overview or not.
                 */
                hasOverview?: boolean | null;
                /**
                 * Optional filter by items that have or do not have a parental rating
                 */
                hasParentalRating?: boolean | null;
                /**
                 * Optional filter by items with special features.
                 */
                hasSpecialFeature?: boolean | null;
                /**
                 * Optional filter by items with subtitles.
                 */
                hasSubtitles?: boolean | null;
                /**
                 * Optional filter by items with theme songs.
                 */
                hasThemeSong?: boolean | null;
                /**
                 * Optional filter by items with theme videos.
                 */
                hasThemeVideo?: boolean | null;
                /**
                 * Optional filter by items that have a tmdb id or not.
                 */
                hasTmdbId?: boolean | null;
                /**
                 * Optional filter by items with trailers.
                 */
                hasTrailer?: boolean | null;
                /**
                 * Optional filter by items that have a tvdb id or not.
                 */
                hasTvdbId?: boolean | null;
                /**
                 * Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                 */
                ids?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                 */
                imageTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional filter by items that are 3D, or not.
                 */
                is3D?: boolean | null;
                /**
                 * Optional filter by items that are marked as favorite, or not.
                 */
                isFavorite?: boolean | null;
                /**
                 * Optional filter by items that are HD or not.
                 */
                isHd?: boolean | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter by items that are locked.
                 */
                isLocked?: boolean | null;
                /**
                 * Optional filter by items that are missing episodes or not.
                 */
                isMissing?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter by items that are placeholders
                 */
                isPlaceHolder?: boolean | null;
                /**
                 * Optional filter by items that are played, or not.
                 */
                isPlayed?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional filter by items that are unaired episodes or not.
                 */
                isUnaired?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                locationTypes?: string;
                /**
                 * Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                 */
                maxOfficialRating?: string;
                /**
                 * Optional filter by maximum number of game players.
                 */
                maxPlayers?: number | null;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxPremiereDate?: string;
                /**
                 * Optional filter by MediaType. Allows multiple, comma delimited.
                 */
                mediaTypes?: string;
                /**
                 * Optional filter by minimum community rating.
                 */
                minCommunityRating?: number | null;
                /**
                 * Optional filter by minimum critic rating.
                 */
                minCriticRating?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSaved?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSavedForUser?: string;
                /**
                 * Optional filter by minimum index number.
                 */
                minIndexNumber?: number | null;
                /**
                 * Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                 */
                minOfficialRating?: string;
                /**
                 * Optional filter by minimum number of game players.
                 */
                minPlayers?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minPremiereDate?: string;
                /**
                 * Optional filter by items whose name is equally or lesser than a given input string.
                 */
                nameLessThan?: string;
                /**
                 * Optional filter by items whose name is sorted equally than a given input string.
                 */
                nameStartsWith?: string;
                /**
                 * Optional filter by items whose name is sorted equally or greater than a given input string.
                 */
                nameStartsWithOrGreater?: string;
                /**
                 * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                 */
                officialRatings?: string;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional filter by parent index number.
                 */
                parentIndexNumber?: number | null;
                /**
                 * Optional filter by Path.
                 */
                path?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                person?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                personIds?: string;
                /**
                 * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                 */
                personTypes?: string;
                /**
                 * When searching within folders, this determines whether or not the search will be recursive. true/false
                 */
                recursive?: boolean;
                /**
                 * Optional filter by Series Status. Allows multiple, comma delimeted.
                 */
                seriesStatus?: string;
                /**
                 * Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                 */
                sortBy?: string;
                /**
                 * Sort Order - Ascending,Descending
                 */
                sortOrder?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studioIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studios?: string;
                /**
                 * Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                 */
                subtitleCodecs?: string;
                /**
                 * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                 */
                tags?: string;
                /**
                 * User Id
                 */
                userId?: string;
                /**
                 * Optional filter by VideoCodec. Allows multiple, comma delimeted.
                 */
                videoCodecs?: string;
                /**
                 * Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                 */
                videoTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                 */
                years?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<OfficialRatingItem> object.
                 */
                200: QueryResult_UserLibrary_OfficialRatingItem;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/openapi': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a String object.
                 */
                200: string;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/openapi.json': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a String object.
                 */
                200: string;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/swagger': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a String object.
                 */
                200: string;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/swagger.json': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a String object.
                 */
                200: string;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Packages': {
        get: {
            req: {
                /**
                 * Optional. Filter by package that contain adult content.
                 */
                isAdult?: boolean | null;
                /**
                 * Optional. Filter by premium status
                 */
                isPremium?: boolean | null;
                /**
                 * Optional package type filter (System/UserInstalled)
                 */
                packageType?: string;
                /**
                 * Optional. Filter by target system type. Allows multiple, comma delimited.
                 */
                targetSystems?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a PackageInfo[] object.
                 */
                200: Array<Updates_PackageInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Packages/Updates': {
        get: {
            req: {
                /**
                 * Package type filter (System/UserInstalled)
                 */
                packageType: string;
            };
            res: {
                /**
                 * Operation successful. Returning a PackageVersionInfo[] object.
                 */
                200: Array<Updates_PackageVersionInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Packages/{Name}': {
        get: {
            req: {
                /**
                 * The guid of the associated assembly
                 */
                assemblyGuid?: string;
                /**
                 * The name of the package
                 */
                name: string;
            };
            res: {
                /**
                 * Operation successful. Returning a PackageInfo object.
                 */
                200: Updates_PackageInfo;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Packages/Installed/{Name}': {
        post: {
            req: {
                /**
                 * Guid of the associated assembly
                 */
                assemblyGuid?: string;
                /**
                 * Package name
                 */
                name: string;
                /**
                 * Optional update class (Dev, Beta, Release). Defaults to Release.
                 */
                updateClass?: 'Release' | 'Beta' | 'Dev';
                /**
                 * Optional version. Defaults to latest version.
                 */
                version?: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Packages/Installing/{Id}': {
        delete: {
            req: {
                /**
                 * Installation Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Persons': {
        get: {
            req: {
                /**
                 * Optional. Return items that are siblings of a supplied item.
                 */
                adjacentTo?: string;
                /**
                 * Gets all episodes that aired during a season, including specials.
                 */
                airedDuringSeason?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                 */
                albums?: string;
                /**
                 * Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                 */
                anyProviderIdEquals?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artistIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artists?: string;
                /**
                 * Artist or AlbumArtist
                 */
                artistType?: string;
                /**
                 * Optional filter by AudioCodec. Allows multiple, comma delimeted.
                 */
                audioCodecs?: string;
                /**
                 * Optional filter by Container. Allows multiple, comma delimeted.
                 */
                containers?: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                 */
                excludeItemIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                excludeItemTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                excludeLocationTypes?: string;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                 */
                filters?: string;
                /**
                 * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                 */
                genres?: string;
                /**
                 * Whether or not to hide items behind their boxsets.
                 */
                groupItemsIntoCollections?: boolean;
                /**
                 * Optional filter by items that have an imdb id or not.
                 */
                hasImdbId?: boolean | null;
                /**
                 * Optional filter by items that have official ratings
                 */
                hasOfficialRating?: boolean | null;
                /**
                 * Optional filter by items that have an overview or not.
                 */
                hasOverview?: boolean | null;
                /**
                 * Optional filter by items that have or do not have a parental rating
                 */
                hasParentalRating?: boolean | null;
                /**
                 * Optional filter by items with special features.
                 */
                hasSpecialFeature?: boolean | null;
                /**
                 * Optional filter by items with subtitles.
                 */
                hasSubtitles?: boolean | null;
                /**
                 * Optional filter by items with theme songs.
                 */
                hasThemeSong?: boolean | null;
                /**
                 * Optional filter by items with theme videos.
                 */
                hasThemeVideo?: boolean | null;
                /**
                 * Optional filter by items that have a tmdb id or not.
                 */
                hasTmdbId?: boolean | null;
                /**
                 * Optional filter by items with trailers.
                 */
                hasTrailer?: boolean | null;
                /**
                 * Optional filter by items that have a tvdb id or not.
                 */
                hasTvdbId?: boolean | null;
                /**
                 * Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                 */
                ids?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                 */
                imageTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional filter by items that are 3D, or not.
                 */
                is3D?: boolean | null;
                /**
                 * Optional filter by items that are marked as favorite, or not.
                 */
                isFavorite?: boolean | null;
                /**
                 * Optional filter by items that are HD or not.
                 */
                isHd?: boolean | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter by items that are locked.
                 */
                isLocked?: boolean | null;
                /**
                 * Optional filter by items that are missing episodes or not.
                 */
                isMissing?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter by items that are placeholders
                 */
                isPlaceHolder?: boolean | null;
                /**
                 * Optional filter by items that are played, or not.
                 */
                isPlayed?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional filter by items that are unaired episodes or not.
                 */
                isUnaired?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                locationTypes?: string;
                /**
                 * Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                 */
                maxOfficialRating?: string;
                /**
                 * Optional filter by maximum number of game players.
                 */
                maxPlayers?: number | null;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxPremiereDate?: string;
                /**
                 * Optional filter by MediaType. Allows multiple, comma delimited.
                 */
                mediaTypes?: string;
                /**
                 * Optional filter by minimum community rating.
                 */
                minCommunityRating?: number | null;
                /**
                 * Optional filter by minimum critic rating.
                 */
                minCriticRating?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSaved?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSavedForUser?: string;
                /**
                 * Optional filter by minimum index number.
                 */
                minIndexNumber?: number | null;
                /**
                 * Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                 */
                minOfficialRating?: string;
                /**
                 * Optional filter by minimum number of game players.
                 */
                minPlayers?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minPremiereDate?: string;
                /**
                 * Optional filter by items whose name is equally or lesser than a given input string.
                 */
                nameLessThan?: string;
                /**
                 * Optional filter by items whose name is sorted equally than a given input string.
                 */
                nameStartsWith?: string;
                /**
                 * Optional filter by items whose name is sorted equally or greater than a given input string.
                 */
                nameStartsWithOrGreater?: string;
                /**
                 * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                 */
                officialRatings?: string;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional filter by parent index number.
                 */
                parentIndexNumber?: number | null;
                /**
                 * Optional filter by Path.
                 */
                path?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                person?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                personIds?: string;
                /**
                 * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                 */
                personTypes?: string;
                /**
                 * When searching within folders, this determines whether or not the search will be recursive. true/false
                 */
                recursive?: boolean;
                /**
                 * Optional filter by Series Status. Allows multiple, comma delimeted.
                 */
                seriesStatus?: string;
                /**
                 * Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                 */
                sortBy?: string;
                /**
                 * Sort Order - Ascending,Descending
                 */
                sortOrder?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studioIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studios?: string;
                /**
                 * Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                 */
                subtitleCodecs?: string;
                /**
                 * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                 */
                tags?: string;
                /**
                 * User Id
                 */
                userId?: string;
                /**
                 * Optional filter by VideoCodec. Allows multiple, comma delimeted.
                 */
                videoCodecs?: string;
                /**
                 * Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                 */
                videoTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                 */
                years?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Persons/{Name}': {
        get: {
            req: {
                /**
                 * The person name
                 */
                name: string;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a BaseItemDto object.
                 */
                200: BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Playlists': {
        post: {
            req: {
                /**
                 * Item Ids to add to the playlist
                 */
                ids?: string;
                /**
                 * The playlist media type
                 */
                mediaType?: string;
                /**
                 * The name of the new playlist.
                 */
                name?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a PlaylistCreationResult object.
                 */
                200: Playlists_PlaylistCreationResult;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Playlists/{Id}/Items': {
        post: {
            req: {
                id: string;
                /**
                 * Item id, comma delimited
                 */
                ids: string;
                /**
                 * User Id
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            req: {
                entryIds: string;
                id: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        get: {
            req: {
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                id: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * User Id
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Playlists/{Id}/Items/{ItemId}/Move/{NewIndex}': {
        post: {
            req: {
                id: string;
                /**
                 * ItemId
                 */
                itemId: number;
                /**
                 * NewIndex
                 */
                newIndex: number;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Plugins': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a PluginInfo[] object.
                 */
                200: Array<Plugins_PluginInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Plugins/{Id}': {
        delete: {
            req: {
                /**
                 * Plugin Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Plugins/{Id}/Thumb': {
        get: {
            req: {
                /**
                 * Plugin Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Plugins/{Id}/Configuration': {
        get: {
            req: {
                /**
                 * Plugin Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        post: {
            req: {
                /**
                 * Plugin Id
                 */
                id: string;
                /**
                 * Binary stream
                 */
                requestBody: (Blob | File);
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/ScheduledTasks': {
        get: {
            req: {
                /**
                 * Optional filter tasks that are enabled, or not.
                 */
                isEnabled?: boolean | null;
                /**
                 * Optional filter tasks that are hidden, or not.
                 */
                isHidden?: boolean | null;
            };
            res: {
                /**
                 * Operation successful. Returning a TaskInfo[] object.
                 */
                200: Array<Tasks_TaskInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/ScheduledTasks/{Id}': {
        get: {
            req: {
                id: string;
            };
            res: {
                /**
                 * Operation successful. Returning a TaskInfo object.
                 */
                200: Tasks_TaskInfo;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/ScheduledTasks/Running/{Id}': {
        post: {
            req: {
                id: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            req: {
                id: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/ScheduledTasks/{Id}/Triggers': {
        post: {
            req: {
                id: string;
                /**
                 * List`1:
                 */
                requestBody: Array<Tasks_TaskTriggerInfo>;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sessions': {
        get: {
            req: {
                /**
                 * Optional. Filter by sessions that a given user is allowed to remote control.
                 */
                controllableByUserId?: string;
                /**
                 * Optional. Filter by device id.
                 */
                deviceId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a SessionInfo[] object.
                 */
                200: Array<Session_SessionInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Auth/Providers': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a NameIdPair[] object.
                 */
                200: Array<NameIdPair>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Auth/Keys': {
        post: {
            req: {
                /**
                 * App
                 */
                app: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        get: {
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sessions/Logout': {
        post: {
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sessions/Capabilities': {
        post: {
            req: {
                /**
                 * Session Id
                 */
                id: string;
                /**
                 * A list of playable media types, comma delimited. Audio, Video, Book, Game, Photo.
                 */
                playableMediaTypes?: string;
                /**
                 * A list of supported remote control commands, comma delimited
                 */
                supportedCommands?: string;
                /**
                 * Determines whether media can be played remotely.
                 */
                supportsMediaControl?: boolean;
                /**
                 * Determines whether the device supports a unique identifier.
                 */
                supportsPersistentIdentifier?: boolean;
                /**
                 * Determines whether sync is supported.
                 */
                supportsSync?: boolean;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Auth/Keys/{Key}': {
        delete: {
            req: {
                /**
                 * Auth Key
                 */
                key: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sessions/{Id}/Viewing': {
        post: {
            req: {
                /**
                 * Session Id
                 */
                id: string;
                /**
                 * The Id of the item.
                 */
                itemId: string;
                /**
                 * The name of the item.
                 */
                itemName: string;
                /**
                 * The type of item to browse to.
                 */
                itemType: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sessions/{Id}/Message': {
        post: {
            req: {
                /**
                 * The message header.
                 */
                header: string;
                /**
                 * Session Id
                 */
                id: string;
                /**
                 * The message text.
                 */
                text: string;
                /**
                 * The message timeout. If omitted the user will have to confirm viewing the message.
                 */
                timeoutMs?: number | null;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sessions/{Id}/Playing': {
        post: {
            req: {
                /**
                 * Session Id
                 */
                id: string;
                /**
                 * The ids of the items to play, comma delimited
                 */
                itemIds: Array<(number)>;
                /**
                 * The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now.
                 */
                playCommand: 'PlayNow' | 'PlayNext' | 'PlayLast' | 'PlayInstantMix' | 'PlayShuffle';
                /**
                 * PlayRequest:
                 */
                requestBody: PlayRequest;
                /**
                 * The starting position of the first item.
                 */
                startPositionTicks?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sessions/{Id}/Command': {
        post: {
            req: {
                /**
                 * Session Id
                 */
                id: string;
                /**
                 * GeneralCommand:
                 */
                requestBody: GeneralCommand;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sessions/Capabilities/Full': {
        post: {
            req: {
                /**
                 * Session Id
                 */
                id: string;
                /**
                 * ClientCapabilities:
                 */
                requestBody: ClientCapabilities;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sessions/{Id}/Playing/{Command}': {
        post: {
            req: {
                command: 'Stop' | 'Pause' | 'Unpause' | 'NextTrack' | 'PreviousTrack' | 'Seek' | 'Rewind' | 'FastForward' | 'PlayPause';
                /**
                 * Session Id
                 */
                id: string;
                /**
                 * PlaystateRequest:
                 */
                requestBody: PlaystateRequest;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sessions/{Id}/System/{Command}': {
        post: {
            req: {
                /**
                 * The command to send.
                 */
                command: string;
                /**
                 * Session Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sessions/{Id}/Command/{Command}': {
        post: {
            req: {
                /**
                 * The command to send.
                 */
                command: string;
                /**
                 * Session Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sessions/{Id}/Users/{UserId}': {
        post: {
            req: {
                /**
                 * Session Id
                 */
                id: string;
                /**
                 * UserId Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            req: {
                /**
                 * Session Id
                 */
                id: string;
                /**
                 * UserId Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Studios': {
        get: {
            req: {
                /**
                 * Optional. Return items that are siblings of a supplied item.
                 */
                adjacentTo?: string;
                /**
                 * Gets all episodes that aired during a season, including specials.
                 */
                airedDuringSeason?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                 */
                albums?: string;
                /**
                 * Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                 */
                anyProviderIdEquals?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artistIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artists?: string;
                /**
                 * Artist or AlbumArtist
                 */
                artistType?: string;
                /**
                 * Optional filter by AudioCodec. Allows multiple, comma delimeted.
                 */
                audioCodecs?: string;
                /**
                 * Optional filter by Container. Allows multiple, comma delimeted.
                 */
                containers?: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                 */
                excludeItemIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                excludeItemTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                excludeLocationTypes?: string;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                 */
                filters?: string;
                /**
                 * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                 */
                genres?: string;
                /**
                 * Whether or not to hide items behind their boxsets.
                 */
                groupItemsIntoCollections?: boolean;
                /**
                 * Optional filter by items that have an imdb id or not.
                 */
                hasImdbId?: boolean | null;
                /**
                 * Optional filter by items that have official ratings
                 */
                hasOfficialRating?: boolean | null;
                /**
                 * Optional filter by items that have an overview or not.
                 */
                hasOverview?: boolean | null;
                /**
                 * Optional filter by items that have or do not have a parental rating
                 */
                hasParentalRating?: boolean | null;
                /**
                 * Optional filter by items with special features.
                 */
                hasSpecialFeature?: boolean | null;
                /**
                 * Optional filter by items with subtitles.
                 */
                hasSubtitles?: boolean | null;
                /**
                 * Optional filter by items with theme songs.
                 */
                hasThemeSong?: boolean | null;
                /**
                 * Optional filter by items with theme videos.
                 */
                hasThemeVideo?: boolean | null;
                /**
                 * Optional filter by items that have a tmdb id or not.
                 */
                hasTmdbId?: boolean | null;
                /**
                 * Optional filter by items with trailers.
                 */
                hasTrailer?: boolean | null;
                /**
                 * Optional filter by items that have a tvdb id or not.
                 */
                hasTvdbId?: boolean | null;
                /**
                 * Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                 */
                ids?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                 */
                imageTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional filter by items that are 3D, or not.
                 */
                is3D?: boolean | null;
                /**
                 * Optional filter by items that are marked as favorite, or not.
                 */
                isFavorite?: boolean | null;
                /**
                 * Optional filter by items that are HD or not.
                 */
                isHd?: boolean | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter by items that are locked.
                 */
                isLocked?: boolean | null;
                /**
                 * Optional filter by items that are missing episodes or not.
                 */
                isMissing?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter by items that are placeholders
                 */
                isPlaceHolder?: boolean | null;
                /**
                 * Optional filter by items that are played, or not.
                 */
                isPlayed?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional filter by items that are unaired episodes or not.
                 */
                isUnaired?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                locationTypes?: string;
                /**
                 * Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                 */
                maxOfficialRating?: string;
                /**
                 * Optional filter by maximum number of game players.
                 */
                maxPlayers?: number | null;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxPremiereDate?: string;
                /**
                 * Optional filter by MediaType. Allows multiple, comma delimited.
                 */
                mediaTypes?: string;
                /**
                 * Optional filter by minimum community rating.
                 */
                minCommunityRating?: number | null;
                /**
                 * Optional filter by minimum critic rating.
                 */
                minCriticRating?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSaved?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSavedForUser?: string;
                /**
                 * Optional filter by minimum index number.
                 */
                minIndexNumber?: number | null;
                /**
                 * Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                 */
                minOfficialRating?: string;
                /**
                 * Optional filter by minimum number of game players.
                 */
                minPlayers?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minPremiereDate?: string;
                /**
                 * Optional filter by items whose name is equally or lesser than a given input string.
                 */
                nameLessThan?: string;
                /**
                 * Optional filter by items whose name is sorted equally than a given input string.
                 */
                nameStartsWith?: string;
                /**
                 * Optional filter by items whose name is sorted equally or greater than a given input string.
                 */
                nameStartsWithOrGreater?: string;
                /**
                 * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                 */
                officialRatings?: string;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional filter by parent index number.
                 */
                parentIndexNumber?: number | null;
                /**
                 * Optional filter by Path.
                 */
                path?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                person?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                personIds?: string;
                /**
                 * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                 */
                personTypes?: string;
                /**
                 * When searching within folders, this determines whether or not the search will be recursive. true/false
                 */
                recursive?: boolean;
                /**
                 * Optional filter by Series Status. Allows multiple, comma delimeted.
                 */
                seriesStatus?: string;
                /**
                 * Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                 */
                sortBy?: string;
                /**
                 * Sort Order - Ascending,Descending
                 */
                sortOrder?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studioIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studios?: string;
                /**
                 * Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                 */
                subtitleCodecs?: string;
                /**
                 * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                 */
                tags?: string;
                /**
                 * User Id
                 */
                userId?: string;
                /**
                 * Optional filter by VideoCodec. Allows multiple, comma delimeted.
                 */
                videoCodecs?: string;
                /**
                 * Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                 */
                videoTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                 */
                years?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Studios/{Name}': {
        get: {
            req: {
                /**
                 * The studio name
                 */
                name: string;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a BaseItemDto object.
                 */
                200: BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Trailers': {
        get: {
            req: {
                /**
                 * Optional. Return items that are siblings of a supplied item.
                 */
                adjacentTo?: string;
                /**
                 * Gets all episodes that aired during a season, including specials.
                 */
                airedDuringSeason?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                 */
                albums?: string;
                /**
                 * Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                 */
                anyProviderIdEquals?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artistIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artists?: string;
                /**
                 * Artist or AlbumArtist
                 */
                artistType?: string;
                /**
                 * Optional filter by AudioCodec. Allows multiple, comma delimeted.
                 */
                audioCodecs?: string;
                /**
                 * Optional filter by Container. Allows multiple, comma delimeted.
                 */
                containers?: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                 */
                excludeItemIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                excludeItemTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                excludeLocationTypes?: string;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                 */
                filters?: string;
                /**
                 * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                 */
                genres?: string;
                /**
                 * Whether or not to hide items behind their boxsets.
                 */
                groupItemsIntoCollections?: boolean;
                /**
                 * Optional filter by items that have an imdb id or not.
                 */
                hasImdbId?: boolean | null;
                /**
                 * Optional filter by items that have official ratings
                 */
                hasOfficialRating?: boolean | null;
                /**
                 * Optional filter by items that have an overview or not.
                 */
                hasOverview?: boolean | null;
                /**
                 * Optional filter by items that have or do not have a parental rating
                 */
                hasParentalRating?: boolean | null;
                /**
                 * Optional filter by items with special features.
                 */
                hasSpecialFeature?: boolean | null;
                /**
                 * Optional filter by items with subtitles.
                 */
                hasSubtitles?: boolean | null;
                /**
                 * Optional filter by items with theme songs.
                 */
                hasThemeSong?: boolean | null;
                /**
                 * Optional filter by items with theme videos.
                 */
                hasThemeVideo?: boolean | null;
                /**
                 * Optional filter by items that have a tmdb id or not.
                 */
                hasTmdbId?: boolean | null;
                /**
                 * Optional filter by items with trailers.
                 */
                hasTrailer?: boolean | null;
                /**
                 * Optional filter by items that have a tvdb id or not.
                 */
                hasTvdbId?: boolean | null;
                /**
                 * Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                 */
                ids?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                 */
                imageTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional filter by items that are 3D, or not.
                 */
                is3D?: boolean | null;
                /**
                 * Optional filter by items that are marked as favorite, or not.
                 */
                isFavorite?: boolean | null;
                /**
                 * Optional filter by items that are HD or not.
                 */
                isHd?: boolean | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter by items that are locked.
                 */
                isLocked?: boolean | null;
                /**
                 * Optional filter by items that are missing episodes or not.
                 */
                isMissing?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter by items that are placeholders
                 */
                isPlaceHolder?: boolean | null;
                /**
                 * Optional filter by items that are played, or not.
                 */
                isPlayed?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional filter by items that are unaired episodes or not.
                 */
                isUnaired?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                locationTypes?: string;
                /**
                 * Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                 */
                maxOfficialRating?: string;
                /**
                 * Optional filter by maximum number of game players.
                 */
                maxPlayers?: number | null;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxPremiereDate?: string;
                /**
                 * Optional filter by MediaType. Allows multiple, comma delimited.
                 */
                mediaTypes?: string;
                /**
                 * Optional filter by minimum community rating.
                 */
                minCommunityRating?: number | null;
                /**
                 * Optional filter by minimum critic rating.
                 */
                minCriticRating?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSaved?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSavedForUser?: string;
                /**
                 * Optional filter by minimum index number.
                 */
                minIndexNumber?: number | null;
                /**
                 * Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                 */
                minOfficialRating?: string;
                /**
                 * Optional filter by minimum number of game players.
                 */
                minPlayers?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minPremiereDate?: string;
                /**
                 * Optional filter by items whose name is equally or lesser than a given input string.
                 */
                nameLessThan?: string;
                /**
                 * Optional filter by items whose name is sorted equally than a given input string.
                 */
                nameStartsWith?: string;
                /**
                 * Optional filter by items whose name is sorted equally or greater than a given input string.
                 */
                nameStartsWithOrGreater?: string;
                /**
                 * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                 */
                officialRatings?: string;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional filter by parent index number.
                 */
                parentIndexNumber?: number | null;
                /**
                 * Optional filter by Path.
                 */
                path?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                person?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                personIds?: string;
                /**
                 * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                 */
                personTypes?: string;
                /**
                 * When searching within folders, this determines whether or not the search will be recursive. true/false
                 */
                recursive?: boolean;
                /**
                 * Optional filter by Series Status. Allows multiple, comma delimeted.
                 */
                seriesStatus?: string;
                /**
                 * Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                 */
                sortBy?: string;
                /**
                 * Sort Order - Ascending,Descending
                 */
                sortOrder?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studioIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studios?: string;
                /**
                 * Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                 */
                subtitleCodecs?: string;
                /**
                 * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                 */
                tags?: string;
                /**
                 * User Id
                 */
                userId?: string;
                /**
                 * Optional filter by VideoCodec. Allows multiple, comma delimeted.
                 */
                videoCodecs?: string;
                /**
                 * Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                 */
                videoTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                 */
                years?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users': {
        get: {
            req: {
                /**
                 * Optional filter by IsDisabled=true or false
                 */
                isDisabled?: boolean | null;
                /**
                 * Optional filter by IsHidden=true or false
                 */
                isHidden?: boolean | null;
            };
            res: {
                /**
                 * Operation successful. Returning a UserDto[] object.
                 */
                200: Array<UserDto>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/Public': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a UserDto[] object.
                 */
                200: Array<UserDto>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/{Id}': {
        get: {
            req: {
                id: string;
            };
            res: {
                /**
                 * Operation successful. Returning a UserDto object.
                 */
                200: UserDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            req: {
                id: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        post: {
            req: {
                id: string;
                /**
                 * UserDto:
                 */
                requestBody: UserDto;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/AuthenticateByName': {
        post: {
            req: {
                /**
                 * AuthenticateUserByName
                 */
                requestBody: AuthenticateUserByName;
                /**
                 * The authorization header can be either named 'Authorization' or 'X-Emby-Authorization'.
                 * It must be of the following schema:
                 * Emby UserId="(guid)", Client="(string)", Device="(string)", DeviceId="(string)", Version="string", Token="(string)"
                 * Please consult the documentation for further details.
                 */
                xEmbyAuthorization: string;
            };
            res: {
                /**
                 * Operation successful. Returning a AuthenticationResult object.
                 */
                200: Authentication_AuthenticationResult;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/New': {
        post: {
            req: {
                /**
                 * CreateUserByName
                 */
                requestBody: CreateUserByName;
            };
            res: {
                /**
                 * Operation successful. Returning a UserDto object.
                 */
                200: UserDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/ForgotPassword': {
        post: {
            req: {
                /**
                 * ForgotPassword
                 */
                requestBody: ForgotPassword;
            };
            res: {
                /**
                 * Operation successful. Returning a ForgotPasswordResult object.
                 */
                200: Users_ForgotPasswordResult;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/{Id}/Authenticate': {
        post: {
            req: {
                id: string;
                /**
                 * AuthenticateUser
                 */
                requestBody: AuthenticateUser;
            };
            res: {
                /**
                 * Operation successful. Returning a AuthenticationResult object.
                 */
                200: Authentication_AuthenticationResult;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/{Id}/Password': {
        post: {
            req: {
                id: string;
                /**
                 * UpdateUserPassword
                 */
                requestBody: UpdateUserPassword;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/{Id}/EasyPassword': {
        post: {
            req: {
                id: string;
                /**
                 * UpdateUserEasyPassword
                 */
                requestBody: UpdateUserEasyPassword;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/ForgotPassword/Pin': {
        post: {
            req: {
                /**
                 * ForgotPasswordPin
                 */
                requestBody: ForgotPasswordPin;
            };
            res: {
                /**
                 * Operation successful. Returning a PinRedeemResult object.
                 */
                200: Users_PinRedeemResult;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/{Id}/Configuration': {
        post: {
            req: {
                id: string;
                /**
                 * UserConfiguration:
                 */
                requestBody: Configuration_UserConfiguration;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/{Id}/Policy': {
        post: {
            req: {
                id: string;
                /**
                 * UserPolicy:
                 */
                requestBody: Users_UserPolicy;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{Id}/Images/{Type}/{Index}/{Tag}/{Format}/{MaxWidth}/{MaxHeight}/{PercentPlayed}/{UnplayedCount}': {
        get: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Image Index
                 */
                index: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth: number | null;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Image Index
                 */
                index: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth: number | null;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{Id}/Images': {
        get: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Returning a List<ImageInfo> object.
                 */
                200: Array<ImageInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Artists/{Name}/Images/{Type}': {
        get: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Image Index
                 */
                index?: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Item name
                 */
                name: string;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Image Index
                 */
                index?: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Item name
                 */
                name: string;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/GameGenres/{Name}/Images/{Type}': {
        get: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Image Index
                 */
                index?: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Item name
                 */
                name: string;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Image Index
                 */
                index?: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Item name
                 */
                name: string;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Genres/{Name}/Images/{Type}': {
        get: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Image Index
                 */
                index?: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Item name
                 */
                name: string;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Image Index
                 */
                index?: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Item name
                 */
                name: string;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{Id}/Images/{Type}': {
        get: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Image Index
                 */
                index?: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Image Index
                 */
                index?: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        post: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Image Index
                 */
                index?: number;
                /**
                 * Binary stream
                 */
                requestBody: (Blob | File);
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Image Index
                 */
                index?: number;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/MusicGenres/{Name}/Images/{Type}': {
        get: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Image Index
                 */
                index?: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Item name
                 */
                name: string;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Image Index
                 */
                index?: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Item name
                 */
                name: string;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Persons/{Name}/Images/{Type}': {
        get: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Image Index
                 */
                index?: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Item name
                 */
                name: string;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Image Index
                 */
                index?: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Item name
                 */
                name: string;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Studios/{Name}/Images/{Type}': {
        get: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Image Index
                 */
                index?: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Item name
                 */
                name: string;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Image Index
                 */
                index?: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Item name
                 */
                name: string;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/{Id}/Images/{Type}': {
        get: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * User Id
                 */
                id: string;
                /**
                 * Image Index
                 */
                index?: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * User Id
                 */
                id: string;
                /**
                 * Image Index
                 */
                index?: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        post: {
            req: {
                /**
                 * User Id
                 */
                id: string;
                /**
                 * Image Index
                 */
                index?: number;
                /**
                 * Binary stream
                 */
                requestBody: (Blob | File);
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            req: {
                /**
                 * User Id
                 */
                id: string;
                /**
                 * Image Index
                 */
                index?: number;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Artists/{Name}/Images/{Type}/{Index}': {
        get: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Image Index
                 */
                index: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Item name
                 */
                name: string;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Image Index
                 */
                index: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Item name
                 */
                name: string;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/GameGenres/{Name}/Images/{Type}/{Index}': {
        get: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Image Index
                 */
                index: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Item name
                 */
                name: string;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Image Index
                 */
                index: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Item name
                 */
                name: string;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Genres/{Name}/Images/{Type}/{Index}': {
        get: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Image Index
                 */
                index: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Item name
                 */
                name: string;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Image Index
                 */
                index: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Item name
                 */
                name: string;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{Id}/Images/{Type}/{Index}': {
        get: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Image Index
                 */
                index: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Image Index
                 */
                index: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        post: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Image Index
                 */
                index: number;
                /**
                 * Binary stream
                 */
                requestBody: (Blob | File);
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Image Index
                 */
                index: number;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/MusicGenres/{Name}/Images/{Type}/{Index}': {
        get: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Image Index
                 */
                index: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Item name
                 */
                name: string;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Image Index
                 */
                index: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Item name
                 */
                name: string;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Persons/{Name}/Images/{Type}/{Index}': {
        get: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Image Index
                 */
                index: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Item name
                 */
                name: string;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Image Index
                 */
                index: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Item name
                 */
                name: string;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Studios/{Name}/Images/{Type}/{Index}': {
        get: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Image Index
                 */
                index: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Item name
                 */
                name: string;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * Image Index
                 */
                index: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Item name
                 */
                name: string;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/{Id}/Images/{Type}/{Index}': {
        get: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * User Id
                 */
                id: string;
                /**
                 * Image Index
                 */
                index: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Optional. Add a played indicator
                 */
                addPlayedIndicator?: boolean;
                /**
                 * Optional. Apply a background color for transparent images.
                 */
                backgroundColor?: string;
                /**
                 * Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
                 */
                cropWhitespace?: boolean | null;
                /**
                 * Enable or disable image enhancers such as cover art.
                 */
                enableImageEnhancers?: boolean;
                /**
                 * Optional. Apply a foreground layer on top of the image.
                 */
                foregroundLayer?: string;
                /**
                 * Determines the output foramt of the image - original,gif,jpg,png
                 */
                format?: string;
                /**
                 * The fixed image height to return.
                 */
                height?: number | null;
                /**
                 * User Id
                 */
                id: string;
                /**
                 * Image Index
                 */
                index: number;
                /**
                 * The maximum image height to return.
                 */
                maxHeight?: number | null;
                /**
                 * The maximum image width to return.
                 */
                maxWidth?: number | null;
                /**
                 * Optional percent to render for the percent played overlay
                 */
                percentPlayed?: number | null;
                /**
                 * Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
                 */
                quality?: number | null;
                /**
                 * Optional. Supply the cache tag from the item object to receive strong caching headers.
                 */
                tag?: string;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
                /**
                 * Optional unplayed count overlay to render
                 */
                unplayedCount?: number | null;
                /**
                 * The fixed image width to return.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        post: {
            req: {
                /**
                 * User Id
                 */
                id: string;
                /**
                 * Image Index
                 */
                index: number;
                /**
                 * Binary stream
                 */
                requestBody: (Blob | File);
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            req: {
                /**
                 * User Id
                 */
                id: string;
                /**
                 * Image Index
                 */
                index: number;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{Id}/Images/{Type}/{Index}/Index': {
        post: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Image Index
                 */
                index: number;
                /**
                 * The new image index
                 */
                newIndex: number;
                /**
                 * Image Type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Artists/InstantMix': {
        get: {
            req: {
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
                 */
                fields?: string;
                /**
                 * The artist Id
                 */
                id: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/MusicGenres/InstantMix': {
        get: {
            req: {
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
                 */
                fields?: string;
                /**
                 * The genre Id
                 */
                id: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Albums/{Id}/InstantMix': {
        get: {
            req: {
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
                 */
                fields?: string;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{Id}/InstantMix': {
        get: {
            req: {
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
                 */
                fields?: string;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/MusicGenres/{Name}/InstantMix': {
        get: {
            req: {
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
                 */
                fields?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * The genre name
                 */
                name: string;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Playlists/{Id}/InstantMix': {
        get: {
            req: {
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
                 */
                fields?: string;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Songs/{Id}/InstantMix': {
        get: {
            req: {
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
                 */
                fields?: string;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Branding/Configuration': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a BrandingOptions object.
                 */
                200: Branding_BrandingOptions;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Branding/Css': {
        get: {
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Branding/Css.css': {
        get: {
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Connect/Pending': {
        get: {
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Connect/Exchange': {
        get: {
            req: {
                /**
                 * ConnectUserId
                 */
                connectUserId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a ConnectAuthenticationExchangeResult object.
                 */
                200: Connect_ConnectAuthenticationExchangeResult;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/{Id}/Connect/Link': {
        post: {
            req: {
                /**
                 * Connect username
                 */
                connectUsername: string;
                /**
                 * User Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Returning a UserLinkResult object.
                 */
                200: Connect_UserLinkResult;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            req: {
                /**
                 * User Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/DisplayPreferences/{Id}': {
        get: {
            req: {
                /**
                 * Client
                 */
                client: string;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a DisplayPreferences object.
                 */
                200: DisplayPreferences;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/DisplayPreferences/{DisplayPreferencesId}': {
        post: {
            req: {
                /**
                 * DisplayPreferences Id
                 */
                displayPreferencesId: string;
                /**
                 * DisplayPreferences:
                 */
                requestBody: DisplayPreferences;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Dlna/ProfileInfos': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a DeviceProfileInfo[] object.
                 */
                200: Array<Dlna_DeviceProfileInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Dlna/Profiles': {
        post: {
            req: {
                /**
                 * DeviceProfile:
                 */
                requestBody: Dlna_DeviceProfile;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Dlna/Profiles/{Id}': {
        get: {
            req: {
                /**
                 * Profile Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Returning a DeviceProfile object.
                 */
                200: Dlna_DeviceProfile;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            req: {
                /**
                 * Profile Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        post: {
            req: {
                id: string;
                /**
                 * DeviceProfile:
                 */
                requestBody: Dlna_DeviceProfile;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Dlna/Profiles/Default': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a DeviceProfile object.
                 */
                200: Dlna_DeviceProfile;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Environment/ValidatePath': {
        post: {
            req: {
                path: string;
                /**
                 * ValidatePath
                 */
                requestBody: ValidatePath;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Environment/DefaultDirectoryBrowser': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a DefaultDirectoryBrowserInfo object.
                 */
                200: DefaultDirectoryBrowserInfo;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Environment/DirectoryContents': {
        get: {
            req: {
                /**
                 * An optional filter to include or exclude folders from the results. true/false
                 */
                includeDirectories?: boolean;
                /**
                 * An optional filter to include or exclude files from the results. true/false
                 */
                includeFiles?: boolean;
                path: string;
            };
            res: {
                /**
                 * Operation successful. Returning a List<FileSystemEntryInfo> object.
                 */
                200: Array<IO_FileSystemEntryInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Environment/NetworkShares': {
        get: {
            req: {
                path: string;
            };
            res: {
                /**
                 * Operation successful. Returning a List<FileSystemEntryInfo> object.
                 */
                200: Array<IO_FileSystemEntryInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Environment/Drives': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a List<FileSystemEntryInfo> object.
                 */
                200: Array<IO_FileSystemEntryInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Environment/NetworkDevices': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a List<FileSystemEntryInfo> object.
                 */
                200: Array<IO_FileSystemEntryInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Environment/ParentPath': {
        get: {
            req: {
                path: string;
            };
            res: {
                /**
                 * Operation successful. Returning a String object.
                 */
                200: string;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Games/SystemSummaries': {
        get: {
            req: {
                /**
                 * Optional. Filter by user id
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a GameSystemSummary[] object.
                 */
                200: Array<GameSystemSummary>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Images/MediaInfo': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a List<ImageByNameInfo> object.
                 */
                200: Array<ImageByNameInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Images/Ratings': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a List<ImageByNameInfo> object.
                 */
                200: Array<ImageByNameInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Images/General': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a List<ImageByNameInfo> object.
                 */
                200: Array<ImageByNameInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Images/General/{Name}/{Type}': {
        get: {
            req: {
                /**
                 * The name of the image
                 */
                name: string;
                /**
                 * Image Type (primary, backdrop, logo, etc).
                 */
                type: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Images/Ratings/{Theme}/{Name}': {
        get: {
            req: {
                /**
                 * The name of the image
                 */
                name: string;
                /**
                 * The theme to get the image from
                 */
                theme: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Images/MediaInfo/{Theme}/{Name}': {
        get: {
            req: {
                /**
                 * The name of the image
                 */
                name: string;
                /**
                 * The theme to get the image from
                 */
                theme: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Images/Remote': {
        get: {
            req: {
                /**
                 * The image url
                 */
                imageUrl: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{Id}/RemoteImages': {
        get: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional.
                 */
                includeAllLanguages?: boolean;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. The image provider to use
                 */
                providerName?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * The image type
                 */
                type?: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
            };
            res: {
                /**
                 * Operation successful. Returning a RemoteImageResult object.
                 */
                200: RemoteImageResult;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{Id}/RemoteImages/Providers': {
        get: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Returning a List<ImageProviderInfo> object.
                 */
                200: Array<ImageProviderInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{Id}/RemoteImages/Download': {
        post: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * The image url
                 */
                imageUrl?: string;
                /**
                 * The image provider
                 */
                providerName?: string;
                /**
                 * The image type
                 */
                type: 'Primary' | 'Art' | 'Backdrop' | 'Banner' | 'Logo' | 'Thumb' | 'Disc' | 'Box' | 'Screenshot' | 'Menu' | 'Chapter' | 'BoxRear' | 'Thumbnail';
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/Filters2': {
        get: {
            req: {
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional filter by MediaType. Allows multiple, comma delimited.
                 */
                mediaTypes?: string;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * User Id
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryFilters object.
                 */
                200: QueryFilters;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/Filters': {
        get: {
            req: {
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional filter by MediaType. Allows multiple, comma delimited.
                 */
                mediaTypes?: string;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * User Id
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryFiltersLegacy object.
                 */
                200: QueryFiltersLegacy;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{ItemId}': {
        post: {
            req: {
                /**
                 * The id of the item
                 */
                itemId: string;
                /**
                 * BaseItemDto:
                 */
                requestBody: BaseItemDto;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{ItemId}/MetadataEditor': {
        get: {
            req: {
                /**
                 * The id of the item
                 */
                itemId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a MetadataEditorInfo object.
                 */
                200: MetadataEditorInfo;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/File': {
        get: {
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Videos/{Id}/stream.{Container}': {
        get: {
            req: {
                /**
                 * Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
                 */
                _static?: boolean;
                /**
                 * Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
                 */
                audioBitRate?: number | null;
                /**
                 * Optional. Specify a specific number of audio channels to encode to, e.g. 2
                 */
                audioChannels?: number | null;
                /**
                 * Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
                 */
                audioCodec?: string;
                /**
                 * Optional. Specify a specific audio sample rate, e.g. 44100
                 */
                audioSampleRate?: number | null;
                /**
                 * Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
                 */
                audioStreamIndex?: number | null;
                /**
                 * Container
                 */
                container: string;
                /**
                 * Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
                 */
                copyTimestamps?: boolean;
                /**
                 * The device id of the client requesting. Used to stop encoding processes when needed.
                 */
                deviceId?: string;
                /**
                 * Optional. The dlna device profile id to utilize.
                 */
                deviceProfileId?: string;
                /**
                 * Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
                 */
                enableAutoStreamCopy?: boolean;
                /**
                 * Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                framerate?: number | null;
                /**
                 * Optional. The fixed vertical resolution of the encoded video.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
                 */
                level?: string;
                /**
                 * Optional. Specify a maximum number of audio channels to encode to, e.g. 2
                 */
                maxAudioChannels?: number | null;
                /**
                 * Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                maxFramerate?: number | null;
                /**
                 * Optional. The maximum vertical resolution of the encoded video.
                 */
                maxHeight?: number | null;
                /**
                 * Optional.
                 */
                maxRefFrames?: number | null;
                /**
                 * Optional.
                 */
                maxVideoBitDepth?: number | null;
                /**
                 * Optional. The maximum horizontal resolution of the encoded video.
                 */
                maxWidth?: number | null;
                /**
                 * Optional. Specify a specific h264 profile, e.g. main, baseline, high.
                 */
                profile?: string;
                /**
                 * Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms
                 */
                startTimeTicks?: number | null;
                /**
                 * Optional. Specify the subtitle delivery method.
                 */
                subtitleMethod?: 'Encode' | 'Embed' | 'External' | 'Hls';
                /**
                 * Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
                 */
                subtitleStreamIndex?: number | null;
                /**
                 * Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
                 */
                videoBitRate?: number | null;
                /**
                 * Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.
                 */
                videoCodec?: string;
                /**
                 * Optional. The index of the video stream to use. If omitted the first video stream will be used.
                 */
                videoStreamIndex?: number | null;
                /**
                 * Optional. The fixed horizontal resolution of the encoded video.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
                 */
                _static?: boolean;
                /**
                 * Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
                 */
                audioBitRate?: number | null;
                /**
                 * Optional. Specify a specific number of audio channels to encode to, e.g. 2
                 */
                audioChannels?: number | null;
                /**
                 * Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
                 */
                audioCodec?: string;
                /**
                 * Optional. Specify a specific audio sample rate, e.g. 44100
                 */
                audioSampleRate?: number | null;
                /**
                 * Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
                 */
                audioStreamIndex?: number | null;
                /**
                 * Container
                 */
                container: string;
                /**
                 * Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
                 */
                copyTimestamps?: boolean;
                /**
                 * The device id of the client requesting. Used to stop encoding processes when needed.
                 */
                deviceId?: string;
                /**
                 * Optional. The dlna device profile id to utilize.
                 */
                deviceProfileId?: string;
                /**
                 * Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
                 */
                enableAutoStreamCopy?: boolean;
                /**
                 * Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                framerate?: number | null;
                /**
                 * Optional. The fixed vertical resolution of the encoded video.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
                 */
                level?: string;
                /**
                 * Optional. Specify a maximum number of audio channels to encode to, e.g. 2
                 */
                maxAudioChannels?: number | null;
                /**
                 * Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                maxFramerate?: number | null;
                /**
                 * Optional. The maximum vertical resolution of the encoded video.
                 */
                maxHeight?: number | null;
                /**
                 * Optional.
                 */
                maxRefFrames?: number | null;
                /**
                 * Optional.
                 */
                maxVideoBitDepth?: number | null;
                /**
                 * Optional. The maximum horizontal resolution of the encoded video.
                 */
                maxWidth?: number | null;
                /**
                 * Optional. Specify a specific h264 profile, e.g. main, baseline, high.
                 */
                profile?: string;
                /**
                 * Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms
                 */
                startTimeTicks?: number | null;
                /**
                 * Optional. Specify the subtitle delivery method.
                 */
                subtitleMethod?: 'Encode' | 'Embed' | 'External' | 'Hls';
                /**
                 * Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
                 */
                subtitleStreamIndex?: number | null;
                /**
                 * Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
                 */
                videoBitRate?: number | null;
                /**
                 * Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.
                 */
                videoCodec?: string;
                /**
                 * Optional. The index of the video stream to use. If omitted the first video stream will be used.
                 */
                videoStreamIndex?: number | null;
                /**
                 * Optional. The fixed horizontal resolution of the encoded video.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Videos/{Id}/stream': {
        get: {
            req: {
                /**
                 * Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
                 */
                _static?: boolean;
                /**
                 * Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
                 */
                audioBitRate?: number | null;
                /**
                 * Optional. Specify a specific number of audio channels to encode to, e.g. 2
                 */
                audioChannels?: number | null;
                /**
                 * Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
                 */
                audioCodec?: string;
                /**
                 * Optional. Specify a specific audio sample rate, e.g. 44100
                 */
                audioSampleRate?: number | null;
                /**
                 * Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
                 */
                audioStreamIndex?: number | null;
                /**
                 * Container
                 */
                container: string;
                /**
                 * Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
                 */
                copyTimestamps?: boolean;
                /**
                 * The device id of the client requesting. Used to stop encoding processes when needed.
                 */
                deviceId?: string;
                /**
                 * Optional. The dlna device profile id to utilize.
                 */
                deviceProfileId?: string;
                /**
                 * Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
                 */
                enableAutoStreamCopy?: boolean;
                /**
                 * Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                framerate?: number | null;
                /**
                 * Optional. The fixed vertical resolution of the encoded video.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
                 */
                level?: string;
                /**
                 * Optional. Specify a maximum number of audio channels to encode to, e.g. 2
                 */
                maxAudioChannels?: number | null;
                /**
                 * Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                maxFramerate?: number | null;
                /**
                 * Optional. The maximum vertical resolution of the encoded video.
                 */
                maxHeight?: number | null;
                /**
                 * Optional.
                 */
                maxRefFrames?: number | null;
                /**
                 * Optional.
                 */
                maxVideoBitDepth?: number | null;
                /**
                 * Optional. The maximum horizontal resolution of the encoded video.
                 */
                maxWidth?: number | null;
                /**
                 * Optional. Specify a specific h264 profile, e.g. main, baseline, high.
                 */
                profile?: string;
                /**
                 * Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms
                 */
                startTimeTicks?: number | null;
                /**
                 * Optional. Specify the subtitle delivery method.
                 */
                subtitleMethod?: 'Encode' | 'Embed' | 'External' | 'Hls';
                /**
                 * Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
                 */
                subtitleStreamIndex?: number | null;
                /**
                 * Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
                 */
                videoBitRate?: number | null;
                /**
                 * Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.
                 */
                videoCodec?: string;
                /**
                 * Optional. The index of the video stream to use. If omitted the first video stream will be used.
                 */
                videoStreamIndex?: number | null;
                /**
                 * Optional. The fixed horizontal resolution of the encoded video.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
                 */
                _static?: boolean;
                /**
                 * Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
                 */
                audioBitRate?: number | null;
                /**
                 * Optional. Specify a specific number of audio channels to encode to, e.g. 2
                 */
                audioChannels?: number | null;
                /**
                 * Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
                 */
                audioCodec?: string;
                /**
                 * Optional. Specify a specific audio sample rate, e.g. 44100
                 */
                audioSampleRate?: number | null;
                /**
                 * Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
                 */
                audioStreamIndex?: number | null;
                /**
                 * Container
                 */
                container: string;
                /**
                 * Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
                 */
                copyTimestamps?: boolean;
                /**
                 * The device id of the client requesting. Used to stop encoding processes when needed.
                 */
                deviceId?: string;
                /**
                 * Optional. The dlna device profile id to utilize.
                 */
                deviceProfileId?: string;
                /**
                 * Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
                 */
                enableAutoStreamCopy?: boolean;
                /**
                 * Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                framerate?: number | null;
                /**
                 * Optional. The fixed vertical resolution of the encoded video.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
                 */
                level?: string;
                /**
                 * Optional. Specify a maximum number of audio channels to encode to, e.g. 2
                 */
                maxAudioChannels?: number | null;
                /**
                 * Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                maxFramerate?: number | null;
                /**
                 * Optional. The maximum vertical resolution of the encoded video.
                 */
                maxHeight?: number | null;
                /**
                 * Optional.
                 */
                maxRefFrames?: number | null;
                /**
                 * Optional.
                 */
                maxVideoBitDepth?: number | null;
                /**
                 * Optional. The maximum horizontal resolution of the encoded video.
                 */
                maxWidth?: number | null;
                /**
                 * Optional. Specify a specific h264 profile, e.g. main, baseline, high.
                 */
                profile?: string;
                /**
                 * Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms
                 */
                startTimeTicks?: number | null;
                /**
                 * Optional. Specify the subtitle delivery method.
                 */
                subtitleMethod?: 'Encode' | 'Embed' | 'External' | 'Hls';
                /**
                 * Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
                 */
                subtitleStreamIndex?: number | null;
                /**
                 * Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
                 */
                videoBitRate?: number | null;
                /**
                 * Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.
                 */
                videoCodec?: string;
                /**
                 * Optional. The index of the video stream to use. If omitted the first video stream will be used.
                 */
                videoStreamIndex?: number | null;
                /**
                 * Optional. The fixed horizontal resolution of the encoded video.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Library/VirtualFolders': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a List<VirtualFolderInfo> object.
                 */
                200: Array<VirtualFolderInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        post: {
            req: {
                /**
                 * AddVirtualFolder
                 */
                requestBody: Library_AddVirtualFolder;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Library/VirtualFolders/LibraryOptions': {
        post: {
            req: {
                /**
                 * UpdateLibraryOptions
                 */
                requestBody: Library_UpdateLibraryOptions;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Library/VirtualFolders/Name': {
        post: {
            req: {
                /**
                 * RenameVirtualFolder
                 */
                requestBody: Library_RenameVirtualFolder;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Library/VirtualFolders/Paths': {
        post: {
            req: {
                /**
                 * AddMediaPath
                 */
                requestBody: Library_AddMediaPath;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Library/VirtualFolders/Paths/Update': {
        post: {
            req: {
                /**
                 * UpdateMediaPath
                 */
                requestBody: Library_UpdateMediaPath;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveStreams/Open': {
        post: {
            req: {
                /**
                 * LiveStreamRequest:
                 */
                requestBody: MediaInfo_LiveStreamRequest;
            };
            res: {
                /**
                 * Operation successful. Returning a LiveStreamResponse object.
                 */
                200: MediaInfo_LiveStreamResponse;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveStreams/Close': {
        post: {
            req: {
                /**
                 * LiveStreamId
                 */
                liveStreamId: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveStreams/MediaInfo': {
        post: {
            req: {
                /**
                 * LiveStreamId
                 */
                liveStreamId: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Playback/BitrateTest': {
        get: {
            req: {
                /**
                 * Size
                 */
                size: number;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{Id}/PlaybackInfo': {
        get: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a PlaybackInfoResponse object.
                 */
                200: MediaInfo_PlaybackInfoResponse;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        post: {
            req: {
                id: string;
                /**
                 * PlaybackInfoRequest:
                 */
                requestBody: MediaInfo_PlaybackInfoRequest;
            };
            res: {
                /**
                 * Operation successful. Returning a PlaybackInfoResponse object.
                 */
                200: MediaInfo_PlaybackInfoResponse;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/ChannelMappings': {
        options: {
            req: {
                /**
                 * Provider id
                 */
                providerId: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        get: {
            req: {
                /**
                 * Provider id
                 */
                providerId: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Provider id
                 */
                providerId: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        post: {
            req: {
                /**
                 * Provider id
                 */
                providerId: string;
                /**
                 * SetChannelMapping
                 */
                requestBody: LiveTv_SetChannelMapping;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        put: {
            req: {
                /**
                 * Provider id
                 */
                providerId: string;
                /**
                 * SetChannelMapping
                 */
                requestBody: LiveTv_SetChannelMapping;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            req: {
                /**
                 * Provider id
                 */
                providerId: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        patch: {
            req: {
                /**
                 * Provider id
                 */
                providerId: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/ChannelMappingOptions': {
        options: {
            req: {
                /**
                 * Provider id
                 */
                providerId: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        get: {
            req: {
                /**
                 * Provider id
                 */
                providerId: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Provider id
                 */
                providerId: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        post: {
            req: {
                /**
                 * Provider id
                 */
                providerId: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        put: {
            req: {
                /**
                 * Provider id
                 */
                providerId: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            req: {
                /**
                 * Provider id
                 */
                providerId: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        patch: {
            req: {
                /**
                 * Provider id
                 */
                providerId: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/ListingProviders': {
        post: {
            req: {
                /**
                 * ListingsProviderInfo:
                 */
                requestBody: LiveTv_ListingsProviderInfo;
            };
            res: {
                /**
                 * Operation successful. Returning a ListingsProviderInfo object.
                 */
                200: LiveTv_ListingsProviderInfo;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            req: {
                /**
                 * Provider id
                 */
                id?: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        get: {
            res: {
                /**
                 * Operation successful. Returning a ListingsProviderInfo[] object.
                 */
                200: Array<LiveTv_ListingsProviderInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/TunerHosts': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a TunerHostInfo[] object.
                 */
                200: Array<LiveTv_TunerHostInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        post: {
            req: {
                /**
                 * TunerHostInfo:
                 */
                requestBody: LiveTv_TunerHostInfo;
            };
            res: {
                /**
                 * Operation successful. Returning a TunerHostInfo object.
                 */
                200: LiveTv_TunerHostInfo;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            req: {
                /**
                 * Tuner host id
                 */
                id?: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/Info': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a LiveTvInfo object.
                 */
                200: LiveTv_LiveTvInfo;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/Channels': {
        get: {
            req: {
                /**
                 * Optional. Adds current program info to each channel
                 */
                addCurrentProgram?: boolean;
                /**
                 * Incorporate favorite and like status into channel sorting.
                 */
                enableFavoriteSorting?: boolean;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Filter by channels that are disliked, or not.
                 */
                isDisliked?: boolean | null;
                /**
                 * Filter by channels that are favorites, or not.
                 */
                isFavorite?: boolean | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Filter by channels that are liked, or not.
                 */
                isLiked?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional filter by channel type.
                 */
                type?: 'TV' | 'Radio';
                /**
                 * Optional filter by user and attach user data.
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/Programs': {
        get: {
            req: {
                /**
                 * The channels to return guide information for.
                 */
                channelIds?: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * The genres to return guide information for.
                 */
                genreIds?: string;
                /**
                 * Optional. Filter by programs that have completed airing, or not.
                 */
                hasAired?: boolean | null;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxEndDate?: string;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxStartDate?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minEndDate?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minStartDate?: string;
                /**
                 * Optional. Specify one or more sort orders, comma delimeted. Options: Name, StartDate
                 */
                sortBy?: string;
                /**
                 * Sort Order - Ascending,Descending
                 */
                sortOrder?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional filter by user id.
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        post: {
            req: {
                /**
                 * The channels to return guide information for.
                 */
                channelIds?: string;
                /**
                 * The genres to return guide information for.
                 */
                genreIds?: string;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxEndDate?: string;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxStartDate?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minEndDate?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minStartDate?: string;
                /**
                 * GetPrograms
                 */
                requestBody: LiveTv_GetPrograms;
                /**
                 * Optional filter by user id.
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/Recordings': {
        get: {
            req: {
                /**
                 * Optional. Return items that are siblings of a supplied item.
                 */
                adjacentTo?: string;
                /**
                 * Gets all episodes that aired during a season, including specials.
                 */
                airedDuringSeason?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                 */
                albums?: string;
                /**
                 * Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                 */
                anyProviderIdEquals?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artistIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artists?: string;
                /**
                 * Artist or AlbumArtist
                 */
                artistType?: string;
                /**
                 * Optional filter by AudioCodec. Allows multiple, comma delimeted.
                 */
                audioCodecs?: string;
                /**
                 * Optional filter by channel id.
                 */
                channelId?: string;
                /**
                 * Optional filter by Container. Allows multiple, comma delimeted.
                 */
                containers?: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                 */
                excludeItemIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                excludeItemTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                excludeLocationTypes?: string;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                 */
                filters?: string;
                /**
                 * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                 */
                genres?: string;
                /**
                 * Whether or not to hide items behind their boxsets.
                 */
                groupItemsIntoCollections?: boolean;
                /**
                 * Optional filter by items that have an imdb id or not.
                 */
                hasImdbId?: boolean | null;
                /**
                 * Optional filter by items that have official ratings
                 */
                hasOfficialRating?: boolean | null;
                /**
                 * Optional filter by items that have an overview or not.
                 */
                hasOverview?: boolean | null;
                /**
                 * Optional filter by items that have or do not have a parental rating
                 */
                hasParentalRating?: boolean | null;
                /**
                 * Optional filter by items with special features.
                 */
                hasSpecialFeature?: boolean | null;
                /**
                 * Optional filter by items with subtitles.
                 */
                hasSubtitles?: boolean | null;
                /**
                 * Optional filter by items with theme songs.
                 */
                hasThemeSong?: boolean | null;
                /**
                 * Optional filter by items with theme videos.
                 */
                hasThemeVideo?: boolean | null;
                /**
                 * Optional filter by items that have a tmdb id or not.
                 */
                hasTmdbId?: boolean | null;
                /**
                 * Optional filter by items with trailers.
                 */
                hasTrailer?: boolean | null;
                /**
                 * Optional filter by items that have a tvdb id or not.
                 */
                hasTvdbId?: boolean | null;
                /**
                 * Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                 */
                ids?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                 */
                imageTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional filter by items that are 3D, or not.
                 */
                is3D?: boolean | null;
                /**
                 * Optional filter by items that are marked as favorite, or not.
                 */
                isFavorite?: boolean | null;
                /**
                 * Optional filter by items that are HD or not.
                 */
                isHd?: boolean | null;
                /**
                 * Optional filter by recordings that are in progress, or not.
                 */
                isInProgress?: boolean | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter by items that are locked.
                 */
                isLocked?: boolean | null;
                /**
                 * Optional filter by items that are missing episodes or not.
                 */
                isMissing?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter by items that are placeholders
                 */
                isPlaceHolder?: boolean | null;
                /**
                 * Optional filter by items that are played, or not.
                 */
                isPlayed?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional filter by items that are unaired episodes or not.
                 */
                isUnaired?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                locationTypes?: string;
                /**
                 * Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                 */
                maxOfficialRating?: string;
                /**
                 * Optional filter by maximum number of game players.
                 */
                maxPlayers?: number | null;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxPremiereDate?: string;
                /**
                 * Optional filter by MediaType. Allows multiple, comma delimited.
                 */
                mediaTypes?: string;
                /**
                 * Optional filter by minimum community rating.
                 */
                minCommunityRating?: number | null;
                /**
                 * Optional filter by minimum critic rating.
                 */
                minCriticRating?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSaved?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSavedForUser?: string;
                /**
                 * Optional filter by minimum index number.
                 */
                minIndexNumber?: number | null;
                /**
                 * Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                 */
                minOfficialRating?: string;
                /**
                 * Optional filter by minimum number of game players.
                 */
                minPlayers?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minPremiereDate?: string;
                /**
                 * Optional filter by items whose name is equally or lesser than a given input string.
                 */
                nameLessThan?: string;
                /**
                 * Optional filter by items whose name is sorted equally than a given input string.
                 */
                nameStartsWith?: string;
                /**
                 * Optional filter by items whose name is sorted equally or greater than a given input string.
                 */
                nameStartsWithOrGreater?: string;
                /**
                 * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                 */
                officialRatings?: string;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional filter by parent index number.
                 */
                parentIndexNumber?: number | null;
                /**
                 * Optional filter by Path.
                 */
                path?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                person?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                personIds?: string;
                /**
                 * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                 */
                personTypes?: string;
                /**
                 * When searching within folders, this determines whether or not the search will be recursive. true/false
                 */
                recursive?: boolean;
                /**
                 * Optional filter by Series Status. Allows multiple, comma delimeted.
                 */
                seriesStatus?: string;
                /**
                 * Optional filter by recordings belonging to a series timer
                 */
                seriesTimerId?: string;
                /**
                 * Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                 */
                sortBy?: string;
                /**
                 * Sort Order - Ascending,Descending
                 */
                sortOrder?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional filter by recording status.
                 */
                status?: 'New' | 'InProgress' | 'Completed' | 'Cancelled' | 'ConflictedOk' | 'ConflictedNotOk' | 'Error';
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studioIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studios?: string;
                /**
                 * Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                 */
                subtitleCodecs?: string;
                /**
                 * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                 */
                tags?: string;
                /**
                 * User Id
                 */
                userId?: string;
                /**
                 * Optional filter by VideoCodec. Allows multiple, comma delimeted.
                 */
                videoCodecs?: string;
                /**
                 * Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                 */
                videoTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                 */
                years?: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/Timers': {
        get: {
            req: {
                /**
                 * Optional filter by channel id.
                 */
                channelId?: string;
                /**
                 * Optional filter by timers belonging to a series timer
                 */
                seriesTimerId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<TimerInfoDto> object.
                 */
                200: QueryResult_LiveTv_TimerInfoDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        post: {
            req: {
                /**
                 * TimerInfoDto:
                 */
                requestBody: LiveTv_TimerInfoDto;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/SeriesTimers': {
        get: {
            req: {
                /**
                 * Optional. Sort by SortName or Priority
                 */
                sortBy?: string;
                /**
                 * Optional. Sort in Ascending or Descending order
                 */
                sortOrder?: 'Ascending' | 'Descending';
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<SeriesTimerInfoDto> object.
                 */
                200: QueryResult_LiveTv_SeriesTimerInfoDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        post: {
            req: {
                /**
                 * SeriesTimerInfoDto:
                 */
                requestBody: LiveTv_SeriesTimerInfoDto;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/GuideInfo': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a GuideInfo object.
                 */
                200: LiveTv_GuideInfo;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/TunerHosts/Types': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a List<NameIdPair> object.
                 */
                200: Array<NameIdPair>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/Recordings/Folders': {
        get: {
            req: {
                /**
                 * Optional filter by user and attach user data.
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a BaseItemDto[] object.
                 */
                200: Array<BaseItemDto>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/Tuners/Discvover': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a List<TunerHostInfo> object.
                 */
                200: Array<LiveTv_TunerHostInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/ListingProviders/Default': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a ListingsProviderInfo object.
                 */
                200: LiveTv_ListingsProviderInfo;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/ListingProviders/Lineups': {
        get: {
            req: {
                /**
                 * Country
                 */
                country?: string;
                /**
                 * Provider id
                 */
                id?: string;
                /**
                 * Location
                 */
                location?: string;
                /**
                 * Provider Type
                 */
                type?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a List<NameIdPair> object.
                 */
                200: Array<NameIdPair>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/Channels/{Id}': {
        get: {
            req: {
                /**
                 * Channel Id
                 */
                id: string;
                /**
                 * Optional attach user data.
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a BaseItemDto object.
                 */
                200: BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/Programs/Recommended': {
        get: {
            req: {
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * The genres to return guide information for.
                 */
                genreIds?: string;
                /**
                 * Optional. Filter by programs that have completed airing, or not.
                 */
                hasAired?: boolean | null;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. Filter by programs that are currently airing, or not.
                 */
                isAiring?: boolean | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional filter by user id.
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/Recordings/Series': {
        get: {
            req: {
                /**
                 * Optional filter by channel id.
                 */
                channelId?: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Optional filter by recording group.
                 */
                groupId?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional filter by recordings that are in progress, or not.
                 */
                isInProgress?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional filter by recordings belonging to a series timer
                 */
                seriesTimerId?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional filter by recording status.
                 */
                status?: 'New' | 'InProgress' | 'Completed' | 'Cancelled' | 'ConflictedOk' | 'ConflictedNotOk' | 'Error';
                /**
                 * Optional filter by user and attach user data.
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/Recordings/{Id}': {
        get: {
            req: {
                /**
                 * Recording Id
                 */
                id: string;
                /**
                 * Optional attach user data.
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a BaseItemDto object.
                 */
                200: BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            req: {
                /**
                 * Recording Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/Timers/{Id}': {
        get: {
            req: {
                /**
                 * Timer Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Returning a TimerInfoDto object.
                 */
                200: LiveTv_TimerInfoDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            req: {
                /**
                 * Timer Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        post: {
            req: {
                id: string;
                /**
                 * TimerInfoDto:
                 */
                requestBody: LiveTv_TimerInfoDto;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/SeriesTimers/{Id}': {
        get: {
            req: {
                /**
                 * Timer Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Returning a TimerInfoDto object.
                 */
                200: LiveTv_TimerInfoDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            req: {
                /**
                 * Timer Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        post: {
            req: {
                id: string;
                /**
                 * SeriesTimerInfoDto:
                 */
                requestBody: LiveTv_SeriesTimerInfoDto;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/Timers/Defaults': {
        get: {
            req: {
                /**
                 * Optional, to attach default values based on a program.
                 */
                programId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a SeriesTimerInfoDto object.
                 */
                200: LiveTv_SeriesTimerInfoDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/Recordings/Groups': {
        get: {
            req: {
                /**
                 * Optional filter by user and attach user data.
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/ListingProviders/Available': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a ListingProviderTypeInfo[] object.
                 */
                200: Array<LiveTv_ListingProviderTypeInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/LiveRecordings/{Id}/stream': {
        get: {
            req: {
                id: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/LiveStreamFiles/{Id}/stream.{Container}': {
        get: {
            req: {
                container: string;
                id: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/ListingProviders/SchedulesDirect/Countries': {
        get: {
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/Recordings/Groups/{Id}': {
        get: {
            req: {
                /**
                 * Recording group Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Returning a BaseItemDto object.
                 */
                200: BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/Tuners/{Id}/Reset': {
        post: {
            req: {
                /**
                 * Tuner Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Localization/ParentalRatings': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a ParentalRating[] object.
                 */
                200: Array<ParentalRating>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Localization/Options': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a LocalizatonOption[] object.
                 */
                200: Array<Globalization_LocalizatonOption>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Localization/Countries': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a CountryInfo[] object.
                 */
                200: Array<Globalization_CountryInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Localization/Cultures': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a CultureDto[] object.
                 */
                200: Array<Globalization_CultureDto>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Movies/Recommendations': {
        get: {
            req: {
                /**
                 * The max number of categories to return
                 */
                categoryLimit?: number;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * The max number of items to return per category
                 */
                itemLimit?: number;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a RecommendationDto[] object.
                 */
                200: Array<RecommendationDto>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/News/Product': {
        get: {
            req: {
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<NewsItem> object.
                 */
                200: QueryResult_News_NewsItem;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Notifications/Types': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a List<NotificationTypeInfo> object.
                 */
                200: Array<Notifications_NotificationTypeInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Notifications/Services': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a List<NameIdPair> object.
                 */
                200: Array<NameIdPair>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Notifications/Admin': {
        post: {
            req: {
                /**
                 * The notification's description
                 */
                description: string;
                /**
                 * The notification's image url
                 */
                imageUrl?: string;
                /**
                 * The notification level
                 */
                level?: 'Normal' | 'Warning' | 'Error';
                /**
                 * The notification's name
                 */
                name: string;
                /**
                 * The notification's info url
                 */
                url?: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Notifications/{UserId}': {
        get: {
            req: {
                /**
                 * An optional filter by IsRead
                 */
                isRead?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a NotificationResult object.
                 */
                200: Emby_Notifications_Api_NotificationResult;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Notifications/{UserId}/Summary': {
        get: {
            req: {
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a NotificationsSummary object.
                 */
                200: Emby_Notifications_Api_NotificationsSummary;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Notifications/{UserId}/Read': {
        post: {
            req: {
                /**
                 * A list of notification ids, comma delimited
                 */
                ids: string;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Notifications/{UserId}/Unread': {
        post: {
            req: {
                /**
                 * A list of notification ids, comma delimited
                 */
                ids: string;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Reports/Activities': {
        get: {
            req: {
                /**
                 * The report display type. Values (None, Screen, Export, ScreenExport)
                 */
                displayType: string;
                /**
                 * Optional. If specified, results will include grouped records.
                 */
                groupBy?: string;
                /**
                 * Optional. If specified, results will include all records.
                 */
                hasQueryLimit?: boolean;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. The columns to show.
                 */
                reportColumns?: string;
                /**
                 * The report view. Values (ReportData, ReportActivities)
                 */
                reportView: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
            };
            res: {
                /**
                 * Operation successful. Returning a ReportResult object.
                 */
                200: EmbyReports_Api_Model_ReportResult;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Reports/Headers': {
        get: {
            req: {
                /**
                 * The report display type. Values (None, Screen, Export, ScreenExport)
                 */
                displayType: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional. The columns to show.
                 */
                reportColumns?: string;
                /**
                 * The report view. Values (ReportData, ReportActivities)
                 */
                reportView: string;
            };
            res: {
                /**
                 * Operation successful. Returning a List<ReportHeader> object.
                 */
                200: Array<EmbyReports_Api_Model_ReportHeader>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Reports/Items': {
        get: {
            req: {
                /**
                 * Optional. Return items that are siblings of a supplied item.
                 */
                adjacentTo?: string;
                /**
                 * Gets all episodes that aired during a season, including specials.
                 */
                airedDuringSeason?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                 */
                albums?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artistIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artists?: string;
                /**
                 * Whether or not to hide items behind their boxsets.
                 */
                collapseBoxSetItems?: boolean | null;
                /**
                 * Optional filter by Container. Allows multiple, comma delimeted.
                 */
                containers?: string;
                /**
                 * The report display type. Values (None, Screen, Export, ScreenExport)
                 */
                displayType: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                 */
                excludeItemIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                excludeItemTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                excludeLocationTypes?: string;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                 */
                filters?: string;
                /**
                 * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                 */
                genres?: string;
                /**
                 * Optional. If specified, results will include grouped records.
                 */
                groupBy?: string;
                /**
                 * Optional filter by items that have an imdb id or not.
                 */
                hasImdbId?: boolean | null;
                /**
                 * Optional filter by items that have official ratings
                 */
                hasOfficialRating?: boolean | null;
                /**
                 * Optional filter by items that have an overview or not.
                 */
                hasOverview?: boolean | null;
                /**
                 * Optional filter by items that have or do not have a parental rating
                 */
                hasParentalRating?: boolean | null;
                /**
                 * Optional. If specified, results will include all records.
                 */
                hasQueryLimit?: boolean;
                /**
                 * Optional filter by items with special features.
                 */
                hasSpecialFeature?: boolean | null;
                /**
                 * Optional filter by items with subtitles.
                 */
                hasSubtitles?: boolean | null;
                /**
                 * Optional filter by items with theme songs.
                 */
                hasThemeSong?: boolean | null;
                /**
                 * Optional filter by items with theme videos.
                 */
                hasThemeVideo?: boolean | null;
                /**
                 * Optional filter by items that have a tmdb id or not.
                 */
                hasTmdbId?: boolean | null;
                /**
                 * Optional filter by items with trailers.
                 */
                hasTrailer?: boolean | null;
                /**
                 * Optional filter by items that have a tvdb id or not.
                 */
                hasTvdbId?: boolean | null;
                /**
                 * Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                 */
                ids?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                 */
                imageTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional filter by items that are 3D, or not.
                 */
                is3D?: boolean | null;
                /**
                 * Optional filter by items that are marked as favorite, or not.
                 */
                isFavorite?: boolean | null;
                /**
                 * Optional filter by items that are HD or not.
                 */
                isHd?: boolean | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter by items that are locked.
                 */
                isLocked?: boolean | null;
                /**
                 * Optional filter by items that are missing episodes or not.
                 */
                isMissing?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter by items that are placeholders
                 */
                isPlaceHolder?: boolean | null;
                /**
                 * Optional filter by items that are played, or not.
                 */
                isPlayed?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional filter by items that are unaired episodes or not.
                 */
                isUnaired?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                locationTypes?: string;
                /**
                 * Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                 */
                maxOfficialRating?: string;
                /**
                 * Optional filter by maximum number of game players.
                 */
                maxPlayers?: number | null;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxPremiereDate?: string;
                /**
                 * Optional filter by MediaType. Allows multiple, comma delimited.
                 */
                mediaTypes?: string;
                /**
                 * Optional filter by minimum community rating.
                 */
                minCommunityRating?: number | null;
                /**
                 * Optional filter by minimum critic rating.
                 */
                minCriticRating?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSaved?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSavedForUser?: string;
                /**
                 * Optional filter by minimum index number.
                 */
                minIndexNumber?: number | null;
                /**
                 * Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                 */
                minOfficialRating?: string;
                /**
                 * Optional filter by minimum number of game players.
                 */
                minPlayers?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minPremiereDate?: string;
                /**
                 * Optional filter by items whose name is equally or lesser than a given input string.
                 */
                nameLessThan?: string;
                /**
                 * Optional filter by items whose name is sorted equally than a given input string.
                 */
                nameStartsWith?: string;
                /**
                 * Optional filter by items whose name is sorted equally or greater than a given input string.
                 */
                nameStartsWithOrGreater?: string;
                /**
                 * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                 */
                officialRatings?: string;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional filter by parent index number.
                 */
                parentIndexNumber?: number | null;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                person?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                personIds?: string;
                /**
                 * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                 */
                personTypes?: string;
                /**
                 * When searching within folders, this determines whether or not the search will be recursive. true/false
                 */
                recursive?: boolean;
                /**
                 * Optional. The columns to show.
                 */
                reportColumns?: string;
                /**
                 * The report view. Values (ReportData, ReportActivities)
                 */
                reportView: string;
                /**
                 * Optional filter by Series Status. Allows multiple, comma delimeted.
                 */
                seriesStatus?: string;
                /**
                 * Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                 */
                sortBy?: string;
                /**
                 * Sort Order - Ascending,Descending
                 */
                sortOrder?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studioIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studios?: string;
                /**
                 * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                 */
                tags?: string;
                /**
                 * User Id
                 */
                userId?: string;
                /**
                 * Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                 */
                videoTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                 */
                years?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a ReportResult object.
                 */
                200: EmbyReports_Api_Model_ReportResult;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Reports/Items/Download': {
        get: {
            req: {
                /**
                 * Optional. Return items that are siblings of a supplied item.
                 */
                adjacentTo?: string;
                /**
                 * Gets all episodes that aired during a season, including specials.
                 */
                airedDuringSeason?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                 */
                albums?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artistIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                 */
                artists?: string;
                /**
                 * Whether or not to hide items behind their boxsets.
                 */
                collapseBoxSetItems?: boolean | null;
                /**
                 * Optional filter by Container. Allows multiple, comma delimeted.
                 */
                containers?: string;
                /**
                 * The report display type. Values (None, Screen, Export, ScreenExport)
                 */
                displayType: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                 */
                excludeItemIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                excludeItemTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                excludeLocationTypes?: string;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                 */
                filters?: string;
                /**
                 * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                 */
                genres?: string;
                /**
                 * Optional. If specified, results will include grouped records.
                 */
                groupBy?: string;
                /**
                 * Optional filter by items that have an imdb id or not.
                 */
                hasImdbId?: boolean | null;
                /**
                 * Optional filter by items that have official ratings
                 */
                hasOfficialRating?: boolean | null;
                /**
                 * Optional filter by items that have an overview or not.
                 */
                hasOverview?: boolean | null;
                /**
                 * Optional filter by items that have or do not have a parental rating
                 */
                hasParentalRating?: boolean | null;
                /**
                 * Optional. If specified, results will include all records.
                 */
                hasQueryLimit?: boolean;
                /**
                 * Optional filter by items with special features.
                 */
                hasSpecialFeature?: boolean | null;
                /**
                 * Optional filter by items with subtitles.
                 */
                hasSubtitles?: boolean | null;
                /**
                 * Optional filter by items with theme songs.
                 */
                hasThemeSong?: boolean | null;
                /**
                 * Optional filter by items with theme videos.
                 */
                hasThemeVideo?: boolean | null;
                /**
                 * Optional filter by items that have a tmdb id or not.
                 */
                hasTmdbId?: boolean | null;
                /**
                 * Optional filter by items with trailers.
                 */
                hasTrailer?: boolean | null;
                /**
                 * Optional filter by items that have a tvdb id or not.
                 */
                hasTvdbId?: boolean | null;
                /**
                 * Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                 */
                ids?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                 */
                imageTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Optional filter by items that are 3D, or not.
                 */
                is3D?: boolean | null;
                /**
                 * Optional filter by items that are marked as favorite, or not.
                 */
                isFavorite?: boolean | null;
                /**
                 * Optional filter by items that are HD or not.
                 */
                isHd?: boolean | null;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter by items that are locked.
                 */
                isLocked?: boolean | null;
                /**
                 * Optional filter by items that are missing episodes or not.
                 */
                isMissing?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter by items that are placeholders
                 */
                isPlaceHolder?: boolean | null;
                /**
                 * Optional filter by items that are played, or not.
                 */
                isPlayed?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional filter by items that are unaired episodes or not.
                 */
                isUnaired?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
                 */
                locationTypes?: string;
                /**
                 * Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                 */
                maxOfficialRating?: string;
                /**
                 * Optional filter by maximum number of game players.
                 */
                maxPlayers?: number | null;
                /**
                 * Optional. The maximum premiere date. Format = ISO
                 */
                maxPremiereDate?: string;
                /**
                 * Optional filter by MediaType. Allows multiple, comma delimited.
                 */
                mediaTypes?: string;
                /**
                 * Optional filter by minimum community rating.
                 */
                minCommunityRating?: number | null;
                /**
                 * Optional filter by minimum critic rating.
                 */
                minCriticRating?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSaved?: string;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minDateLastSavedForUser?: string;
                /**
                 * Optional filter by minimum index number.
                 */
                minIndexNumber?: number | null;
                /**
                 * Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                 */
                minOfficialRating?: string;
                /**
                 * Optional filter by minimum number of game players.
                 */
                minPlayers?: number | null;
                /**
                 * Optional. The minimum premiere date. Format = ISO
                 */
                minPremiereDate?: string;
                /**
                 * Optional filter by items whose name is equally or lesser than a given input string.
                 */
                nameLessThan?: string;
                /**
                 * Optional filter by items whose name is sorted equally than a given input string.
                 */
                nameStartsWith?: string;
                /**
                 * Optional filter by items whose name is sorted equally or greater than a given input string.
                 */
                nameStartsWithOrGreater?: string;
                /**
                 * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                 */
                officialRatings?: string;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional filter by parent index number.
                 */
                parentIndexNumber?: number | null;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                person?: string;
                /**
                 * Optional. If specified, results will be filtered to include only those containing the specified person.
                 */
                personIds?: string;
                /**
                 * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                 */
                personTypes?: string;
                /**
                 * When searching within folders, this determines whether or not the search will be recursive. true/false
                 */
                recursive?: boolean;
                /**
                 * Optional. The columns to show.
                 */
                reportColumns?: string;
                /**
                 * The report view. Values (ReportData, ReportActivities)
                 */
                reportView: string;
                /**
                 * Optional filter by Series Status. Allows multiple, comma delimeted.
                 */
                seriesStatus?: string;
                /**
                 * Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                 */
                sortBy?: string;
                /**
                 * Sort Order - Ascending,Descending
                 */
                sortOrder?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studioIds?: string;
                /**
                 * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                 */
                studios?: string;
                /**
                 * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                 */
                tags?: string;
                /**
                 * User Id
                 */
                userId?: string;
                /**
                 * Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                 */
                videoTypes?: string;
                /**
                 * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                 */
                years?: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Search/Hints': {
        get: {
            req: {
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                excludeItemTypes?: string;
                includeArtists?: boolean;
                includeGenres?: boolean;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                includeMedia?: boolean;
                includePeople?: boolean;
                includeStudios?: boolean;
                /**
                 * Optional filter for kids.
                 */
                isKids?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isMovie?: boolean | null;
                /**
                 * Optional filter for news.
                 */
                isNews?: boolean | null;
                /**
                 * Optional filter for movies.
                 */
                isSeries?: boolean | null;
                /**
                 * Optional filter for sports.
                 */
                isSports?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                mediaTypes?: string;
                /**
                 * The search term to filter on
                 */
                searchTerm: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional. Supply a user id to search within a user's library or omit to search all.
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a SearchHintResult object.
                 */
                200: Search_SearchHintResult;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sessions/Playing': {
        post: {
            req: {
                /**
                 * PlaybackStartInfo:
                 */
                requestBody: PlaybackStartInfo;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sessions/Playing/Progress': {
        post: {
            req: {
                /**
                 * PlaybackProgressInfo:
                 */
                requestBody: PlaybackProgressInfo;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sessions/Playing/Ping': {
        post: {
            req: {
                playSessionId?: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sessions/Playing/Stopped': {
        post: {
            req: {
                /**
                 * PlaybackStopInfo:
                 */
                requestBody: PlaybackStopInfo;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/{UserId}/PlayedItems/{Id}': {
        post: {
            req: {
                /**
                 * The date the item was played (if any). Format = yyyyMMddHHmmss
                 */
                datePlayed?: string;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a UserItemDataDto object.
                 */
                200: UserItemDataDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a UserItemDataDto object.
                 */
                200: UserItemDataDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/{UserId}/PlayingItems/{Id}': {
        post: {
            req: {
                audioStreamIndex?: number | null;
                /**
                 * Indicates if the client can seek
                 */
                canSeek?: boolean;
                /**
                 * Item Id
                 */
                id: string;
                liveStreamId?: string;
                /**
                 * The id of the MediaSource
                 */
                mediaSourceId: string;
                playMethod?: 'Transcode' | 'DirectStream' | 'DirectPlay';
                playSessionId?: string;
                subtitleStreamIndex?: number | null;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                liveStreamId?: string;
                /**
                 * The id of the MediaSource
                 */
                mediaSourceId: string;
                /**
                 * The next media type that will play
                 */
                nextMediaType: string;
                playSessionId?: string;
                /**
                 * Optional. The position, in ticks, where playback stopped. 1 tick = 10000 ms
                 */
                positionTicks?: number | null;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/{UserId}/PlayingItems/{Id}/Progress': {
        post: {
            req: {
                audioStreamIndex?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Indicates if the player is muted.
                 */
                isMuted?: boolean;
                /**
                 * Indicates if the player is paused.
                 */
                isPaused?: boolean;
                liveStreamId?: string;
                /**
                 * The id of the MediaSource
                 */
                mediaSourceId: string;
                playMethod?: 'Transcode' | 'DirectStream' | 'DirectPlay';
                playSessionId?: string;
                /**
                 * Optional. The current position, in ticks. 1 tick = 10000 ms
                 */
                positionTicks?: number | null;
                repeatMode?: 'RepeatNone' | 'RepeatAll' | 'RepeatOne';
                subtitleStreamIndex?: number | null;
                /**
                 * User Id
                 */
                userId: string;
                /**
                 * Scale of 0-100
                 */
                volumeLevel?: number | null;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Shows/Upcoming': {
        get: {
            req: {
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
                 */
                fields?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Shows/NextUp': {
        get: {
            req: {
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
                 */
                fields?: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * Optional. Filter by series id
                 */
                seriesId?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Shows/{Id}/Seasons': {
        get: {
            req: {
                /**
                 * Optional. Return items that are siblings of a supplied item.
                 */
                adjacentTo?: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
                 */
                fields?: string;
                /**
                 * The series id
                 */
                id: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional filter by items that are missing episodes or not.
                 */
                isMissing?: boolean | null;
                /**
                 * Optional. Filter by special season.
                 */
                isSpecialSeason?: boolean | null;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Shows/{Id}/Episodes': {
        get: {
            req: {
                /**
                 * Optional. Return items that are siblings of a supplied item.
                 */
                adjacentTo?: string;
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
                 */
                fields?: string;
                /**
                 * The series id
                 */
                id: string;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional filter by items that are missing episodes or not.
                 */
                isMissing?: boolean | null;
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional filter by season number.
                 */
                season?: number | null;
                /**
                 * Optional. Filter by season id
                 */
                seasonId?: string;
                /**
                 * Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                 */
                sortBy?: string;
                /**
                 * Sort Order - Ascending,Descending
                 */
                sortOrder?: 'Ascending' | 'Descending';
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
                /**
                 * Optional. Skip through the list until a given item is found.
                 */
                startItemId?: string;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sync/Targets': {
        get: {
            req: {
                /**
                 * UserId
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a List<SyncTarget> object.
                 */
                200: Array<Sync_SyncTarget>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sync/Jobs': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a QueryResult<SyncJob> object.
                 */
                200: QueryResult_Sync_SyncJob;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        post: {
            req: {
                /**
                 * SyncJobRequest:
                 */
                requestBody: Sync_Model_SyncJobRequest;
            };
            res: {
                /**
                 * Operation successful. Returning a SyncJobCreationResult object.
                 */
                200: Sync_Model_SyncJobCreationResult;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sync/JobItems': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a QueryResult<SyncJobItem> object.
                 */
                200: QueryResult_Sync_Model_SyncJobItem;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sync/Options': {
        get: {
            req: {
                /**
                 * Category
                 */
                category?: 'Latest' | 'NextUp' | 'Resume';
                /**
                 * ItemIds
                 */
                itemIds?: string;
                /**
                 * ParentId
                 */
                parentId?: string;
                /**
                 * TargetId
                 */
                targetId?: string;
                /**
                 * UserId
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a SyncDialogOptions object.
                 */
                200: Sync_Model_SyncDialogOptions;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sync/OfflineActions': {
        post: {
            req: {
                /**
                 * List`1:
                 */
                requestBody: Array<Users_UserAction>;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sync/Data': {
        post: {
            req: {
                /**
                 * SyncDataRequest:
                 */
                requestBody: Sync_Model_SyncDataRequest;
            };
            res: {
                /**
                 * Operation successful. Returning a SyncDataResponse object.
                 */
                200: Sync_Model_SyncDataResponse;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sync/{ItemId}/Status': {
        post: {
            req: {
                itemId: string;
                /**
                 * SyncedItemProgress:
                 */
                requestBody: Sync_Model_SyncedItemProgress;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sync/Jobs/{Id}': {
        get: {
            req: {
                /**
                 * Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Returning a SyncJob object.
                 */
                200: Sync_SyncJob;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            req: {
                /**
                 * Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        post: {
            req: {
                id: number;
                /**
                 * SyncJob:
                 */
                requestBody: Sync_SyncJob;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sync/Items/Cancel': {
        post: {
            req: {
                /**
                 * ItemIds
                 */
                itemIds?: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sync/{TargetId}/Items': {
        delete: {
            req: {
                /**
                 * TargetId
                 */
                targetId: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sync/Items/Ready': {
        get: {
            req: {
                /**
                 * TargetId
                 */
                targetId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a List<SyncedItem> object.
                 */
                200: Array<Sync_Model_SyncedItem>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sync/JobItems/{Id}': {
        delete: {
            req: {
                /**
                 * Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sync/JobItems/{Id}/Transferred': {
        post: {
            req: {
                /**
                 * Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sync/JobItems/{Id}/File': {
        get: {
            req: {
                /**
                 * Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sync/JobItems/{Id}/AdditionalFiles': {
        get: {
            req: {
                /**
                 * Id
                 */
                id: string;
                /**
                 * Name
                 */
                name: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sync/JobItems/{Id}/Enable': {
        post: {
            req: {
                /**
                 * Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sync/JobItems/{Id}/MarkForRemoval': {
        post: {
            req: {
                /**
                 * Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Sync/JobItems/{Id}/UnmarkForRemoval': {
        post: {
            req: {
                /**
                 * Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/System/Configuration': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a ServerConfiguration object.
                 */
                200: Configuration_ServerConfiguration;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        post: {
            req: {
                /**
                 * ServerConfiguration:
                 */
                requestBody: Configuration_ServerConfiguration;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/System/Configuration/{Key}': {
        get: {
            req: {
                /**
                 * Key
                 */
                key: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        post: {
            req: {
                /**
                 * Key
                 */
                key: string;
                /**
                 * Binary stream
                 */
                requestBody: (Blob | File);
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/System/Ping': {
        post: {
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        get: {
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/System/WakeOnLanInfo': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a WakeOnLanInfo[] object.
                 */
                200: Array<WakeOnLanInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/System/Logs': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a LogFile[] object.
                 */
                200: Array<LogFile>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/System/Info': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a SystemInfo object.
                 */
                200: SystemInfo;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/System/Restart': {
        post: {
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/System/Shutdown': {
        post: {
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/System/Endpoint': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a EndPointInfo object.
                 */
                200: Net_EndPointInfo;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/System/Logs/Log': {
        get: {
            req: {
                /**
                 * The log file name.
                 */
                name: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/System/Info/Public': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a PublicSystemInfo object.
                 */
                200: PublicSystemInfo;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/user_usage_stats/type_filter_list': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a Object object.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/user_usage_stats/user_activity': {
        get: {
            req: {
                /**
                 * Number of Days
                 */
                days?: number;
                /**
                 * End date of the report in yyyy-MM-dd format
                 */
                endDate?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a Object object.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/user_usage_stats/user_list': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a Object object.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/user_usage_stats/import_backup': {
        post: {
            req: {
                /**
                 * Binary stream
                 */
                requestBody: (Blob | File);
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/user_usage_stats/load_backup': {
        get: {
            req: {
                /**
                 * File name of file to load
                 */
                backupfile: string;
            };
            res: {
                /**
                 * Operation successful. Returning a Object object.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/user_usage_stats/save_backup': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a Object object.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/user_usage_stats/PlayActivity': {
        get: {
            req: {
                /**
                 * Data type to return (count,time)
                 */
                dataType?: string;
                /**
                 * Number of Days
                 */
                days?: number;
                /**
                 * End date of the report in yyyy-MM-dd format
                 */
                endDate?: string;
                /**
                 * Comma separated list of media types to filter (movies,series)
                 */
                filter?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a Object object.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/user_usage_stats/HourlyReport': {
        get: {
            req: {
                /**
                 * Number of Days
                 */
                days?: number;
                /**
                 * End date of the report in yyyy-MM-dd format
                 */
                endDate?: string;
                /**
                 * Comma separated list of media types to filter (movies,series)
                 */
                filter?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a Object object.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/user_usage_stats/DurationHistogramReport': {
        get: {
            req: {
                /**
                 * Number of Days
                 */
                days?: number;
                /**
                 * End date of the report in yyyy-MM-dd format
                 */
                endDate?: string;
                /**
                 * Comma separated list of media types to filter (movies,series)
                 */
                filter?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a Object object.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/user_usage_stats/TvShowsReport': {
        get: {
            req: {
                /**
                 * Number of Days
                 */
                days?: number;
                /**
                 * End date of the report in yyyy-MM-dd format
                 */
                endDate?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a Object object.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/user_usage_stats/MoviesReport': {
        get: {
            req: {
                /**
                 * Number of Days
                 */
                days?: number;
                /**
                 * End date of the report in yyyy-MM-dd format
                 */
                endDate?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a Object object.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/user_usage_stats/submit_custom_query': {
        post: {
            req: {
                /**
                 * CustomQuery
                 */
                requestBody: playback_reporting_Api_CustomQuery;
            };
            res: {
                /**
                 * Operation successful. Returning a Object object.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/user_usage_stats/UserPlaylist': {
        get: {
            req: {
                /**
                 * Number of Days
                 */
                days?: number;
                /**
                 * End date of the report in yyyy-MM-dd format
                 */
                endDate?: string;
                /**
                 * Comma separated list of media types to filter (movies,series)
                 */
                filter?: string;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a Object object.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/user_usage_stats/session_list': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a Object object.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/user_usage_stats/resource_usage': {
        get: {
            req: {
                /**
                 * Number of Hours
                 */
                hours?: number;
            };
            res: {
                /**
                 * Operation successful. Returning a Object object.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/user_usage_stats/process_list': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a Object object.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/user_usage_stats/{BreakdownType}/BreakdownReport': {
        get: {
            req: {
                /**
                 * Breakdown type
                 */
                breakdownType: string;
                /**
                 * Number of Days
                 */
                days?: number;
                /**
                 * End date of the report in yyyy-MM-dd format
                 */
                endDate?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a Object object.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/user_usage_stats/user_manage/{Action}/{Id}': {
        get: {
            req: {
                /**
                 * action to perform
                 */
                action: string;
                /**
                 * user Id to perform the action on
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Returning a Object object.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/user_usage_stats/{UserID}/{Date}/GetItems': {
        get: {
            req: {
                /**
                 * UTC DateTime, Format yyyy-MM-dd
                 */
                date: string;
                /**
                 * Comma separated list of media types to filter (movies,series)
                 */
                filter?: string;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a Object object.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Videos/MergeVersions': {
        post: {
            req: {
                /**
                 * Item id list. This allows multiple, comma delimited.
                 */
                ids?: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Videos/{Id}/AdditionalParts': {
        get: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Filter by user id, and attach user data
                 */
                userId?: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Videos/{Id}/AlternateSources': {
        delete: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Videos/ActiveEncodings': {
        delete: {
            req: {
                /**
                 * The device id of the client requesting. Used to stop encoding processes when needed.
                 */
                deviceId: string;
                /**
                 * The play session id
                 */
                playSessionId: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Videos/{Id}/hls/{PlaylistId}/{SegmentId}.{SegmentContainer}': {
        get: {
            req: {
                /**
                 * Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
                 */
                _static?: boolean;
                /**
                 * Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
                 */
                audioBitRate?: number | null;
                /**
                 * Optional. Specify a specific number of audio channels to encode to, e.g. 2
                 */
                audioChannels?: number | null;
                /**
                 * Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
                 */
                audioCodec?: string;
                /**
                 * Optional. Specify a specific audio sample rate, e.g. 44100
                 */
                audioSampleRate?: number | null;
                /**
                 * Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
                 */
                audioStreamIndex?: number | null;
                /**
                 * Container
                 */
                container: string;
                /**
                 * Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
                 */
                copyTimestamps?: boolean;
                /**
                 * The device id of the client requesting. Used to stop encoding processes when needed.
                 */
                deviceId?: string;
                /**
                 * Optional. The dlna device profile id to utilize.
                 */
                deviceProfileId?: string;
                /**
                 * Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
                 */
                enableAutoStreamCopy?: boolean;
                /**
                 * Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                framerate?: number | null;
                /**
                 * Optional. The fixed vertical resolution of the encoded video.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
                 */
                level?: string;
                /**
                 * Optional. Specify a maximum number of audio channels to encode to, e.g. 2
                 */
                maxAudioChannels?: number | null;
                /**
                 * Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                maxFramerate?: number | null;
                /**
                 * Optional. The maximum vertical resolution of the encoded video.
                 */
                maxHeight?: number | null;
                /**
                 * Optional.
                 */
                maxRefFrames?: number | null;
                /**
                 * Optional.
                 */
                maxVideoBitDepth?: number | null;
                /**
                 * Optional. The maximum horizontal resolution of the encoded video.
                 */
                maxWidth?: number | null;
                playlistId: string;
                /**
                 * Optional. Specify a specific h264 profile, e.g. main, baseline, high.
                 */
                profile?: string;
                /**
                 * SegmentContainer
                 */
                segmentContainer: string;
                /**
                 * SegmentId
                 */
                segmentId: string;
                /**
                 * Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms
                 */
                startTimeTicks?: number | null;
                /**
                 * Optional. Specify the subtitle delivery method.
                 */
                subtitleMethod?: 'Encode' | 'Embed' | 'External' | 'Hls';
                /**
                 * Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
                 */
                subtitleStreamIndex?: number | null;
                /**
                 * Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
                 */
                videoBitRate?: number | null;
                /**
                 * Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.
                 */
                videoCodec?: string;
                /**
                 * Optional. The index of the video stream to use. If omitted the first video stream will be used.
                 */
                videoStreamIndex?: number | null;
                /**
                 * Optional. The fixed horizontal resolution of the encoded video.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/web/ConfigurationPage': {
        get: {
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/web/ConfigurationPages': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a List<ConfigurationPageInfo> object.
                 */
                200: Array<WebDashboard_Api_ConfigurationPageInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Audio/{Id}/universal.{Container}': {
        get: {
            req: {
                container: string;
                /**
                 * The device id of the client requesting. Used to stop encoding processes when needed.
                 */
                deviceId?: string;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms
                 */
                startTimeTicks?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                container: string;
                /**
                 * The device id of the client requesting. Used to stop encoding processes when needed.
                 */
                deviceId?: string;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms
                 */
                startTimeTicks?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Audio/{Id}/universal': {
        get: {
            req: {
                /**
                 * The device id of the client requesting. Used to stop encoding processes when needed.
                 */
                deviceId?: string;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms
                 */
                startTimeTicks?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * The device id of the client requesting. Used to stop encoding processes when needed.
                 */
                deviceId?: string;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms
                 */
                startTimeTicks?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Audio/{Id}/stream.{Container}': {
        get: {
            req: {
                /**
                 * Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
                 */
                _static?: boolean;
                /**
                 * Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
                 */
                audioBitRate?: number | null;
                /**
                 * Optional. Specify a specific number of audio channels to encode to, e.g. 2
                 */
                audioChannels?: number | null;
                /**
                 * Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
                 */
                audioCodec?: string;
                /**
                 * Optional. Specify a specific audio sample rate, e.g. 44100
                 */
                audioSampleRate?: number | null;
                /**
                 * Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
                 */
                audioStreamIndex?: number | null;
                /**
                 * Container
                 */
                container: string;
                /**
                 * Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
                 */
                copyTimestamps?: boolean;
                /**
                 * The device id of the client requesting. Used to stop encoding processes when needed.
                 */
                deviceId?: string;
                /**
                 * Optional. The dlna device profile id to utilize.
                 */
                deviceProfileId?: string;
                /**
                 * Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
                 */
                enableAutoStreamCopy?: boolean;
                /**
                 * Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                framerate?: number | null;
                /**
                 * Optional. The fixed vertical resolution of the encoded video.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
                 */
                level?: string;
                /**
                 * Optional. Specify a maximum number of audio channels to encode to, e.g. 2
                 */
                maxAudioChannels?: number | null;
                /**
                 * Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                maxFramerate?: number | null;
                /**
                 * Optional. The maximum vertical resolution of the encoded video.
                 */
                maxHeight?: number | null;
                /**
                 * Optional.
                 */
                maxRefFrames?: number | null;
                /**
                 * Optional.
                 */
                maxVideoBitDepth?: number | null;
                /**
                 * Optional. The maximum horizontal resolution of the encoded video.
                 */
                maxWidth?: number | null;
                /**
                 * Optional. Specify a specific h264 profile, e.g. main, baseline, high.
                 */
                profile?: string;
                /**
                 * Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms
                 */
                startTimeTicks?: number | null;
                /**
                 * Optional. Specify the subtitle delivery method.
                 */
                subtitleMethod?: 'Encode' | 'Embed' | 'External' | 'Hls';
                /**
                 * Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
                 */
                subtitleStreamIndex?: number | null;
                /**
                 * Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
                 */
                videoBitRate?: number | null;
                /**
                 * Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.
                 */
                videoCodec?: string;
                /**
                 * Optional. The index of the video stream to use. If omitted the first video stream will be used.
                 */
                videoStreamIndex?: number | null;
                /**
                 * Optional. The fixed horizontal resolution of the encoded video.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
                 */
                _static?: boolean;
                /**
                 * Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
                 */
                audioBitRate?: number | null;
                /**
                 * Optional. Specify a specific number of audio channels to encode to, e.g. 2
                 */
                audioChannels?: number | null;
                /**
                 * Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
                 */
                audioCodec?: string;
                /**
                 * Optional. Specify a specific audio sample rate, e.g. 44100
                 */
                audioSampleRate?: number | null;
                /**
                 * Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
                 */
                audioStreamIndex?: number | null;
                /**
                 * Container
                 */
                container: string;
                /**
                 * Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
                 */
                copyTimestamps?: boolean;
                /**
                 * The device id of the client requesting. Used to stop encoding processes when needed.
                 */
                deviceId?: string;
                /**
                 * Optional. The dlna device profile id to utilize.
                 */
                deviceProfileId?: string;
                /**
                 * Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
                 */
                enableAutoStreamCopy?: boolean;
                /**
                 * Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                framerate?: number | null;
                /**
                 * Optional. The fixed vertical resolution of the encoded video.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
                 */
                level?: string;
                /**
                 * Optional. Specify a maximum number of audio channels to encode to, e.g. 2
                 */
                maxAudioChannels?: number | null;
                /**
                 * Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                maxFramerate?: number | null;
                /**
                 * Optional. The maximum vertical resolution of the encoded video.
                 */
                maxHeight?: number | null;
                /**
                 * Optional.
                 */
                maxRefFrames?: number | null;
                /**
                 * Optional.
                 */
                maxVideoBitDepth?: number | null;
                /**
                 * Optional. The maximum horizontal resolution of the encoded video.
                 */
                maxWidth?: number | null;
                /**
                 * Optional. Specify a specific h264 profile, e.g. main, baseline, high.
                 */
                profile?: string;
                /**
                 * Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms
                 */
                startTimeTicks?: number | null;
                /**
                 * Optional. Specify the subtitle delivery method.
                 */
                subtitleMethod?: 'Encode' | 'Embed' | 'External' | 'Hls';
                /**
                 * Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
                 */
                subtitleStreamIndex?: number | null;
                /**
                 * Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
                 */
                videoBitRate?: number | null;
                /**
                 * Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.
                 */
                videoCodec?: string;
                /**
                 * Optional. The index of the video stream to use. If omitted the first video stream will be used.
                 */
                videoStreamIndex?: number | null;
                /**
                 * Optional. The fixed horizontal resolution of the encoded video.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Audio/{Id}/stream': {
        get: {
            req: {
                /**
                 * Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
                 */
                _static?: boolean;
                /**
                 * Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
                 */
                audioBitRate?: number | null;
                /**
                 * Optional. Specify a specific number of audio channels to encode to, e.g. 2
                 */
                audioChannels?: number | null;
                /**
                 * Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
                 */
                audioCodec?: string;
                /**
                 * Optional. Specify a specific audio sample rate, e.g. 44100
                 */
                audioSampleRate?: number | null;
                /**
                 * Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
                 */
                audioStreamIndex?: number | null;
                /**
                 * Container
                 */
                container: string;
                /**
                 * Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
                 */
                copyTimestamps?: boolean;
                /**
                 * The device id of the client requesting. Used to stop encoding processes when needed.
                 */
                deviceId?: string;
                /**
                 * Optional. The dlna device profile id to utilize.
                 */
                deviceProfileId?: string;
                /**
                 * Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
                 */
                enableAutoStreamCopy?: boolean;
                /**
                 * Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                framerate?: number | null;
                /**
                 * Optional. The fixed vertical resolution of the encoded video.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
                 */
                level?: string;
                /**
                 * Optional. Specify a maximum number of audio channels to encode to, e.g. 2
                 */
                maxAudioChannels?: number | null;
                /**
                 * Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                maxFramerate?: number | null;
                /**
                 * Optional. The maximum vertical resolution of the encoded video.
                 */
                maxHeight?: number | null;
                /**
                 * Optional.
                 */
                maxRefFrames?: number | null;
                /**
                 * Optional.
                 */
                maxVideoBitDepth?: number | null;
                /**
                 * Optional. The maximum horizontal resolution of the encoded video.
                 */
                maxWidth?: number | null;
                /**
                 * Optional. Specify a specific h264 profile, e.g. main, baseline, high.
                 */
                profile?: string;
                /**
                 * Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms
                 */
                startTimeTicks?: number | null;
                /**
                 * Optional. Specify the subtitle delivery method.
                 */
                subtitleMethod?: 'Encode' | 'Embed' | 'External' | 'Hls';
                /**
                 * Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
                 */
                subtitleStreamIndex?: number | null;
                /**
                 * Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
                 */
                videoBitRate?: number | null;
                /**
                 * Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.
                 */
                videoCodec?: string;
                /**
                 * Optional. The index of the video stream to use. If omitted the first video stream will be used.
                 */
                videoStreamIndex?: number | null;
                /**
                 * Optional. The fixed horizontal resolution of the encoded video.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
                 */
                _static?: boolean;
                /**
                 * Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
                 */
                audioBitRate?: number | null;
                /**
                 * Optional. Specify a specific number of audio channels to encode to, e.g. 2
                 */
                audioChannels?: number | null;
                /**
                 * Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
                 */
                audioCodec?: string;
                /**
                 * Optional. Specify a specific audio sample rate, e.g. 44100
                 */
                audioSampleRate?: number | null;
                /**
                 * Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
                 */
                audioStreamIndex?: number | null;
                /**
                 * Container
                 */
                container: string;
                /**
                 * Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
                 */
                copyTimestamps?: boolean;
                /**
                 * The device id of the client requesting. Used to stop encoding processes when needed.
                 */
                deviceId?: string;
                /**
                 * Optional. The dlna device profile id to utilize.
                 */
                deviceProfileId?: string;
                /**
                 * Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
                 */
                enableAutoStreamCopy?: boolean;
                /**
                 * Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                framerate?: number | null;
                /**
                 * Optional. The fixed vertical resolution of the encoded video.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
                 */
                level?: string;
                /**
                 * Optional. Specify a maximum number of audio channels to encode to, e.g. 2
                 */
                maxAudioChannels?: number | null;
                /**
                 * Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                maxFramerate?: number | null;
                /**
                 * Optional. The maximum vertical resolution of the encoded video.
                 */
                maxHeight?: number | null;
                /**
                 * Optional.
                 */
                maxRefFrames?: number | null;
                /**
                 * Optional.
                 */
                maxVideoBitDepth?: number | null;
                /**
                 * Optional. The maximum horizontal resolution of the encoded video.
                 */
                maxWidth?: number | null;
                /**
                 * Optional. Specify a specific h264 profile, e.g. main, baseline, high.
                 */
                profile?: string;
                /**
                 * Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms
                 */
                startTimeTicks?: number | null;
                /**
                 * Optional. Specify the subtitle delivery method.
                 */
                subtitleMethod?: 'Encode' | 'Embed' | 'External' | 'Hls';
                /**
                 * Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
                 */
                subtitleStreamIndex?: number | null;
                /**
                 * Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
                 */
                videoBitRate?: number | null;
                /**
                 * Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.
                 */
                videoCodec?: string;
                /**
                 * Optional. The index of the video stream to use. If omitted the first video stream will be used.
                 */
                videoStreamIndex?: number | null;
                /**
                 * Optional. The fixed horizontal resolution of the encoded video.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Audio/{Id}/master.m3u8': {
        get: {
            req: {
                /**
                 * Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
                 */
                _static?: boolean;
                /**
                 * Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
                 */
                audioBitRate?: number | null;
                /**
                 * Optional. Specify a specific number of audio channels to encode to, e.g. 2
                 */
                audioChannels?: number | null;
                /**
                 * Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
                 */
                audioCodec?: string;
                /**
                 * Optional. Specify a specific audio sample rate, e.g. 44100
                 */
                audioSampleRate?: number | null;
                /**
                 * Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
                 */
                audioStreamIndex?: number | null;
                /**
                 * Container
                 */
                container: string;
                /**
                 * Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
                 */
                copyTimestamps?: boolean;
                /**
                 * The device id of the client requesting. Used to stop encoding processes when needed.
                 */
                deviceId?: string;
                /**
                 * Optional. The dlna device profile id to utilize.
                 */
                deviceProfileId?: string;
                /**
                 * Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
                 */
                enableAutoStreamCopy?: boolean;
                /**
                 * Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                framerate?: number | null;
                /**
                 * Optional. The fixed vertical resolution of the encoded video.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
                 */
                level?: string;
                /**
                 * Optional. Specify a maximum number of audio channels to encode to, e.g. 2
                 */
                maxAudioChannels?: number | null;
                /**
                 * Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                maxFramerate?: number | null;
                /**
                 * Optional. The maximum vertical resolution of the encoded video.
                 */
                maxHeight?: number | null;
                /**
                 * Optional.
                 */
                maxRefFrames?: number | null;
                /**
                 * Optional.
                 */
                maxVideoBitDepth?: number | null;
                /**
                 * Optional. The maximum horizontal resolution of the encoded video.
                 */
                maxWidth?: number | null;
                /**
                 * Optional. Specify a specific h264 profile, e.g. main, baseline, high.
                 */
                profile?: string;
                /**
                 * Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms
                 */
                startTimeTicks?: number | null;
                /**
                 * Optional. Specify the subtitle delivery method.
                 */
                subtitleMethod?: 'Encode' | 'Embed' | 'External' | 'Hls';
                /**
                 * Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
                 */
                subtitleStreamIndex?: number | null;
                /**
                 * Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
                 */
                videoBitRate?: number | null;
                /**
                 * Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.
                 */
                videoCodec?: string;
                /**
                 * Optional. The index of the video stream to use. If omitted the first video stream will be used.
                 */
                videoStreamIndex?: number | null;
                /**
                 * Optional. The fixed horizontal resolution of the encoded video.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
                 */
                _static?: boolean;
                /**
                 * Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
                 */
                audioBitRate?: number | null;
                /**
                 * Optional. Specify a specific number of audio channels to encode to, e.g. 2
                 */
                audioChannels?: number | null;
                /**
                 * Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
                 */
                audioCodec?: string;
                /**
                 * Optional. Specify a specific audio sample rate, e.g. 44100
                 */
                audioSampleRate?: number | null;
                /**
                 * Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
                 */
                audioStreamIndex?: number | null;
                /**
                 * Container
                 */
                container: string;
                /**
                 * Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
                 */
                copyTimestamps?: boolean;
                /**
                 * The device id of the client requesting. Used to stop encoding processes when needed.
                 */
                deviceId?: string;
                /**
                 * Optional. The dlna device profile id to utilize.
                 */
                deviceProfileId?: string;
                /**
                 * Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
                 */
                enableAutoStreamCopy?: boolean;
                /**
                 * Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                framerate?: number | null;
                /**
                 * Optional. The fixed vertical resolution of the encoded video.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
                 */
                level?: string;
                /**
                 * Optional. Specify a maximum number of audio channels to encode to, e.g. 2
                 */
                maxAudioChannels?: number | null;
                /**
                 * Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                maxFramerate?: number | null;
                /**
                 * Optional. The maximum vertical resolution of the encoded video.
                 */
                maxHeight?: number | null;
                /**
                 * Optional.
                 */
                maxRefFrames?: number | null;
                /**
                 * Optional.
                 */
                maxVideoBitDepth?: number | null;
                /**
                 * Optional. The maximum horizontal resolution of the encoded video.
                 */
                maxWidth?: number | null;
                /**
                 * Optional. Specify a specific h264 profile, e.g. main, baseline, high.
                 */
                profile?: string;
                /**
                 * Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms
                 */
                startTimeTicks?: number | null;
                /**
                 * Optional. Specify the subtitle delivery method.
                 */
                subtitleMethod?: 'Encode' | 'Embed' | 'External' | 'Hls';
                /**
                 * Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
                 */
                subtitleStreamIndex?: number | null;
                /**
                 * Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
                 */
                videoBitRate?: number | null;
                /**
                 * Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.
                 */
                videoCodec?: string;
                /**
                 * Optional. The index of the video stream to use. If omitted the first video stream will be used.
                 */
                videoStreamIndex?: number | null;
                /**
                 * Optional. The fixed horizontal resolution of the encoded video.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Audio/{Id}/main.m3u8': {
        get: {
            req: {
                /**
                 * Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
                 */
                _static?: boolean;
                /**
                 * Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
                 */
                audioBitRate?: number | null;
                /**
                 * Optional. Specify a specific number of audio channels to encode to, e.g. 2
                 */
                audioChannels?: number | null;
                /**
                 * Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
                 */
                audioCodec?: string;
                /**
                 * Optional. Specify a specific audio sample rate, e.g. 44100
                 */
                audioSampleRate?: number | null;
                /**
                 * Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
                 */
                audioStreamIndex?: number | null;
                /**
                 * Container
                 */
                container: string;
                /**
                 * Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
                 */
                copyTimestamps?: boolean;
                /**
                 * The device id of the client requesting. Used to stop encoding processes when needed.
                 */
                deviceId?: string;
                /**
                 * Optional. The dlna device profile id to utilize.
                 */
                deviceProfileId?: string;
                /**
                 * Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
                 */
                enableAutoStreamCopy?: boolean;
                /**
                 * Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                framerate?: number | null;
                /**
                 * Optional. The fixed vertical resolution of the encoded video.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
                 */
                level?: string;
                /**
                 * Optional. Specify a maximum number of audio channels to encode to, e.g. 2
                 */
                maxAudioChannels?: number | null;
                /**
                 * Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                maxFramerate?: number | null;
                /**
                 * Optional. The maximum vertical resolution of the encoded video.
                 */
                maxHeight?: number | null;
                /**
                 * Optional.
                 */
                maxRefFrames?: number | null;
                /**
                 * Optional.
                 */
                maxVideoBitDepth?: number | null;
                /**
                 * Optional. The maximum horizontal resolution of the encoded video.
                 */
                maxWidth?: number | null;
                /**
                 * Optional. Specify a specific h264 profile, e.g. main, baseline, high.
                 */
                profile?: string;
                /**
                 * Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms
                 */
                startTimeTicks?: number | null;
                /**
                 * Optional. Specify the subtitle delivery method.
                 */
                subtitleMethod?: 'Encode' | 'Embed' | 'External' | 'Hls';
                /**
                 * Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
                 */
                subtitleStreamIndex?: number | null;
                /**
                 * Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
                 */
                videoBitRate?: number | null;
                /**
                 * Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.
                 */
                videoCodec?: string;
                /**
                 * Optional. The index of the video stream to use. If omitted the first video stream will be used.
                 */
                videoStreamIndex?: number | null;
                /**
                 * Optional. The fixed horizontal resolution of the encoded video.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Videos/{Id}/master.m3u8': {
        get: {
            req: {
                /**
                 * Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
                 */
                _static?: boolean;
                /**
                 * Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
                 */
                audioBitRate?: number | null;
                /**
                 * Optional. Specify a specific number of audio channels to encode to, e.g. 2
                 */
                audioChannels?: number | null;
                /**
                 * Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
                 */
                audioCodec?: string;
                /**
                 * Optional. Specify a specific audio sample rate, e.g. 44100
                 */
                audioSampleRate?: number | null;
                /**
                 * Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
                 */
                audioStreamIndex?: number | null;
                /**
                 * Container
                 */
                container: string;
                /**
                 * Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
                 */
                copyTimestamps?: boolean;
                /**
                 * The device id of the client requesting. Used to stop encoding processes when needed.
                 */
                deviceId?: string;
                /**
                 * Optional. The dlna device profile id to utilize.
                 */
                deviceProfileId?: string;
                /**
                 * Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
                 */
                enableAutoStreamCopy?: boolean;
                /**
                 * Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                framerate?: number | null;
                /**
                 * Optional. The fixed vertical resolution of the encoded video.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
                 */
                level?: string;
                /**
                 * Optional. Specify a maximum number of audio channels to encode to, e.g. 2
                 */
                maxAudioChannels?: number | null;
                /**
                 * Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                maxFramerate?: number | null;
                /**
                 * Optional. The maximum vertical resolution of the encoded video.
                 */
                maxHeight?: number | null;
                /**
                 * Optional.
                 */
                maxRefFrames?: number | null;
                /**
                 * Optional.
                 */
                maxVideoBitDepth?: number | null;
                /**
                 * Optional. The maximum horizontal resolution of the encoded video.
                 */
                maxWidth?: number | null;
                /**
                 * Optional. Specify a specific h264 profile, e.g. main, baseline, high.
                 */
                profile?: string;
                /**
                 * Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms
                 */
                startTimeTicks?: number | null;
                /**
                 * Optional. Specify the subtitle delivery method.
                 */
                subtitleMethod?: 'Encode' | 'Embed' | 'External' | 'Hls';
                /**
                 * Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
                 */
                subtitleStreamIndex?: number | null;
                /**
                 * Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
                 */
                videoBitRate?: number | null;
                /**
                 * Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.
                 */
                videoCodec?: string;
                /**
                 * Optional. The index of the video stream to use. If omitted the first video stream will be used.
                 */
                videoStreamIndex?: number | null;
                /**
                 * Optional. The fixed horizontal resolution of the encoded video.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
                 */
                _static?: boolean;
                /**
                 * Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
                 */
                audioBitRate?: number | null;
                /**
                 * Optional. Specify a specific number of audio channels to encode to, e.g. 2
                 */
                audioChannels?: number | null;
                /**
                 * Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
                 */
                audioCodec?: string;
                /**
                 * Optional. Specify a specific audio sample rate, e.g. 44100
                 */
                audioSampleRate?: number | null;
                /**
                 * Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
                 */
                audioStreamIndex?: number | null;
                /**
                 * Container
                 */
                container: string;
                /**
                 * Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
                 */
                copyTimestamps?: boolean;
                /**
                 * The device id of the client requesting. Used to stop encoding processes when needed.
                 */
                deviceId?: string;
                /**
                 * Optional. The dlna device profile id to utilize.
                 */
                deviceProfileId?: string;
                /**
                 * Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
                 */
                enableAutoStreamCopy?: boolean;
                /**
                 * Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                framerate?: number | null;
                /**
                 * Optional. The fixed vertical resolution of the encoded video.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
                 */
                level?: string;
                /**
                 * Optional. Specify a maximum number of audio channels to encode to, e.g. 2
                 */
                maxAudioChannels?: number | null;
                /**
                 * Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                maxFramerate?: number | null;
                /**
                 * Optional. The maximum vertical resolution of the encoded video.
                 */
                maxHeight?: number | null;
                /**
                 * Optional.
                 */
                maxRefFrames?: number | null;
                /**
                 * Optional.
                 */
                maxVideoBitDepth?: number | null;
                /**
                 * Optional. The maximum horizontal resolution of the encoded video.
                 */
                maxWidth?: number | null;
                /**
                 * Optional. Specify a specific h264 profile, e.g. main, baseline, high.
                 */
                profile?: string;
                /**
                 * Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms
                 */
                startTimeTicks?: number | null;
                /**
                 * Optional. Specify the subtitle delivery method.
                 */
                subtitleMethod?: 'Encode' | 'Embed' | 'External' | 'Hls';
                /**
                 * Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
                 */
                subtitleStreamIndex?: number | null;
                /**
                 * Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
                 */
                videoBitRate?: number | null;
                /**
                 * Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.
                 */
                videoCodec?: string;
                /**
                 * Optional. The index of the video stream to use. If omitted the first video stream will be used.
                 */
                videoStreamIndex?: number | null;
                /**
                 * Optional. The fixed horizontal resolution of the encoded video.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Videos/{Id}/main.m3u8': {
        get: {
            req: {
                /**
                 * Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
                 */
                _static?: boolean;
                /**
                 * Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
                 */
                audioBitRate?: number | null;
                /**
                 * Optional. Specify a specific number of audio channels to encode to, e.g. 2
                 */
                audioChannels?: number | null;
                /**
                 * Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
                 */
                audioCodec?: string;
                /**
                 * Optional. Specify a specific audio sample rate, e.g. 44100
                 */
                audioSampleRate?: number | null;
                /**
                 * Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
                 */
                audioStreamIndex?: number | null;
                /**
                 * Container
                 */
                container: string;
                /**
                 * Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
                 */
                copyTimestamps?: boolean;
                /**
                 * The device id of the client requesting. Used to stop encoding processes when needed.
                 */
                deviceId?: string;
                /**
                 * Optional. The dlna device profile id to utilize.
                 */
                deviceProfileId?: string;
                /**
                 * Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
                 */
                enableAutoStreamCopy?: boolean;
                /**
                 * Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                framerate?: number | null;
                /**
                 * Optional. The fixed vertical resolution of the encoded video.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
                 */
                level?: string;
                /**
                 * Optional. Specify a maximum number of audio channels to encode to, e.g. 2
                 */
                maxAudioChannels?: number | null;
                /**
                 * Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                maxFramerate?: number | null;
                /**
                 * Optional. The maximum vertical resolution of the encoded video.
                 */
                maxHeight?: number | null;
                /**
                 * Optional.
                 */
                maxRefFrames?: number | null;
                /**
                 * Optional.
                 */
                maxVideoBitDepth?: number | null;
                /**
                 * Optional. The maximum horizontal resolution of the encoded video.
                 */
                maxWidth?: number | null;
                /**
                 * Optional. Specify a specific h264 profile, e.g. main, baseline, high.
                 */
                profile?: string;
                /**
                 * Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms
                 */
                startTimeTicks?: number | null;
                /**
                 * Optional. Specify the subtitle delivery method.
                 */
                subtitleMethod?: 'Encode' | 'Embed' | 'External' | 'Hls';
                /**
                 * Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
                 */
                subtitleStreamIndex?: number | null;
                /**
                 * Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
                 */
                videoBitRate?: number | null;
                /**
                 * Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.
                 */
                videoCodec?: string;
                /**
                 * Optional. The index of the video stream to use. If omitted the first video stream will be used.
                 */
                videoStreamIndex?: number | null;
                /**
                 * Optional. The fixed horizontal resolution of the encoded video.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Videos/{Id}/subtitles.m3u8': {
        get: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * The subtitle segment format
                 */
                manifestSubtitles: string;
                /**
                 * The subtitle segment length
                 */
                subtitleSegmentLength: number;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Audio/{Id}/hls1/{PlaylistId}/{SegmentId}.{SegmentContainer}': {
        get: {
            req: {
                /**
                 * Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
                 */
                _static?: boolean;
                /**
                 * Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
                 */
                audioBitRate?: number | null;
                /**
                 * Optional. Specify a specific number of audio channels to encode to, e.g. 2
                 */
                audioChannels?: number | null;
                /**
                 * Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
                 */
                audioCodec?: string;
                /**
                 * Optional. Specify a specific audio sample rate, e.g. 44100
                 */
                audioSampleRate?: number | null;
                /**
                 * Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
                 */
                audioStreamIndex?: number | null;
                /**
                 * Container
                 */
                container: string;
                /**
                 * Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
                 */
                copyTimestamps?: boolean;
                /**
                 * The device id of the client requesting. Used to stop encoding processes when needed.
                 */
                deviceId?: string;
                /**
                 * Optional. The dlna device profile id to utilize.
                 */
                deviceProfileId?: string;
                /**
                 * Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
                 */
                enableAutoStreamCopy?: boolean;
                /**
                 * Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                framerate?: number | null;
                /**
                 * Optional. The fixed vertical resolution of the encoded video.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
                 */
                level?: string;
                /**
                 * Optional. Specify a maximum number of audio channels to encode to, e.g. 2
                 */
                maxAudioChannels?: number | null;
                /**
                 * Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                maxFramerate?: number | null;
                /**
                 * Optional. The maximum vertical resolution of the encoded video.
                 */
                maxHeight?: number | null;
                /**
                 * Optional.
                 */
                maxRefFrames?: number | null;
                /**
                 * Optional.
                 */
                maxVideoBitDepth?: number | null;
                /**
                 * Optional. The maximum horizontal resolution of the encoded video.
                 */
                maxWidth?: number | null;
                playlistId: string;
                /**
                 * Optional. Specify a specific h264 profile, e.g. main, baseline, high.
                 */
                profile?: string;
                /**
                 * SegmentContainer
                 */
                segmentContainer: string;
                segmentId: string;
                /**
                 * Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms
                 */
                startTimeTicks?: number | null;
                /**
                 * Optional. Specify the subtitle delivery method.
                 */
                subtitleMethod?: 'Encode' | 'Embed' | 'External' | 'Hls';
                /**
                 * Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
                 */
                subtitleStreamIndex?: number | null;
                /**
                 * Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
                 */
                videoBitRate?: number | null;
                /**
                 * Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.
                 */
                videoCodec?: string;
                /**
                 * Optional. The index of the video stream to use. If omitted the first video stream will be used.
                 */
                videoStreamIndex?: number | null;
                /**
                 * Optional. The fixed horizontal resolution of the encoded video.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
                 */
                _static?: boolean;
                /**
                 * Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
                 */
                audioBitRate?: number | null;
                /**
                 * Optional. Specify a specific number of audio channels to encode to, e.g. 2
                 */
                audioChannels?: number | null;
                /**
                 * Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
                 */
                audioCodec?: string;
                /**
                 * Optional. Specify a specific audio sample rate, e.g. 44100
                 */
                audioSampleRate?: number | null;
                /**
                 * Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
                 */
                audioStreamIndex?: number | null;
                /**
                 * Container
                 */
                container: string;
                /**
                 * Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
                 */
                copyTimestamps?: boolean;
                /**
                 * The device id of the client requesting. Used to stop encoding processes when needed.
                 */
                deviceId?: string;
                /**
                 * Optional. The dlna device profile id to utilize.
                 */
                deviceProfileId?: string;
                /**
                 * Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
                 */
                enableAutoStreamCopy?: boolean;
                /**
                 * Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                framerate?: number | null;
                /**
                 * Optional. The fixed vertical resolution of the encoded video.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
                 */
                level?: string;
                /**
                 * Optional. Specify a maximum number of audio channels to encode to, e.g. 2
                 */
                maxAudioChannels?: number | null;
                /**
                 * Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                maxFramerate?: number | null;
                /**
                 * Optional. The maximum vertical resolution of the encoded video.
                 */
                maxHeight?: number | null;
                /**
                 * Optional.
                 */
                maxRefFrames?: number | null;
                /**
                 * Optional.
                 */
                maxVideoBitDepth?: number | null;
                /**
                 * Optional. The maximum horizontal resolution of the encoded video.
                 */
                maxWidth?: number | null;
                playlistId: string;
                /**
                 * Optional. Specify a specific h264 profile, e.g. main, baseline, high.
                 */
                profile?: string;
                /**
                 * SegmentContainer
                 */
                segmentContainer: string;
                segmentId: string;
                /**
                 * Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms
                 */
                startTimeTicks?: number | null;
                /**
                 * Optional. Specify the subtitle delivery method.
                 */
                subtitleMethod?: 'Encode' | 'Embed' | 'External' | 'Hls';
                /**
                 * Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
                 */
                subtitleStreamIndex?: number | null;
                /**
                 * Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
                 */
                videoBitRate?: number | null;
                /**
                 * Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.
                 */
                videoCodec?: string;
                /**
                 * Optional. The index of the video stream to use. If omitted the first video stream will be used.
                 */
                videoStreamIndex?: number | null;
                /**
                 * Optional. The fixed horizontal resolution of the encoded video.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Videos/{Id}/hls1/{PlaylistId}/{SegmentId}.{SegmentContainer}': {
        get: {
            req: {
                /**
                 * Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
                 */
                _static?: boolean;
                /**
                 * Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
                 */
                audioBitRate?: number | null;
                /**
                 * Optional. Specify a specific number of audio channels to encode to, e.g. 2
                 */
                audioChannels?: number | null;
                /**
                 * Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
                 */
                audioCodec?: string;
                /**
                 * Optional. Specify a specific audio sample rate, e.g. 44100
                 */
                audioSampleRate?: number | null;
                /**
                 * Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
                 */
                audioStreamIndex?: number | null;
                /**
                 * Container
                 */
                container: string;
                /**
                 * Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
                 */
                copyTimestamps?: boolean;
                /**
                 * The device id of the client requesting. Used to stop encoding processes when needed.
                 */
                deviceId?: string;
                /**
                 * Optional. The dlna device profile id to utilize.
                 */
                deviceProfileId?: string;
                /**
                 * Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
                 */
                enableAutoStreamCopy?: boolean;
                /**
                 * Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                framerate?: number | null;
                /**
                 * Optional. The fixed vertical resolution of the encoded video.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
                 */
                level?: string;
                /**
                 * Optional. Specify a maximum number of audio channels to encode to, e.g. 2
                 */
                maxAudioChannels?: number | null;
                /**
                 * Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                maxFramerate?: number | null;
                /**
                 * Optional. The maximum vertical resolution of the encoded video.
                 */
                maxHeight?: number | null;
                /**
                 * Optional.
                 */
                maxRefFrames?: number | null;
                /**
                 * Optional.
                 */
                maxVideoBitDepth?: number | null;
                /**
                 * Optional. The maximum horizontal resolution of the encoded video.
                 */
                maxWidth?: number | null;
                playlistId: string;
                /**
                 * Optional. Specify a specific h264 profile, e.g. main, baseline, high.
                 */
                profile?: string;
                /**
                 * SegmentContainer
                 */
                segmentContainer: string;
                segmentId: string;
                /**
                 * Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms
                 */
                startTimeTicks?: number | null;
                /**
                 * Optional. Specify the subtitle delivery method.
                 */
                subtitleMethod?: 'Encode' | 'Embed' | 'External' | 'Hls';
                /**
                 * Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
                 */
                subtitleStreamIndex?: number | null;
                /**
                 * Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
                 */
                videoBitRate?: number | null;
                /**
                 * Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.
                 */
                videoCodec?: string;
                /**
                 * Optional. The index of the video stream to use. If omitted the first video stream will be used.
                 */
                videoStreamIndex?: number | null;
                /**
                 * Optional. The fixed horizontal resolution of the encoded video.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        head: {
            req: {
                /**
                 * Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
                 */
                _static?: boolean;
                /**
                 * Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
                 */
                audioBitRate?: number | null;
                /**
                 * Optional. Specify a specific number of audio channels to encode to, e.g. 2
                 */
                audioChannels?: number | null;
                /**
                 * Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
                 */
                audioCodec?: string;
                /**
                 * Optional. Specify a specific audio sample rate, e.g. 44100
                 */
                audioSampleRate?: number | null;
                /**
                 * Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
                 */
                audioStreamIndex?: number | null;
                /**
                 * Container
                 */
                container: string;
                /**
                 * Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
                 */
                copyTimestamps?: boolean;
                /**
                 * The device id of the client requesting. Used to stop encoding processes when needed.
                 */
                deviceId?: string;
                /**
                 * Optional. The dlna device profile id to utilize.
                 */
                deviceProfileId?: string;
                /**
                 * Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
                 */
                enableAutoStreamCopy?: boolean;
                /**
                 * Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                framerate?: number | null;
                /**
                 * Optional. The fixed vertical resolution of the encoded video.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
                 */
                level?: string;
                /**
                 * Optional. Specify a maximum number of audio channels to encode to, e.g. 2
                 */
                maxAudioChannels?: number | null;
                /**
                 * Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                maxFramerate?: number | null;
                /**
                 * Optional. The maximum vertical resolution of the encoded video.
                 */
                maxHeight?: number | null;
                /**
                 * Optional.
                 */
                maxRefFrames?: number | null;
                /**
                 * Optional.
                 */
                maxVideoBitDepth?: number | null;
                /**
                 * Optional. The maximum horizontal resolution of the encoded video.
                 */
                maxWidth?: number | null;
                playlistId: string;
                /**
                 * Optional. Specify a specific h264 profile, e.g. main, baseline, high.
                 */
                profile?: string;
                /**
                 * SegmentContainer
                 */
                segmentContainer: string;
                segmentId: string;
                /**
                 * Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms
                 */
                startTimeTicks?: number | null;
                /**
                 * Optional. Specify the subtitle delivery method.
                 */
                subtitleMethod?: 'Encode' | 'Embed' | 'External' | 'Hls';
                /**
                 * Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
                 */
                subtitleStreamIndex?: number | null;
                /**
                 * Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
                 */
                videoBitRate?: number | null;
                /**
                 * Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.
                 */
                videoCodec?: string;
                /**
                 * Optional. The index of the video stream to use. If omitted the first video stream will be used.
                 */
                videoStreamIndex?: number | null;
                /**
                 * Optional. The fixed horizontal resolution of the encoded video.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Dlna/{UuId}/description.xml': {
        get: {
            req: {
                /**
                 * Server UuId
                 */
                uuId: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Dlna/{UuId}/description': {
        get: {
            req: {
                /**
                 * Server UuId
                 */
                uuId: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Dlna/icons/{Filename}': {
        get: {
            req: {
                /**
                 * The icon filename
                 */
                filename: string;
                /**
                 * Server UuId
                 */
                uuId?: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Dlna/{UuId}/contentdirectory/contentdirectory.xml': {
        get: {
            req: {
                /**
                 * Server UuId
                 */
                uuId: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Dlna/{UuId}/contentdirectory/contentdirectory': {
        get: {
            req: {
                /**
                 * Server UuId
                 */
                uuId: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Dlna/{UuId}/connectionmanager/connectionmanager.xml': {
        get: {
            req: {
                /**
                 * Server UuId
                 */
                uuId: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Dlna/{UuId}/connectionmanager/connectionmanager': {
        get: {
            req: {
                /**
                 * Server UuId
                 */
                uuId: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Dlna/{UuId}/contentdirectory/control': {
        post: {
            req: {
                /**
                 * Binary stream
                 */
                requestBody: (Blob | File);
                /**
                 * Server UuId
                 */
                uuId: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Dlna/{UuId}/connectionmanager/control': {
        post: {
            req: {
                /**
                 * Binary stream
                 */
                requestBody: (Blob | File);
                /**
                 * Server UuId
                 */
                uuId: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Dlna/{UuId}/icons/{Filename}': {
        get: {
            req: {
                /**
                 * The icon filename
                 */
                filename: string;
                /**
                 * Server UuId
                 */
                uuId: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Encoding/CodecInformation/Video': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a VideoCodecBase[] object.
                 */
                200: Array<MediaEncoding_Codecs_VideoCodecs_VideoCodecBase>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Encoding/CodecConfiguration/Defaults': {
        get: {
            res: {
                /**
                 * Operation successful. Returning a CodecConfiguration[] object.
                 */
                200: Array<Configuration_CodecConfiguration>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{Id}/ExternalIdInfos': {
        get: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Returning a List<ExternalIdInfo> object.
                 */
                200: Array<ExternalIdInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/RemoteSearch/Trailer': {
        post: {
            req: {
                /**
                 * RemoteSearchQuery`1:
                 */
                requestBody: Providers_RemoteSearchQuery_Providers_TrailerInfo;
            };
            res: {
                /**
                 * Operation successful. Returning a List<RemoteSearchResult> object.
                 */
                200: Array<RemoteSearchResult>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/RemoteSearch/Book': {
        post: {
            req: {
                /**
                 * RemoteSearchQuery`1:
                 */
                requestBody: Providers_RemoteSearchQuery_Providers_BookInfo;
            };
            res: {
                /**
                 * Operation successful. Returning a List<RemoteSearchResult> object.
                 */
                200: Array<RemoteSearchResult>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/RemoteSearch/Movie': {
        post: {
            req: {
                /**
                 * RemoteSearchQuery`1:
                 */
                requestBody: Providers_RemoteSearchQuery_Providers_MovieInfo;
            };
            res: {
                /**
                 * Operation successful. Returning a List<RemoteSearchResult> object.
                 */
                200: Array<RemoteSearchResult>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/RemoteSearch/Series': {
        post: {
            req: {
                /**
                 * RemoteSearchQuery`1:
                 */
                requestBody: Providers_RemoteSearchQuery_Providers_SeriesInfo;
            };
            res: {
                /**
                 * Operation successful. Returning a List<RemoteSearchResult> object.
                 */
                200: Array<RemoteSearchResult>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/RemoteSearch/Game': {
        post: {
            req: {
                /**
                 * RemoteSearchQuery`1:
                 */
                requestBody: Providers_RemoteSearchQuery_Providers_GameInfo;
            };
            res: {
                /**
                 * Operation successful. Returning a List<RemoteSearchResult> object.
                 */
                200: Array<RemoteSearchResult>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/RemoteSearch/BoxSet': {
        post: {
            req: {
                /**
                 * RemoteSearchQuery`1:
                 */
                requestBody: Providers_RemoteSearchQuery_Providers_BoxSetInfo;
            };
            res: {
                /**
                 * Operation successful. Returning a List<RemoteSearchResult> object.
                 */
                200: Array<RemoteSearchResult>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/RemoteSearch/MusicVideo': {
        post: {
            req: {
                /**
                 * RemoteSearchQuery`1:
                 */
                requestBody: Providers_RemoteSearchQuery_Providers_MusicVideoInfo;
            };
            res: {
                /**
                 * Operation successful. Returning a List<RemoteSearchResult> object.
                 */
                200: Array<RemoteSearchResult>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/RemoteSearch/Person': {
        post: {
            req: {
                /**
                 * RemoteSearchQuery`1:
                 */
                requestBody: Providers_RemoteSearchQuery_Providers_PersonLookupInfo;
            };
            res: {
                /**
                 * Operation successful. Returning a List<RemoteSearchResult> object.
                 */
                200: Array<RemoteSearchResult>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/RemoteSearch/MusicAlbum': {
        post: {
            req: {
                /**
                 * RemoteSearchQuery`1:
                 */
                requestBody: Providers_RemoteSearchQuery_Providers_AlbumInfo;
            };
            res: {
                /**
                 * Operation successful. Returning a List<RemoteSearchResult> object.
                 */
                200: Array<RemoteSearchResult>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/RemoteSearch/MusicArtist': {
        post: {
            req: {
                /**
                 * RemoteSearchQuery`1:
                 */
                requestBody: Providers_RemoteSearchQuery_Providers_ArtistInfo;
            };
            res: {
                /**
                 * Operation successful. Returning a List<RemoteSearchResult> object.
                 */
                200: Array<RemoteSearchResult>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/RemoteSearch/Image': {
        get: {
            req: {
                /**
                 * The image url
                 */
                imageUrl: string;
                providerName: string;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/RemoteSearch/Apply/{Id}': {
        post: {
            req: {
                /**
                 * The item id
                 */
                id: string;
                /**
                 * Whether or not to replace all images
                 */
                replaceAllImages?: boolean;
                /**
                 * RemoteSearchResult:
                 */
                requestBody: RemoteSearchResult;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{Id}/Refresh': {
        post: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Specifies the image refresh mode
                 */
                imageRefreshMode?: 'Default' | 'FullRefresh';
                /**
                 * Specifies the metadata refresh mode
                 */
                metadataRefreshMode?: 'Default' | 'FullRefresh';
                /**
                 * Indicates if the refresh should occur recursively.
                 */
                recursive?: boolean;
                /**
                 * Determines if images should be replaced. Only applicable if mode is FullRefresh
                 */
                replaceAllImages?: boolean;
                /**
                 * Determines if metadata should be replaced. Only applicable if mode is FullRefresh
                 */
                replaceAllMetadata?: boolean;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{Id}/ThumbnailSet': {
        get: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                width: number;
            };
            res: {
                /**
                 * Operation successful. Returning a ThumbnailSetInfo object.
                 */
                200: RokuMetadata_Api_ThumbnailSetInfo;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Videos/{Id}/index.bif': {
        get: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                width: number;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/LiveTv/Programs/{Id}': {
        get: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Returning a BaseItemDto object.
                 */
                200: BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/{UserId}/Items/Latest': {
        get: {
            req: {
                /**
                 * Optional, include image information in output
                 */
                enableImages?: boolean | null;
                /**
                 * Optional. The image types to include in the output.
                 */
                enableImageTypes?: string;
                /**
                 * Optional, include user data
                 */
                enableUserData?: boolean | null;
                /**
                 * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, SortName, Studios, Taglines
                 */
                fields?: string;
                /**
                 * Whether or not to group items into a parent container.
                 */
                groupItems?: boolean;
                /**
                 * Optional, the max number of images to return, per image type
                 */
                imageTypeLimit?: number | null;
                /**
                 * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                 */
                includeItemTypes?: string;
                /**
                 * Filter by items that are folders, or not.
                 */
                isFolder?: boolean | null;
                /**
                 * Filter by items that are played, or not.
                 */
                isPlayed?: boolean | null;
                /**
                 * Limit
                 */
                limit?: number;
                /**
                 * Specify this to localize the search to a specific item or folder. Omit to use the root
                 */
                parentId?: string;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a BaseItemDto[] object.
                 */
                200: Array<BaseItemDto>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/{UserId}/Items/{Id}': {
        get: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a BaseItemDto object.
                 */
                200: BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/{UserId}/Items/Root': {
        get: {
            req: {
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a BaseItemDto object.
                 */
                200: BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/{UserId}/FavoriteItems/{Id}': {
        post: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a UserItemDataDto object.
                 */
                200: UserItemDataDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        delete: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a UserItemDataDto object.
                 */
                200: UserItemDataDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/{UserId}/Items/{Id}/SpecialFeatures': {
        get: {
            req: {
                /**
                 * Movie Id
                 */
                id: string;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a BaseItemDto[] object.
                 */
                200: Array<BaseItemDto>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/{UserId}/Items/{Id}/LocalTrailers': {
        get: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a BaseItemDto[] object.
                 */
                200: Array<BaseItemDto>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/{UserId}/Items/{Id}/Intros': {
        get: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/{UserId}/Items/{Id}/Rating': {
        delete: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a UserItemDataDto object.
                 */
                200: UserItemDataDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
        post: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Whether the user likes the item or not. true/false
                 */
                likes: boolean;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a UserItemDataDto object.
                 */
                200: UserItemDataDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/System/ActivityLog/Entries': {
        get: {
            req: {
                /**
                 * Optional. The maximum number of records to return
                 */
                limit?: number | null;
                /**
                 * Optional. The minimum date. Format = ISO
                 */
                minDate?: string;
                /**
                 * Optional. The record index to start at. All items with a lower index will be dropped from the results.
                 */
                startIndex?: number | null;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<ActivityLogEntry> object.
                 */
                200: QueryResult_ActivityLogEntry;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/{UserId}/Suggestions': {
        get: {
            req: {
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/{UserId}/Views': {
        get: {
            req: {
                /**
                 * Whether or not to include external views such as channels or live tv
                 */
                includeExternalContent: boolean | null;
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a QueryResult<BaseItemDto> object.
                 */
                200: QueryResult_BaseItemDto;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Users/{UserId}/GroupingOptions': {
        get: {
            req: {
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Returning a BaseItemDto[] object.
                 */
                200: Array<BaseItemDto>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Videos/{Id}/live.m3u8': {
        get: {
            req: {
                /**
                 * Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
                 */
                _static?: boolean;
                /**
                 * Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
                 */
                audioBitRate?: number | null;
                /**
                 * Optional. Specify a specific number of audio channels to encode to, e.g. 2
                 */
                audioChannels?: number | null;
                /**
                 * Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
                 */
                audioCodec?: string;
                /**
                 * Optional. Specify a specific audio sample rate, e.g. 44100
                 */
                audioSampleRate?: number | null;
                /**
                 * Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
                 */
                audioStreamIndex?: number | null;
                /**
                 * Container
                 */
                container: string;
                /**
                 * Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
                 */
                copyTimestamps?: boolean;
                /**
                 * The device id of the client requesting. Used to stop encoding processes when needed.
                 */
                deviceId?: string;
                /**
                 * Optional. The dlna device profile id to utilize.
                 */
                deviceProfileId?: string;
                /**
                 * Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
                 */
                enableAutoStreamCopy?: boolean;
                /**
                 * Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                framerate?: number | null;
                /**
                 * Optional. The fixed vertical resolution of the encoded video.
                 */
                height?: number | null;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
                 */
                level?: string;
                /**
                 * Optional. Specify a maximum number of audio channels to encode to, e.g. 2
                 */
                maxAudioChannels?: number | null;
                /**
                 * Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
                 */
                maxFramerate?: number | null;
                /**
                 * Optional. The maximum vertical resolution of the encoded video.
                 */
                maxHeight?: number | null;
                /**
                 * Optional.
                 */
                maxRefFrames?: number | null;
                /**
                 * Optional.
                 */
                maxVideoBitDepth?: number | null;
                /**
                 * Optional. The maximum horizontal resolution of the encoded video.
                 */
                maxWidth?: number | null;
                /**
                 * Optional. Specify a specific h264 profile, e.g. main, baseline, high.
                 */
                profile?: string;
                /**
                 * Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms
                 */
                startTimeTicks?: number | null;
                /**
                 * Optional. Specify the subtitle delivery method.
                 */
                subtitleMethod?: 'Encode' | 'Embed' | 'External' | 'Hls';
                /**
                 * Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
                 */
                subtitleStreamIndex?: number | null;
                /**
                 * Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
                 */
                videoBitRate?: number | null;
                /**
                 * Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.
                 */
                videoCodec?: string;
                /**
                 * Optional. The index of the video stream to use. If omitted the first video stream will be used.
                 */
                videoStreamIndex?: number | null;
                /**
                 * Optional. The fixed horizontal resolution of the encoded video.
                 */
                width?: number | null;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Notification/SMTP/Test/{UserID}': {
        post: {
            req: {
                /**
                 * User Id
                 */
                userId: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Providers/Subtitles/Subtitles/{Id}': {
        get: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Videos/{Id}/Subtitles/{Index}': {
        delete: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * The subtitle stream index
                 */
                index: number;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{Id}/RemoteSearch/Subtitles/{Language}': {
        get: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * IsForced
                 */
                isForced?: boolean | null;
                /**
                 * IsPerfectMatch
                 */
                isPerfectMatch?: boolean | null;
                /**
                 * Language
                 */
                language: string;
            };
            res: {
                /**
                 * Operation successful. Returning a RemoteSubtitleInfo[] object.
                 */
                200: Array<RemoteSubtitleInfo>;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Items/{Id}/RemoteSearch/Subtitles/{SubtitleId}': {
        post: {
            req: {
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * SubtitleId
                 */
                subtitleId: string;
            };
            res: {
                /**
                 * Operation successful. Empty response.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Unauthorized. Client needs to authenticate.
                 */
                401: unknown;
                /**
                 * Forbidden. No permission for the reqested operation.
                 */
                403: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Videos/{Id}/{MediaSourceId}/Subtitles/{Index}/Stream.{Format}': {
        get: {
            req: {
                /**
                 * CopyTimestamps
                 */
                copyTimestamps?: boolean;
                /**
                 * EndPositionTicks
                 */
                endPositionTicks?: number | null;
                /**
                 * Format
                 */
                format: string;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * The subtitle stream index
                 */
                index: number;
                /**
                 * MediaSourceId
                 */
                mediaSourceId: string;
                /**
                 * StartPositionTicks
                 */
                startPositionTicks?: number;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
    '/Videos/{Id}/{MediaSourceId}/Subtitles/{Index}/{StartPositionTicks}/Stream.{Format}': {
        get: {
            req: {
                /**
                 * CopyTimestamps
                 */
                copyTimestamps?: boolean;
                /**
                 * EndPositionTicks
                 */
                endPositionTicks?: number | null;
                /**
                 * Format
                 */
                format: string;
                /**
                 * Item Id
                 */
                id: string;
                /**
                 * The subtitle stream index
                 */
                index: number;
                /**
                 * MediaSourceId
                 */
                mediaSourceId: string;
                /**
                 * StartPositionTicks
                 */
                startPositionTicks: number;
            };
            res: {
                /**
                 * Operation successful. Response content unknown.
                 */
                200: unknown;
                /**
                 * Bad Request. Server cannot process request.
                 */
                400: unknown;
                /**
                 * Resource not found or unavailable.
                 */
                404: unknown;
            };
        };
    };
};