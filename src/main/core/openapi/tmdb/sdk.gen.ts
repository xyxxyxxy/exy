// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { AccountAddFavoriteData, AccountAddFavoriteResponses, AccountAddToWatchlistData, AccountAddToWatchlistResponses, AccountDetailsData, AccountDetailsResponses, AccountFavoriteTvData, AccountFavoriteTvResponses, AccountGetFavoritesData, AccountGetFavoritesResponses, AccountListsData, AccountListsResponses, AccountRatedMoviesData, AccountRatedMoviesResponses, AccountRatedTvData, AccountRatedTvEpisodesData, AccountRatedTvEpisodesResponses, AccountRatedTvResponses, AccountWatchlistMoviesData, AccountWatchlistMoviesResponses, AccountWatchlistTvData, AccountWatchlistTvResponses, AlternativeNamesCopyData, AlternativeNamesCopyResponses, AuthenticationCreateGuestSessionData, AuthenticationCreateGuestSessionResponses, AuthenticationCreateRequestTokenData, AuthenticationCreateRequestTokenResponses, AuthenticationCreateSessionData, AuthenticationCreateSessionFromLoginData, AuthenticationCreateSessionFromLoginResponses, AuthenticationCreateSessionFromV4TokenData, AuthenticationCreateSessionFromV4TokenResponses, AuthenticationCreateSessionResponses, AuthenticationDeleteSessionData, AuthenticationDeleteSessionResponses, AuthenticationValidateKeyData, AuthenticationValidateKeyErrors, AuthenticationValidateKeyResponses, CertificationMovieListData, CertificationMovieListResponses, CertificationsTvListData, CertificationsTvListResponses, ChangesMovieListData, ChangesMovieListResponses, ChangesPeopleListData, ChangesPeopleListResponses, ChangesTvListData, ChangesTvListResponses, CollectionDetailsData, CollectionDetailsResponses, CollectionImagesData, CollectionImagesResponses, CollectionTranslationsData, CollectionTranslationsResponses, CompanyAlternativeNamesData, CompanyAlternativeNamesResponses, CompanyDetailsData, CompanyDetailsResponses, CompanyImagesData, CompanyImagesResponses, ConfigurationCountriesData, ConfigurationCountriesResponses, ConfigurationDetailsData, ConfigurationDetailsResponses, ConfigurationJobsData, ConfigurationJobsResponses, ConfigurationLanguagesData, ConfigurationLanguagesResponses, ConfigurationPrimaryTranslationsData, ConfigurationPrimaryTranslationsResponses, ConfigurationTimezonesData, ConfigurationTimezonesResponses, CreditDetailsData, CreditDetailsResponses, DetailsCopyData, DetailsCopyResponses, DiscoverMovieData, DiscoverMovieResponses, DiscoverTvData, DiscoverTvResponses, FindByIdData, FindByIdResponses, GenreMovieListData, GenreMovieListResponses, GenreTvListData, GenreTvListResponses, GuestSessionRatedMoviesData, GuestSessionRatedMoviesResponses, GuestSessionRatedTvData, GuestSessionRatedTvEpisodesData, GuestSessionRatedTvEpisodesResponses, GuestSessionRatedTvResponses, KeywordDetailsData, KeywordDetailsResponses, KeywordMoviesData, KeywordMoviesResponses, ListAddMovieData, ListAddMovieResponses, ListCheckItemStatusData, ListCheckItemStatusResponses, ListClearData, ListClearResponses, ListCreateData, ListCreateResponses, ListDeleteData, ListDeleteResponses, ListDetailsData, ListDetailsResponses, ListRemoveMovieData, ListRemoveMovieResponses, ListsCopyData, ListsCopyResponses, MovieAccountStatesData, MovieAccountStatesResponses, MovieAddRatingData, MovieAddRatingResponses, MovieAlternativeTitlesData, MovieAlternativeTitlesResponses, MovieChangesData, MovieChangesResponses, MovieCreditsData, MovieCreditsResponses, MovieDeleteRatingData, MovieDeleteRatingResponses, MovieDetailsData, MovieDetailsResponses, MovieExternalIdsData, MovieExternalIdsResponses, MovieImagesData, MovieImagesResponses, MovieKeywordsData, MovieKeywordsResponses, MovieLatestIdData, MovieLatestIdResponses, MovieListsData, MovieListsResponses, MovieNowPlayingListData, MovieNowPlayingListResponses, MoviePopularListData, MoviePopularListResponses, MovieRecommendationsData, MovieRecommendationsResponses, MovieReleaseDatesData, MovieReleaseDatesResponses, MovieReviewsData, MovieReviewsResponses, MovieSimilarData, MovieSimilarResponses, MovieTopRatedListData, MovieTopRatedListResponses, MovieTranslationsData, MovieTranslationsResponses, MovieUpcomingListData, MovieUpcomingListResponses, MovieVideosData, MovieVideosResponses, MovieWatchProvidersData, MovieWatchProvidersResponses, NetworkDetailsData, NetworkDetailsResponses, PersonChangesData, PersonChangesResponses, PersonCombinedCreditsData, PersonCombinedCreditsResponses, PersonDetailsData, PersonDetailsResponses, PersonExternalIdsData, PersonExternalIdsResponses, PersonImagesData, PersonImagesResponses, PersonLatestIdData, PersonLatestIdResponses, PersonMovieCreditsData, PersonMovieCreditsResponses, PersonPopularListData, PersonPopularListResponses, PersonTaggedImagesData, PersonTaggedImagesResponses, PersonTvCreditsData, PersonTvCreditsResponses, ReviewDetailsData, ReviewDetailsResponses, SearchCollectionData, SearchCollectionResponses, SearchCompanyData, SearchCompanyResponses, SearchKeywordData, SearchKeywordResponses, SearchMovieData, SearchMovieResponses, SearchMultiData, SearchMultiResponses, SearchPersonData, SearchPersonResponses, SearchTvData, SearchTvResponses, TranslationsData, TranslationsResponses, TrendingAllData, TrendingAllResponses, TrendingMoviesData, TrendingMoviesResponses, TrendingPeopleData, TrendingPeopleResponses, TrendingTvData, TrendingTvResponses, TvEpisodeAccountStatesData, TvEpisodeAccountStatesResponses, TvEpisodeAddRatingData, TvEpisodeAddRatingResponses, TvEpisodeChangesByIdData, TvEpisodeChangesByIdResponses, TvEpisodeCreditsData, TvEpisodeCreditsResponses, TvEpisodeDeleteRatingData, TvEpisodeDeleteRatingResponses, TvEpisodeDetailsData, TvEpisodeDetailsResponses, TvEpisodeExternalIdsData, TvEpisodeExternalIdsResponses, TvEpisodeGroupDetailsData, TvEpisodeGroupDetailsResponses, TvEpisodeImagesData, TvEpisodeImagesResponses, TvEpisodeTranslationsData, TvEpisodeTranslationsResponses, TvEpisodeVideosData, TvEpisodeVideosResponses, TvSeasonAccountStatesData, TvSeasonAccountStatesResponses, TvSeasonAggregateCreditsData, TvSeasonAggregateCreditsResponses, TvSeasonChangesByIdData, TvSeasonChangesByIdResponses, TvSeasonCreditsData, TvSeasonCreditsResponses, TvSeasonDetailsData, TvSeasonDetailsResponses, TvSeasonExternalIdsData, TvSeasonExternalIdsResponses, TvSeasonImagesData, TvSeasonImagesResponses, TvSeasonTranslationsData, TvSeasonTranslationsResponses, TvSeasonVideosData, TvSeasonVideosResponses, TvSeasonWatchProvidersData, TvSeasonWatchProvidersResponses, TvSeriesAccountStatesData, TvSeriesAccountStatesResponses, TvSeriesAddRatingData, TvSeriesAddRatingResponses, TvSeriesAggregateCreditsData, TvSeriesAggregateCreditsResponses, TvSeriesAiringTodayListData, TvSeriesAiringTodayListResponses, TvSeriesAlternativeTitlesData, TvSeriesAlternativeTitlesResponses, TvSeriesChangesData, TvSeriesChangesResponses, TvSeriesContentRatingsData, TvSeriesContentRatingsResponses, TvSeriesCreditsData, TvSeriesCreditsResponses, TvSeriesDeleteRatingData, TvSeriesDeleteRatingResponses, TvSeriesDetailsData, TvSeriesDetailsResponses, TvSeriesEpisodeGroupsData, TvSeriesEpisodeGroupsResponses, TvSeriesExternalIdsData, TvSeriesExternalIdsResponses, TvSeriesImagesData, TvSeriesImagesResponses, TvSeriesKeywordsData, TvSeriesKeywordsResponses, TvSeriesLatestIdData, TvSeriesLatestIdResponses, TvSeriesOnTheAirListData, TvSeriesOnTheAirListResponses, TvSeriesPopularListData, TvSeriesPopularListResponses, TvSeriesRecommendationsData, TvSeriesRecommendationsResponses, TvSeriesReviewsData, TvSeriesReviewsResponses, TvSeriesScreenedTheatricallyData, TvSeriesScreenedTheatricallyResponses, TvSeriesSimilarData, TvSeriesSimilarResponses, TvSeriesTopRatedListData, TvSeriesTopRatedListResponses, TvSeriesTranslationsData, TvSeriesTranslationsResponses, TvSeriesVideosData, TvSeriesVideosResponses, TvSeriesWatchProvidersData, TvSeriesWatchProvidersResponses, WatchProvidersAvailableRegionsData, WatchProvidersAvailableRegionsResponses, WatchProvidersMovieListData, WatchProvidersMovieListResponses, WatchProviderTvListData, WatchProviderTvListResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Validate Key
 *
 * Test your API Key to see if it's valid.
 */
export const authenticationValidateKey = <ThrowOnError extends boolean = false>(options?: Options<AuthenticationValidateKeyData, ThrowOnError>) => {
    return (options?.client ?? client).get<AuthenticationValidateKeyResponses, AuthenticationValidateKeyErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/authentication',
        ...options
    });
};

/**
 * Details
 *
 * Get the public details of an account on TMDB.
 */
export const accountDetails = <ThrowOnError extends boolean = false>(options: Options<AccountDetailsData, ThrowOnError>) => {
    return (options.client ?? client).get<AccountDetailsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/account/{account_id}',
        ...options
    });
};

/**
 * Add Favorite
 *
 * Mark a movie or TV show as a favourite.
 */
export const accountAddFavorite = <ThrowOnError extends boolean = false>(options: Options<AccountAddFavoriteData, ThrowOnError>) => {
    return (options.client ?? client).post<AccountAddFavoriteResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/account/{account_id}/favorite',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add To Watchlist
 *
 * Add a movie or TV show to your watchlist.
 */
export const accountAddToWatchlist = <ThrowOnError extends boolean = false>(options: Options<AccountAddToWatchlistData, ThrowOnError>) => {
    return (options.client ?? client).post<AccountAddToWatchlistResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/account/{account_id}/watchlist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Favorite Movies
 *
 * Get a users list of favourite movies.
 */
export const accountGetFavorites = <ThrowOnError extends boolean = false>(options: Options<AccountGetFavoritesData, ThrowOnError>) => {
    return (options.client ?? client).get<AccountGetFavoritesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/account/{account_id}/favorite/movies',
        ...options
    });
};

/**
 * Favorite TV
 *
 * Get a users list of favourite TV shows.
 */
export const accountFavoriteTv = <ThrowOnError extends boolean = false>(options: Options<AccountFavoriteTvData, ThrowOnError>) => {
    return (options.client ?? client).get<AccountFavoriteTvResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/account/{account_id}/favorite/tv',
        ...options
    });
};

/**
 * Lists
 *
 * Get a users list of custom lists.
 */
export const accountLists = <ThrowOnError extends boolean = false>(options: Options<AccountListsData, ThrowOnError>) => {
    return (options.client ?? client).get<AccountListsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/account/{account_id}/lists',
        ...options
    });
};

/**
 * Rated Movies
 *
 * Get a users list of rated movies.
 */
export const accountRatedMovies = <ThrowOnError extends boolean = false>(options: Options<AccountRatedMoviesData, ThrowOnError>) => {
    return (options.client ?? client).get<AccountRatedMoviesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/account/{account_id}/rated/movies',
        ...options
    });
};

/**
 * Rated TV
 *
 * Get a users list of rated TV shows.
 */
export const accountRatedTv = <ThrowOnError extends boolean = false>(options: Options<AccountRatedTvData, ThrowOnError>) => {
    return (options.client ?? client).get<AccountRatedTvResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/account/{account_id}/rated/tv',
        ...options
    });
};

/**
 * Rated TV Episodes
 *
 * Get a users list of rated TV episodes.
 */
export const accountRatedTvEpisodes = <ThrowOnError extends boolean = false>(options: Options<AccountRatedTvEpisodesData, ThrowOnError>) => {
    return (options.client ?? client).get<AccountRatedTvEpisodesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/account/{account_id}/rated/tv/episodes',
        ...options
    });
};

/**
 * Watchlist Movies
 *
 * Get a list of movies added to a users watchlist.
 */
export const accountWatchlistMovies = <ThrowOnError extends boolean = false>(options: Options<AccountWatchlistMoviesData, ThrowOnError>) => {
    return (options.client ?? client).get<AccountWatchlistMoviesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/account/{account_id}/watchlist/movies',
        ...options
    });
};

/**
 * Watchlist TV
 *
 * Get a list of TV shows added to a users watchlist.
 */
export const accountWatchlistTv = <ThrowOnError extends boolean = false>(options: Options<AccountWatchlistTvData, ThrowOnError>) => {
    return (options.client ?? client).get<AccountWatchlistTvResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/account/{account_id}/watchlist/tv',
        ...options
    });
};

/**
 * Create Guest Session
 */
export const authenticationCreateGuestSession = <ThrowOnError extends boolean = false>(options?: Options<AuthenticationCreateGuestSessionData, ThrowOnError>) => {
    return (options?.client ?? client).get<AuthenticationCreateGuestSessionResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/authentication/guest_session/new',
        ...options
    });
};

/**
 * Create Request Token
 */
export const authenticationCreateRequestToken = <ThrowOnError extends boolean = false>(options?: Options<AuthenticationCreateRequestTokenData, ThrowOnError>) => {
    return (options?.client ?? client).get<AuthenticationCreateRequestTokenResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/authentication/token/new',
        ...options
    });
};

/**
 * Create Session
 */
export const authenticationCreateSession = <ThrowOnError extends boolean = false>(options?: Options<AuthenticationCreateSessionData, ThrowOnError>) => {
    return (options?.client ?? client).post<AuthenticationCreateSessionResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/authentication/session/new',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create Session (from v4 token)
 */
export const authenticationCreateSessionFromV4Token = <ThrowOnError extends boolean = false>(options?: Options<AuthenticationCreateSessionFromV4TokenData, ThrowOnError>) => {
    return (options?.client ?? client).post<AuthenticationCreateSessionFromV4TokenResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/authentication/session/convert/4',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create Session (with login)
 *
 * This method allows an application to validate a request token by entering a username and password.
 */
export const authenticationCreateSessionFromLogin = <ThrowOnError extends boolean = false>(options?: Options<AuthenticationCreateSessionFromLoginData, ThrowOnError>) => {
    return (options?.client ?? client).post<AuthenticationCreateSessionFromLoginResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/authentication/token/validate_with_login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Session
 */
export const authenticationDeleteSession = <ThrowOnError extends boolean = false>(options?: Options<AuthenticationDeleteSessionData, ThrowOnError>) => {
    return (options?.client ?? client).delete<AuthenticationDeleteSessionResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/authentication/session',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Movie Certifications
 *
 * Get an up to date list of the officially supported movie certifications on TMDB.
 */
export const certificationMovieList = <ThrowOnError extends boolean = false>(options?: Options<CertificationMovieListData, ThrowOnError>) => {
    return (options?.client ?? client).get<CertificationMovieListResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/certification/movie/list',
        ...options
    });
};

/**
 * TV Certifications
 */
export const certificationsTvList = <ThrowOnError extends boolean = false>(options?: Options<CertificationsTvListData, ThrowOnError>) => {
    return (options?.client ?? client).get<CertificationsTvListResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/certification/tv/list',
        ...options
    });
};

/**
 * Movie List
 *
 * Get a list of all of the movie ids that have been changed in the past 24 hours.
 */
export const changesMovieList = <ThrowOnError extends boolean = false>(options?: Options<ChangesMovieListData, ThrowOnError>) => {
    return (options?.client ?? client).get<ChangesMovieListResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/changes',
        ...options
    });
};

/**
 * People List
 */
export const changesPeopleList = <ThrowOnError extends boolean = false>(options?: Options<ChangesPeopleListData, ThrowOnError>) => {
    return (options?.client ?? client).get<ChangesPeopleListResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/person/changes',
        ...options
    });
};

/**
 * TV List
 */
export const changesTvList = <ThrowOnError extends boolean = false>(options?: Options<ChangesTvListData, ThrowOnError>) => {
    return (options?.client ?? client).get<ChangesTvListResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/changes',
        ...options
    });
};

/**
 * Details
 *
 * Get collection details by ID.
 */
export const collectionDetails = <ThrowOnError extends boolean = false>(options: Options<CollectionDetailsData, ThrowOnError>) => {
    return (options.client ?? client).get<CollectionDetailsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/collection/{collection_id}',
        ...options
    });
};

/**
 * Images
 *
 * Get the images that belong to a collection.
 */
export const collectionImages = <ThrowOnError extends boolean = false>(options: Options<CollectionImagesData, ThrowOnError>) => {
    return (options.client ?? client).get<CollectionImagesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/collection/{collection_id}/images',
        ...options
    });
};

/**
 * Translations
 */
export const collectionTranslations = <ThrowOnError extends boolean = false>(options: Options<CollectionTranslationsData, ThrowOnError>) => {
    return (options.client ?? client).get<CollectionTranslationsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/collection/{collection_id}/translations',
        ...options
    });
};

/**
 * Details
 *
 * Get the company details by ID.
 */
export const companyDetails = <ThrowOnError extends boolean = false>(options: Options<CompanyDetailsData, ThrowOnError>) => {
    return (options.client ?? client).get<CompanyDetailsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/company/{company_id}',
        ...options
    });
};

/**
 * Alternative Names
 *
 * Get the company details by ID.
 */
export const companyAlternativeNames = <ThrowOnError extends boolean = false>(options: Options<CompanyAlternativeNamesData, ThrowOnError>) => {
    return (options.client ?? client).get<CompanyAlternativeNamesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/company/{company_id}/alternative_names',
        ...options
    });
};

/**
 * Images
 *
 * Get the company logos by id.
 */
export const companyImages = <ThrowOnError extends boolean = false>(options: Options<CompanyImagesData, ThrowOnError>) => {
    return (options.client ?? client).get<CompanyImagesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/company/{company_id}/images',
        ...options
    });
};

/**
 * Details
 *
 * Query the API configuration details.
 */
export const configurationDetails = <ThrowOnError extends boolean = false>(options?: Options<ConfigurationDetailsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ConfigurationDetailsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/configuration',
        ...options
    });
};

/**
 * Countries
 *
 * Get the list of countries (ISO 3166-1 tags) used throughout TMDB.
 */
export const configurationCountries = <ThrowOnError extends boolean = false>(options?: Options<ConfigurationCountriesData, ThrowOnError>) => {
    return (options?.client ?? client).get<ConfigurationCountriesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/configuration/countries',
        ...options
    });
};

/**
 * Jobs
 *
 * Get the list of the jobs and departments we use on TMDB.
 */
export const configurationJobs = <ThrowOnError extends boolean = false>(options?: Options<ConfigurationJobsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ConfigurationJobsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/configuration/jobs',
        ...options
    });
};

/**
 * Languages
 *
 * Get the list of languages (ISO 639-1 tags) used throughout TMDB.
 */
export const configurationLanguages = <ThrowOnError extends boolean = false>(options?: Options<ConfigurationLanguagesData, ThrowOnError>) => {
    return (options?.client ?? client).get<ConfigurationLanguagesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/configuration/languages',
        ...options
    });
};

/**
 * Primary Translations
 *
 * Get a list of the officially supported translations on TMDB.
 */
export const configurationPrimaryTranslations = <ThrowOnError extends boolean = false>(options?: Options<ConfigurationPrimaryTranslationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ConfigurationPrimaryTranslationsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/configuration/primary_translations',
        ...options
    });
};

/**
 * Timezones
 *
 * Get the list of timezones used throughout TMDB.
 */
export const configurationTimezones = <ThrowOnError extends boolean = false>(options?: Options<ConfigurationTimezonesData, ThrowOnError>) => {
    return (options?.client ?? client).get<ConfigurationTimezonesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/configuration/timezones',
        ...options
    });
};

/**
 * Details
 *
 * Get a movie or TV credit details by ID.
 */
export const creditDetails = <ThrowOnError extends boolean = false>(options: Options<CreditDetailsData, ThrowOnError>) => {
    return (options.client ?? client).get<CreditDetailsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/credit/{credit_id}',
        ...options
    });
};

/**
 * Movie
 *
 * Find movies using over 30 filters and sort options.
 */
export const discoverMovie = <ThrowOnError extends boolean = false>(options?: Options<DiscoverMovieData, ThrowOnError>) => {
    return (options?.client ?? client).get<DiscoverMovieResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/discover/movie',
        ...options
    });
};

/**
 * TV
 *
 * Find TV shows using over 30 filters and sort options.
 */
export const discoverTv = <ThrowOnError extends boolean = false>(options?: Options<DiscoverTvData, ThrowOnError>) => {
    return (options?.client ?? client).get<DiscoverTvResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/discover/tv',
        ...options
    });
};

/**
 * Find By ID
 *
 * Find data by external ID's.
 */
export const findById = <ThrowOnError extends boolean = false>(options: Options<FindByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<FindByIdResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/find/{external_id}',
        ...options
    });
};

/**
 * Movie List
 *
 * Get the list of official genres for movies.
 */
export const genreMovieList = <ThrowOnError extends boolean = false>(options?: Options<GenreMovieListData, ThrowOnError>) => {
    return (options?.client ?? client).get<GenreMovieListResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/genre/movie/list',
        ...options
    });
};

/**
 * TV List
 *
 * Get the list of official genres for TV shows.
 */
export const genreTvList = <ThrowOnError extends boolean = false>(options?: Options<GenreTvListData, ThrowOnError>) => {
    return (options?.client ?? client).get<GenreTvListResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/genre/tv/list',
        ...options
    });
};

/**
 * Rated Movies
 *
 * Get the rated movies for a guest session.
 */
export const guestSessionRatedMovies = <ThrowOnError extends boolean = false>(options: Options<GuestSessionRatedMoviesData, ThrowOnError>) => {
    return (options.client ?? client).get<GuestSessionRatedMoviesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/guest_session/{guest_session_id}/rated/movies',
        ...options
    });
};

/**
 * Rated TV
 *
 * Get the rated TV shows for a guest session.
 */
export const guestSessionRatedTv = <ThrowOnError extends boolean = false>(options: Options<GuestSessionRatedTvData, ThrowOnError>) => {
    return (options.client ?? client).get<GuestSessionRatedTvResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/guest_session/{guest_session_id}/rated/tv',
        ...options
    });
};

/**
 * Rated TV Episodes
 *
 * Get the rated TV episodes for a guest session.
 */
export const guestSessionRatedTvEpisodes = <ThrowOnError extends boolean = false>(options: Options<GuestSessionRatedTvEpisodesData, ThrowOnError>) => {
    return (options.client ?? client).get<GuestSessionRatedTvEpisodesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/guest_session/{guest_session_id}/rated/tv/episodes',
        ...options
    });
};

/**
 * Details
 */
export const keywordDetails = <ThrowOnError extends boolean = false>(options: Options<KeywordDetailsData, ThrowOnError>) => {
    return (options.client ?? client).get<KeywordDetailsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/keyword/{keyword_id}',
        ...options
    });
};

/**
 * Movies
 */
export const keywordMovies = <ThrowOnError extends boolean = false>(options: Options<KeywordMoviesData, ThrowOnError>) => {
    return (options.client ?? client).get<KeywordMoviesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/keyword/{keyword_id}/movies',
        ...options
    });
};

/**
 * Add Movie
 *
 * Add a movie to a list.
 */
export const listAddMovie = <ThrowOnError extends boolean = false>(options: Options<ListAddMovieData, ThrowOnError>) => {
    return (options.client ?? client).post<ListAddMovieResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/list/{list_id}/add_item',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Check Item Status
 *
 * Use this method to check if an item has already been added to the list.
 */
export const listCheckItemStatus = <ThrowOnError extends boolean = false>(options: Options<ListCheckItemStatusData, ThrowOnError>) => {
    return (options.client ?? client).get<ListCheckItemStatusResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/list/{list_id}/item_status',
        ...options
    });
};

/**
 * Clear
 *
 * Clear all items from a list.
 */
export const listClear = <ThrowOnError extends boolean = false>(options: Options<ListClearData, ThrowOnError>) => {
    return (options.client ?? client).post<ListClearResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/list/{list_id}/clear',
        ...options
    });
};

/**
 * Create
 */
export const listCreate = <ThrowOnError extends boolean = false>(options: Options<ListCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<ListCreateResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/list',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete
 *
 * Delete a list.
 */
export const listDelete = <ThrowOnError extends boolean = false>(options: Options<ListDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<ListDeleteResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/list/{list_id}',
        ...options
    });
};

/**
 * Details
 */
export const listDetails = <ThrowOnError extends boolean = false>(options: Options<ListDetailsData, ThrowOnError>) => {
    return (options.client ?? client).get<ListDetailsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/list/{list_id}',
        ...options
    });
};

/**
 * Remove Movie
 *
 * Remove a movie from a list.
 */
export const listRemoveMovie = <ThrowOnError extends boolean = false>(options: Options<ListRemoveMovieData, ThrowOnError>) => {
    return (options.client ?? client).post<ListRemoveMovieResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/list/{list_id}/remove_item',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Now Playing
 *
 * Get a list of movies that are currently in theatres.
 */
export const movieNowPlayingList = <ThrowOnError extends boolean = false>(options?: Options<MovieNowPlayingListData, ThrowOnError>) => {
    return (options?.client ?? client).get<MovieNowPlayingListResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/now_playing',
        ...options
    });
};

/**
 * Popular
 *
 * Get a list of movies ordered by popularity.
 */
export const moviePopularList = <ThrowOnError extends boolean = false>(options?: Options<MoviePopularListData, ThrowOnError>) => {
    return (options?.client ?? client).get<MoviePopularListResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/popular',
        ...options
    });
};

/**
 * Top Rated
 *
 * Get a list of movies ordered by rating.
 */
export const movieTopRatedList = <ThrowOnError extends boolean = false>(options?: Options<MovieTopRatedListData, ThrowOnError>) => {
    return (options?.client ?? client).get<MovieTopRatedListResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/top_rated',
        ...options
    });
};

/**
 * Upcoming
 *
 * Get a list of movies that are being released soon.
 */
export const movieUpcomingList = <ThrowOnError extends boolean = false>(options?: Options<MovieUpcomingListData, ThrowOnError>) => {
    return (options?.client ?? client).get<MovieUpcomingListResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/upcoming',
        ...options
    });
};

/**
 * Details
 *
 * Get the top level details of a movie by ID.
 */
export const movieDetails = <ThrowOnError extends boolean = false>(options: Options<MovieDetailsData, ThrowOnError>) => {
    return (options.client ?? client).get<MovieDetailsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}',
        ...options
    });
};

/**
 * Account States
 *
 * Get the rating, watchlist and favourite status of an account.
 */
export const movieAccountStates = <ThrowOnError extends boolean = false>(options: Options<MovieAccountStatesData, ThrowOnError>) => {
    return (options.client ?? client).get<MovieAccountStatesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/account_states',
        ...options
    });
};

/**
 * Alternative Titles
 *
 * Get the alternative titles for a movie.
 */
export const movieAlternativeTitles = <ThrowOnError extends boolean = false>(options: Options<MovieAlternativeTitlesData, ThrowOnError>) => {
    return (options.client ?? client).get<MovieAlternativeTitlesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/alternative_titles',
        ...options
    });
};

/**
 * Changes
 *
 * Get the recent changes for a movie.
 */
export const movieChanges = <ThrowOnError extends boolean = false>(options: Options<MovieChangesData, ThrowOnError>) => {
    return (options.client ?? client).get<MovieChangesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/changes',
        ...options
    });
};

/**
 * Credits
 */
export const movieCredits = <ThrowOnError extends boolean = false>(options: Options<MovieCreditsData, ThrowOnError>) => {
    return (options.client ?? client).get<MovieCreditsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/credits',
        ...options
    });
};

/**
 * External IDs
 */
export const movieExternalIds = <ThrowOnError extends boolean = false>(options: Options<MovieExternalIdsData, ThrowOnError>) => {
    return (options.client ?? client).get<MovieExternalIdsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/external_ids',
        ...options
    });
};

/**
 * Images
 *
 * Get the images that belong to a movie.
 */
export const movieImages = <ThrowOnError extends boolean = false>(options: Options<MovieImagesData, ThrowOnError>) => {
    return (options.client ?? client).get<MovieImagesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/images',
        ...options
    });
};

/**
 * Keywords
 */
export const movieKeywords = <ThrowOnError extends boolean = false>(options: Options<MovieKeywordsData, ThrowOnError>) => {
    return (options.client ?? client).get<MovieKeywordsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/keywords',
        ...options
    });
};

/**
 * Latest
 *
 * Get the newest movie ID.
 */
export const movieLatestId = <ThrowOnError extends boolean = false>(options?: Options<MovieLatestIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<MovieLatestIdResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/latest',
        ...options
    });
};

/**
 * Lists
 *
 * Get the lists that a movie has been added to.
 */
export const movieLists = <ThrowOnError extends boolean = false>(options: Options<MovieListsData, ThrowOnError>) => {
    return (options.client ?? client).get<MovieListsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/lists',
        ...options
    });
};

/**
 * Recommendations
 */
export const movieRecommendations = <ThrowOnError extends boolean = false>(options: Options<MovieRecommendationsData, ThrowOnError>) => {
    return (options.client ?? client).get<MovieRecommendationsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/recommendations',
        ...options
    });
};

/**
 * Release Dates
 *
 * Get the release dates and certifications for a movie.
 */
export const movieReleaseDates = <ThrowOnError extends boolean = false>(options: Options<MovieReleaseDatesData, ThrowOnError>) => {
    return (options.client ?? client).get<MovieReleaseDatesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/release_dates',
        ...options
    });
};

/**
 * Reviews
 *
 * Get the user reviews for a movie.
 */
export const movieReviews = <ThrowOnError extends boolean = false>(options: Options<MovieReviewsData, ThrowOnError>) => {
    return (options.client ?? client).get<MovieReviewsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/reviews',
        ...options
    });
};

/**
 * Similar
 *
 * Get the similar movies based on genres and keywords.
 */
export const movieSimilar = <ThrowOnError extends boolean = false>(options: Options<MovieSimilarData, ThrowOnError>) => {
    return (options.client ?? client).get<MovieSimilarResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/similar',
        ...options
    });
};

/**
 * Translations
 *
 * Get the translations for a movie.
 */
export const movieTranslations = <ThrowOnError extends boolean = false>(options: Options<MovieTranslationsData, ThrowOnError>) => {
    return (options.client ?? client).get<MovieTranslationsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/translations',
        ...options
    });
};

/**
 * Videos
 */
export const movieVideos = <ThrowOnError extends boolean = false>(options: Options<MovieVideosData, ThrowOnError>) => {
    return (options.client ?? client).get<MovieVideosResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/videos',
        ...options
    });
};

/**
 * Watch Providers
 *
 * Get the list of streaming providers we have for a movie.
 */
export const movieWatchProviders = <ThrowOnError extends boolean = false>(options: Options<MovieWatchProvidersData, ThrowOnError>) => {
    return (options.client ?? client).get<MovieWatchProvidersResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/watch/providers',
        ...options
    });
};

/**
 * Delete Rating
 *
 * Delete a user rating.
 */
export const movieDeleteRating = <ThrowOnError extends boolean = false>(options: Options<MovieDeleteRatingData, ThrowOnError>) => {
    return (options.client ?? client).delete<MovieDeleteRatingResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/rating',
        ...options
    });
};

/**
 * Add Rating
 *
 * Rate a movie and save it to your rated list.
 */
export const movieAddRating = <ThrowOnError extends boolean = false>(options: Options<MovieAddRatingData, ThrowOnError>) => {
    return (options.client ?? client).post<MovieAddRatingResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/movie/{movie_id}/rating',
        ...options
    });
};

/**
 * Details
 */
export const networkDetails = <ThrowOnError extends boolean = false>(options: Options<NetworkDetailsData, ThrowOnError>) => {
    return (options.client ?? client).get<NetworkDetailsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/network/{network_id}',
        ...options
    });
};

/**
 * Alternative Names
 *
 * Get the alternative names of a network.
 */
export const detailsCopy = <ThrowOnError extends boolean = false>(options: Options<DetailsCopyData, ThrowOnError>) => {
    return (options.client ?? client).get<DetailsCopyResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/network/{network_id}/alternative_names',
        ...options
    });
};

/**
 * Images
 *
 * Get the TV network logos by id.
 */
export const alternativeNamesCopy = <ThrowOnError extends boolean = false>(options: Options<AlternativeNamesCopyData, ThrowOnError>) => {
    return (options.client ?? client).get<AlternativeNamesCopyResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/network/{network_id}/images',
        ...options
    });
};

/**
 * Popular
 *
 * Get a list of people ordered by popularity.
 */
export const personPopularList = <ThrowOnError extends boolean = false>(options?: Options<PersonPopularListData, ThrowOnError>) => {
    return (options?.client ?? client).get<PersonPopularListResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/person/popular',
        ...options
    });
};

/**
 * Details
 *
 * Query the top level details of a person.
 */
export const personDetails = <ThrowOnError extends boolean = false>(options: Options<PersonDetailsData, ThrowOnError>) => {
    return (options.client ?? client).get<PersonDetailsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/person/{person_id}',
        ...options
    });
};

/**
 * Changes
 *
 * Get the recent changes for a person.
 */
export const personChanges = <ThrowOnError extends boolean = false>(options: Options<PersonChangesData, ThrowOnError>) => {
    return (options.client ?? client).get<PersonChangesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/person/{person_id}/changes',
        ...options
    });
};

/**
 * Combined Credits
 *
 * Get the combined movie and TV credits that belong to a person.
 */
export const personCombinedCredits = <ThrowOnError extends boolean = false>(options: Options<PersonCombinedCreditsData, ThrowOnError>) => {
    return (options.client ?? client).get<PersonCombinedCreditsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/person/{person_id}/combined_credits',
        ...options
    });
};

/**
 * External IDs
 *
 * Get the external ID's that belong to a person.
 */
export const personExternalIds = <ThrowOnError extends boolean = false>(options: Options<PersonExternalIdsData, ThrowOnError>) => {
    return (options.client ?? client).get<PersonExternalIdsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/person/{person_id}/external_ids',
        ...options
    });
};

/**
 * Images
 *
 * Get the profile images that belong to a person.
 */
export const personImages = <ThrowOnError extends boolean = false>(options: Options<PersonImagesData, ThrowOnError>) => {
    return (options.client ?? client).get<PersonImagesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/person/{person_id}/images',
        ...options
    });
};

/**
 * Latest
 *
 * Get the newest created person. This is a live response and will continuously change.
 */
export const personLatestId = <ThrowOnError extends boolean = false>(options?: Options<PersonLatestIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<PersonLatestIdResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/person/latest',
        ...options
    });
};

/**
 * Movie Credits
 *
 * Get the movie credits for a person.
 */
export const personMovieCredits = <ThrowOnError extends boolean = false>(options: Options<PersonMovieCreditsData, ThrowOnError>) => {
    return (options.client ?? client).get<PersonMovieCreditsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/person/{person_id}/movie_credits',
        ...options
    });
};

/**
 * TV Credits
 *
 * Get the TV credits that belong to a person.
 */
export const personTvCredits = <ThrowOnError extends boolean = false>(options: Options<PersonTvCreditsData, ThrowOnError>) => {
    return (options.client ?? client).get<PersonTvCreditsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/person/{person_id}/tv_credits',
        ...options
    });
};

/**
 * Tagged Images
 *
 * Get the tagged images for a person.
 */
export const personTaggedImages = <ThrowOnError extends boolean = false>(options: Options<PersonTaggedImagesData, ThrowOnError>) => {
    return (options.client ?? client).get<PersonTaggedImagesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/person/{person_id}/tagged_images',
        ...options
    });
};

/**
 * Translations
 *
 * Get the translations that belong to a person.
 */
export const translations = <ThrowOnError extends boolean = false>(options: Options<TranslationsData, ThrowOnError>) => {
    return (options.client ?? client).get<TranslationsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/person/{person_id}/translations',
        ...options
    });
};

/**
 * Details
 *
 * Retrieve the details of a movie or TV show review.
 */
export const reviewDetails = <ThrowOnError extends boolean = false>(options: Options<ReviewDetailsData, ThrowOnError>) => {
    return (options.client ?? client).get<ReviewDetailsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/review/{review_id}',
        ...options
    });
};

/**
 * Collection
 *
 * Search for collections by their original, translated and alternative names.
 */
export const searchCollection = <ThrowOnError extends boolean = false>(options: Options<SearchCollectionData, ThrowOnError>) => {
    return (options.client ?? client).get<SearchCollectionResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/search/collection',
        ...options
    });
};

/**
 * Company
 *
 * Search for companies by their original and alternative names.
 */
export const searchCompany = <ThrowOnError extends boolean = false>(options: Options<SearchCompanyData, ThrowOnError>) => {
    return (options.client ?? client).get<SearchCompanyResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/search/company',
        ...options
    });
};

/**
 * Keyword
 *
 * Search for keywords by their name.
 */
export const searchKeyword = <ThrowOnError extends boolean = false>(options: Options<SearchKeywordData, ThrowOnError>) => {
    return (options.client ?? client).get<SearchKeywordResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/search/keyword',
        ...options
    });
};

/**
 * Movie
 *
 * Search for movies by their original, translated and alternative titles.
 */
export const searchMovie = <ThrowOnError extends boolean = false>(options: Options<SearchMovieData, ThrowOnError>) => {
    return (options.client ?? client).get<SearchMovieResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/search/movie',
        ...options
    });
};

/**
 * Multi
 *
 * Use multi search when you want to search for movies, TV shows and people in a single request.
 */
export const searchMulti = <ThrowOnError extends boolean = false>(options: Options<SearchMultiData, ThrowOnError>) => {
    return (options.client ?? client).get<SearchMultiResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/search/multi',
        ...options
    });
};

/**
 * Person
 *
 * Search for people by their name and also known as names.
 */
export const searchPerson = <ThrowOnError extends boolean = false>(options: Options<SearchPersonData, ThrowOnError>) => {
    return (options.client ?? client).get<SearchPersonResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/search/person',
        ...options
    });
};

/**
 * TV
 *
 * Search for TV shows by their original, translated and also known as names.
 */
export const searchTv = <ThrowOnError extends boolean = false>(options: Options<SearchTvData, ThrowOnError>) => {
    return (options.client ?? client).get<SearchTvResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/search/tv',
        ...options
    });
};

/**
 * All
 *
 * Get the trending movies, TV shows and people.
 */
export const trendingAll = <ThrowOnError extends boolean = false>(options: Options<TrendingAllData, ThrowOnError>) => {
    return (options.client ?? client).get<TrendingAllResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/trending/all/{time_window}',
        ...options
    });
};

/**
 * Movies
 *
 * Get the trending movies on TMDB.
 */
export const trendingMovies = <ThrowOnError extends boolean = false>(options: Options<TrendingMoviesData, ThrowOnError>) => {
    return (options.client ?? client).get<TrendingMoviesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/trending/movie/{time_window}',
        ...options
    });
};

/**
 * People
 *
 * Get the trending people on TMDB.
 */
export const trendingPeople = <ThrowOnError extends boolean = false>(options: Options<TrendingPeopleData, ThrowOnError>) => {
    return (options.client ?? client).get<TrendingPeopleResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/trending/person/{time_window}',
        ...options
    });
};

/**
 * TV
 *
 * Get the trending TV shows on TMDB.
 */
export const trendingTv = <ThrowOnError extends boolean = false>(options: Options<TrendingTvData, ThrowOnError>) => {
    return (options.client ?? client).get<TrendingTvResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/trending/tv/{time_window}',
        ...options
    });
};

/**
 * Airing Today
 *
 * Get a list of TV shows airing today.
 */
export const tvSeriesAiringTodayList = <ThrowOnError extends boolean = false>(options?: Options<TvSeriesAiringTodayListData, ThrowOnError>) => {
    return (options?.client ?? client).get<TvSeriesAiringTodayListResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/airing_today',
        ...options
    });
};

/**
 * On The Air
 *
 * Get a list of TV shows that air in the next 7 days.
 */
export const tvSeriesOnTheAirList = <ThrowOnError extends boolean = false>(options?: Options<TvSeriesOnTheAirListData, ThrowOnError>) => {
    return (options?.client ?? client).get<TvSeriesOnTheAirListResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/on_the_air',
        ...options
    });
};

/**
 * Popular
 *
 * Get a list of TV shows ordered by popularity.
 */
export const tvSeriesPopularList = <ThrowOnError extends boolean = false>(options?: Options<TvSeriesPopularListData, ThrowOnError>) => {
    return (options?.client ?? client).get<TvSeriesPopularListResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/popular',
        ...options
    });
};

/**
 * Top Rated
 *
 * Get a list of TV shows ordered by rating.
 */
export const tvSeriesTopRatedList = <ThrowOnError extends boolean = false>(options?: Options<TvSeriesTopRatedListData, ThrowOnError>) => {
    return (options?.client ?? client).get<TvSeriesTopRatedListResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/top_rated',
        ...options
    });
};

/**
 * Details
 *
 * Get the details of a TV show.
 */
export const tvSeriesDetails = <ThrowOnError extends boolean = false>(options: Options<TvSeriesDetailsData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeriesDetailsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}',
        ...options
    });
};

/**
 * Account States
 *
 * Get the rating, watchlist and favourite status.
 */
export const tvSeriesAccountStates = <ThrowOnError extends boolean = false>(options: Options<TvSeriesAccountStatesData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeriesAccountStatesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/account_states',
        ...options
    });
};

/**
 * Aggregate Credits
 *
 * Get the aggregate credits (cast and crew) that have been added to a TV show.
 */
export const tvSeriesAggregateCredits = <ThrowOnError extends boolean = false>(options: Options<TvSeriesAggregateCreditsData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeriesAggregateCreditsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/aggregate_credits',
        ...options
    });
};

/**
 * Alternative Titles
 *
 * Get the alternative titles that have been added to a TV show.
 */
export const tvSeriesAlternativeTitles = <ThrowOnError extends boolean = false>(options: Options<TvSeriesAlternativeTitlesData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeriesAlternativeTitlesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/alternative_titles',
        ...options
    });
};

/**
 * Changes
 *
 * Get the recent changes for a TV show.
 */
export const tvSeriesChanges = <ThrowOnError extends boolean = false>(options: Options<TvSeriesChangesData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeriesChangesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/changes',
        ...options
    });
};

/**
 * Content Ratings
 *
 * Get the content ratings that have been added to a TV show.
 */
export const tvSeriesContentRatings = <ThrowOnError extends boolean = false>(options: Options<TvSeriesContentRatingsData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeriesContentRatingsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/content_ratings',
        ...options
    });
};

/**
 * Credits
 *
 * Get the latest season credits of a TV show.
 */
export const tvSeriesCredits = <ThrowOnError extends boolean = false>(options: Options<TvSeriesCreditsData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeriesCreditsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/credits',
        ...options
    });
};

/**
 * Episode Groups
 *
 * Get the episode groups that have been added to a TV show.
 */
export const tvSeriesEpisodeGroups = <ThrowOnError extends boolean = false>(options: Options<TvSeriesEpisodeGroupsData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeriesEpisodeGroupsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/episode_groups',
        ...options
    });
};

/**
 * External IDs
 *
 * Get a list of external IDs that have been added to a TV show.
 */
export const tvSeriesExternalIds = <ThrowOnError extends boolean = false>(options: Options<TvSeriesExternalIdsData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeriesExternalIdsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/external_ids',
        ...options
    });
};

/**
 * Images
 *
 * Get the images that belong to a TV series.
 */
export const tvSeriesImages = <ThrowOnError extends boolean = false>(options: Options<TvSeriesImagesData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeriesImagesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/images',
        ...options
    });
};

/**
 * Keywords
 *
 * Get a list of keywords that have been added to a TV show.
 */
export const tvSeriesKeywords = <ThrowOnError extends boolean = false>(options: Options<TvSeriesKeywordsData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeriesKeywordsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/keywords',
        ...options
    });
};

/**
 * Latest
 *
 * Get the newest TV show ID.
 */
export const tvSeriesLatestId = <ThrowOnError extends boolean = false>(options?: Options<TvSeriesLatestIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<TvSeriesLatestIdResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/latest',
        ...options
    });
};

/**
 * Lists
 *
 * Get the lists that a TV series has been added to.
 */
export const listsCopy = <ThrowOnError extends boolean = false>(options: Options<ListsCopyData, ThrowOnError>) => {
    return (options.client ?? client).get<ListsCopyResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/lists',
        ...options
    });
};

/**
 * Recommendations
 */
export const tvSeriesRecommendations = <ThrowOnError extends boolean = false>(options: Options<TvSeriesRecommendationsData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeriesRecommendationsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/recommendations',
        ...options
    });
};

/**
 * Reviews
 *
 * Get the reviews that have been added to a TV show.
 */
export const tvSeriesReviews = <ThrowOnError extends boolean = false>(options: Options<TvSeriesReviewsData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeriesReviewsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/reviews',
        ...options
    });
};

/**
 * Screened Theatrically
 *
 * Get the seasons and episodes that have screened theatrically.
 */
export const tvSeriesScreenedTheatrically = <ThrowOnError extends boolean = false>(options: Options<TvSeriesScreenedTheatricallyData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeriesScreenedTheatricallyResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/screened_theatrically',
        ...options
    });
};

/**
 * Similar
 *
 * Get the similar TV shows.
 */
export const tvSeriesSimilar = <ThrowOnError extends boolean = false>(options: Options<TvSeriesSimilarData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeriesSimilarResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/similar',
        ...options
    });
};

/**
 * Translations
 *
 * Get the translations that have been added to a TV show.
 */
export const tvSeriesTranslations = <ThrowOnError extends boolean = false>(options: Options<TvSeriesTranslationsData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeriesTranslationsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/translations',
        ...options
    });
};

/**
 * Videos
 *
 * Get the videos that belong to a TV show.
 */
export const tvSeriesVideos = <ThrowOnError extends boolean = false>(options: Options<TvSeriesVideosData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeriesVideosResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/videos',
        ...options
    });
};

/**
 * Watch Providers
 *
 * Get the list of streaming providers we have for a TV show.
 */
export const tvSeriesWatchProviders = <ThrowOnError extends boolean = false>(options: Options<TvSeriesWatchProvidersData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeriesWatchProvidersResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/watch/providers',
        ...options
    });
};

/**
 * Delete Rating
 */
export const tvSeriesDeleteRating = <ThrowOnError extends boolean = false>(options: Options<TvSeriesDeleteRatingData, ThrowOnError>) => {
    return (options.client ?? client).delete<TvSeriesDeleteRatingResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/rating',
        ...options
    });
};

/**
 * Add Rating
 *
 * Rate a TV show and save it to your rated list.
 */
export const tvSeriesAddRating = <ThrowOnError extends boolean = false>(options: Options<TvSeriesAddRatingData, ThrowOnError>) => {
    return (options.client ?? client).post<TvSeriesAddRatingResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/rating',
        ...options
    });
};

/**
 * Details
 *
 * Query the details of a TV season.
 */
export const tvSeasonDetails = <ThrowOnError extends boolean = false>(options: Options<TvSeasonDetailsData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeasonDetailsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}',
        ...options
    });
};

/**
 * Account States
 *
 * Get the rating, watchlist and favourite status.
 */
export const tvSeasonAccountStates = <ThrowOnError extends boolean = false>(options: Options<TvSeasonAccountStatesData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeasonAccountStatesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/account_states',
        ...options
    });
};

/**
 * Aggregate Credits
 *
 * Get the aggregate credits (cast and crew) that have been added to a TV season.
 */
export const tvSeasonAggregateCredits = <ThrowOnError extends boolean = false>(options: Options<TvSeasonAggregateCreditsData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeasonAggregateCreditsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/aggregate_credits',
        ...options
    });
};

/**
 * Changes
 *
 * Get the recent changes for a TV season.
 */
export const tvSeasonChangesById = <ThrowOnError extends boolean = false>(options: Options<TvSeasonChangesByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeasonChangesByIdResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/season/{season_id}/changes',
        ...options
    });
};

/**
 * Credits
 */
export const tvSeasonCredits = <ThrowOnError extends boolean = false>(options: Options<TvSeasonCreditsData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeasonCreditsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/credits',
        ...options
    });
};

/**
 * External IDs
 *
 * Get a list of external IDs that have been added to a TV season.
 */
export const tvSeasonExternalIds = <ThrowOnError extends boolean = false>(options: Options<TvSeasonExternalIdsData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeasonExternalIdsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/external_ids',
        ...options
    });
};

/**
 * Images
 *
 * Get the images that belong to a TV season.
 */
export const tvSeasonImages = <ThrowOnError extends boolean = false>(options: Options<TvSeasonImagesData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeasonImagesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/images',
        ...options
    });
};

/**
 * Translations
 *
 * Get the translations for a TV season.
 */
export const tvSeasonTranslations = <ThrowOnError extends boolean = false>(options: Options<TvSeasonTranslationsData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeasonTranslationsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/translations',
        ...options
    });
};

/**
 * Videos
 *
 * Get the videos that belong to a TV season.
 */
export const tvSeasonVideos = <ThrowOnError extends boolean = false>(options: Options<TvSeasonVideosData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeasonVideosResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/videos',
        ...options
    });
};

/**
 * Watch Providers
 *
 * Get the list of streaming providers we have for a TV season.
 */
export const tvSeasonWatchProviders = <ThrowOnError extends boolean = false>(options: Options<TvSeasonWatchProvidersData, ThrowOnError>) => {
    return (options.client ?? client).get<TvSeasonWatchProvidersResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/watch/providers',
        ...options
    });
};

/**
 * Details
 *
 * Query the details of a TV episode.
 */
export const tvEpisodeDetails = <ThrowOnError extends boolean = false>(options: Options<TvEpisodeDetailsData, ThrowOnError>) => {
    return (options.client ?? client).get<TvEpisodeDetailsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}',
        ...options
    });
};

/**
 * Account States
 *
 * Get the rating, watchlist and favourite status.
 */
export const tvEpisodeAccountStates = <ThrowOnError extends boolean = false>(options: Options<TvEpisodeAccountStatesData, ThrowOnError>) => {
    return (options.client ?? client).get<TvEpisodeAccountStatesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/account_states',
        ...options
    });
};

/**
 * Changes
 *
 * Get the recent changes for a TV episode.
 */
export const tvEpisodeChangesById = <ThrowOnError extends boolean = false>(options: Options<TvEpisodeChangesByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<TvEpisodeChangesByIdResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/episode/{episode_id}/changes',
        ...options
    });
};

/**
 * Credits
 */
export const tvEpisodeCredits = <ThrowOnError extends boolean = false>(options: Options<TvEpisodeCreditsData, ThrowOnError>) => {
    return (options.client ?? client).get<TvEpisodeCreditsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/credits',
        ...options
    });
};

/**
 * External IDs
 *
 * Get a list of external IDs that have been added to a TV episode.
 */
export const tvEpisodeExternalIds = <ThrowOnError extends boolean = false>(options: Options<TvEpisodeExternalIdsData, ThrowOnError>) => {
    return (options.client ?? client).get<TvEpisodeExternalIdsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/external_ids',
        ...options
    });
};

/**
 * Images
 *
 * Get the images that belong to a TV episode.
 */
export const tvEpisodeImages = <ThrowOnError extends boolean = false>(options: Options<TvEpisodeImagesData, ThrowOnError>) => {
    return (options.client ?? client).get<TvEpisodeImagesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/images',
        ...options
    });
};

/**
 * Translations
 *
 * Get the translations that have been added to a TV episode.
 */
export const tvEpisodeTranslations = <ThrowOnError extends boolean = false>(options: Options<TvEpisodeTranslationsData, ThrowOnError>) => {
    return (options.client ?? client).get<TvEpisodeTranslationsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/translations',
        ...options
    });
};

/**
 * Videos
 *
 * Get the videos that belong to a TV episode.
 */
export const tvEpisodeVideos = <ThrowOnError extends boolean = false>(options: Options<TvEpisodeVideosData, ThrowOnError>) => {
    return (options.client ?? client).get<TvEpisodeVideosResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/videos',
        ...options
    });
};

/**
 * Delete Rating
 *
 * Delete your rating on a TV episode.
 */
export const tvEpisodeDeleteRating = <ThrowOnError extends boolean = false>(options: Options<TvEpisodeDeleteRatingData, ThrowOnError>) => {
    return (options.client ?? client).delete<TvEpisodeDeleteRatingResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/rating',
        ...options
    });
};

/**
 * Add Rating
 *
 * Rate a TV episode and save it to your rated list.
 */
export const tvEpisodeAddRating = <ThrowOnError extends boolean = false>(options: Options<TvEpisodeAddRatingData, ThrowOnError>) => {
    return (options.client ?? client).post<TvEpisodeAddRatingResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/rating',
        ...options
    });
};

/**
 * Details
 *
 * Get the details of a TV episode group.
 */
export const tvEpisodeGroupDetails = <ThrowOnError extends boolean = false>(options: Options<TvEpisodeGroupDetailsData, ThrowOnError>) => {
    return (options.client ?? client).get<TvEpisodeGroupDetailsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/tv/episode_group/{tv_episode_group_id}',
        ...options
    });
};

/**
 * Available Regions
 *
 * Get the list of the countries we have watch provider (OTT/streaming) data for.
 */
export const watchProvidersAvailableRegions = <ThrowOnError extends boolean = false>(options?: Options<WatchProvidersAvailableRegionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<WatchProvidersAvailableRegionsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/watch/providers/regions',
        ...options
    });
};

/**
 * Movie Providers
 *
 * Get the list of streaming providers we have for movies.
 */
export const watchProvidersMovieList = <ThrowOnError extends boolean = false>(options?: Options<WatchProvidersMovieListData, ThrowOnError>) => {
    return (options?.client ?? client).get<WatchProvidersMovieListResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/watch/providers/movie',
        ...options
    });
};

/**
 * TV Providers
 *
 * Get the list of streaming providers we have for TV shows.
 */
export const watchProviderTvList = <ThrowOnError extends boolean = false>(options?: Options<WatchProviderTvListData, ThrowOnError>) => {
    return (options?.client ?? client).get<WatchProviderTvListResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/3/watch/providers/tv',
        ...options
    });
};
