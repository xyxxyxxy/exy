// This file is auto-generated by @hey-api/openapi-ts

import type { DeleteUsersByUseridFavoriteitemsByIdResponse, DeleteUsersByUseridItemsByIdRatingResponse, DeleteUsersByUseridPlayeditemsByIdResponse, GetAlbumsByIdInstantmixResponse, GetAlbumsByIdSimilarResponse, GetArtistsAlbumartistsResponse, GetArtistsByIdSimilarResponse, GetArtistsByNameResponse, GetArtistsInstantmixResponse, GetArtistsPrefixesResponse, GetArtistsResponse, GetAudiobooksNextupResponse, GetAudiocodecsResponse, GetAudiolayoutsResponse, GetAuthProvidersResponse, GetBackuprestoreBackupinfoResponse, GetBrandingConfigurationResponse, GetChannelsResponse, GetConnectExchangeResponse, GetContainersResponse, GetDevicesCamerauploadsResponse, GetDevicesInfoResponse, GetDevicesOptionsResponse, GetDevicesResponse, GetDisplaypreferencesByIdResponse, GetDlnaProfileinfosResponse, GetDlnaProfilesByIdResponse, GetDlnaProfilesDefaultResponse, GetEncodingCodecconfigurationDefaultsResponse, GetEncodingCodecinformationVideoResponse, GetEncodingCodecparametersResponse, GetEncodingFfmpegoptionsResponse, GetEncodingFulltonemapoptionsResponse, GetEncodingPublictonemapoptionsResponse, GetEncodingSubtitleoptionsResponse, GetEncodingTonemapoptionsResponse, GetEnvironmentDefaultdirectorybrowserResponse, GetEnvironmentDirectorycontentsResponse, GetEnvironmentDrivesResponse, GetEnvironmentNetworkdevicesResponse, GetEnvironmentNetworksharesResponse, GetExtendedvideotypesResponse, GetFeaturesResponse, GetGamegenresByNameResponse, GetGamegenresResponse, GetGamesByIdSimilarResponse, GetGenresByNameResponse, GetGenresResponse, GetItemsByIdAncestorsResponse, GetItemsByIdCriticreviewsResponse, GetItemsByIdDeleteinfoResponse, GetItemsByIdExternalidinfosResponse, GetItemsByIdImagesResponse, GetItemsByIdInstantmixResponse, GetItemsByIdPlaybackinfoResponse, GetItemsByIdRemoteimagesProvidersResponse, GetItemsByIdRemoteimagesResponse, GetItemsByIdRemotesearchSubtitlesByLanguageResponse, GetItemsByIdSimilarResponse, GetItemsByIdThememediaResponse, GetItemsByIdThemesongsResponse, GetItemsByIdThemevideosResponse, GetItemsByIdThumbnailsetResponse, GetItemsByItemidMetadataeditorResponse, GetItemsCountsResponse, GetItemsIntrosResponse, GetItemsPrefixesResponse, GetItemsResponse, GetItemtypesResponse, GetLibrariesAvailableoptionsResponse, GetLibraryMediafoldersResponse, GetLibrarySelectablemediafoldersResponse, GetLibraryVirtualfoldersQueryResponse, GetLivetvAvailablerecordingoptionsResponse, GetLivetvChannelsByIdResponse, GetLivetvChannelsResponse, GetLivetvChanneltagsPrefixesResponse, GetLivetvChanneltagsResponse, GetLivetvEpgResponse, GetLivetvFolderResponse, GetLivetvGuideinfoResponse, GetLivetvInfoResponse, GetLivetvListingprovidersAvailableResponse, GetLivetvListingprovidersDefaultResponse, GetLivetvListingprovidersLineupsResponse, GetLivetvListingprovidersResponse, GetLivetvManageChannelsResponse, GetLivetvProgramsByIdResponse, GetLivetvProgramsRecommendedResponse, GetLivetvRecordingsByIdResponse, GetLivetvRecordingsFoldersResponse, GetLivetvRecordingsGroupsResponse, GetLivetvRecordingsSeriesResponse, GetLivetvSeriestimersByIdResponse, GetLivetvSeriestimersResponse, GetLivetvTimersByIdResponse, GetLivetvTimersDefaultsResponse, GetLivetvTimersResponse, GetLivetvTunerhostsDefaultByTypeResponse, GetLivetvTunerhostsResponse, GetLivetvTunerhostsTypesResponse, GetLivetvTunersDiscoverResponse, GetLivetvTunersDiscvoverResponse, GetLocalizationCountriesResponse, GetLocalizationCulturesResponse, GetLocalizationOptionsResponse, GetLocalizationParentalratingsResponse, GetMoviesByIdSimilarResponse, GetMoviesRecommendationsResponse, GetMusicgenresByNameInstantmixResponse, GetMusicgenresByNameResponse, GetMusicgenresInstantmixResponse, GetMusicgenresResponse, GetNotificationsServicesDefaultsResponse, GetNotificationsTypesResponse, GetOfficialratingsResponse, GetPackagesByNameResponse, GetPackagesResponse, GetPackagesUpdatesResponse, GetPersonsByNameResponse, GetPersonsResponse, GetPlaylistsByIdAddtoplaylistinfoResponse, GetPlaylistsByIdInstantmixResponse, GetPlaylistsByIdItemsResponse, GetPluginsResponse, GetScheduledtasksByIdResponse, GetScheduledtasksResponse, GetSessionsPlayqueueResponse, GetSessionsResponse, GetShowsByIdSeasonsResponse, GetShowsByIdSimilarResponse, GetShowsNextupResponse, GetSongsByIdInstantmixResponse, GetStreamlanguagesResponse, GetStudiosByNameResponse, GetStudiosResponse, GetSubtitlecodecsResponse, GetSyncItemsReadyResponse, GetSyncJobitemsResponse, GetSyncJobsByIdResponse, GetSyncJobsResponse, GetSyncOptionsResponse, GetSyncTargetsResponse, GetSystemActivitylogEntriesResponse, GetSystemConfigurationResponse, GetSystemEndpointResponse, GetSystemInfoPublicResponse, GetSystemInfoResponse, GetSystemLogsByNameLinesResponse, GetSystemLogsQueryResponse, GetSystemReleasenotesResponse, GetSystemReleasenotesVersionsResponse, GetSystemWakeonlaninfoResponse, GetTagsResponse, GetTrailersByIdSimilarResponse, GetTrailersResponse, GetUiViewResponse, GetUsersByIdResponse, GetUsersByUseridHomesectionsResponse, GetUsersByUseridItemsByIdIntrosResponse, GetUsersByUseridItemsByIdLocaltrailersResponse, GetUsersByUseridItemsByIdResponse, GetUsersByUseridItemsByIdSpecialfeaturesResponse, GetUsersByUseridItemsLatestResponse, GetUsersByUseridItemsResponse, GetUsersByUseridItemsResumeResponse, GetUsersByUseridItemsRootResponse, GetUsersByUseridSectionsBySectionidItemsResponse, GetUsersByUseridSuggestionsResponse, GetUsersByUseridViewsResponse, GetUsersItemaccessResponse, GetUsersPrefixesResponse, GetUsersPublicResponse, GetUsersQueryResponse, GetVideocodecsResponse, GetVideosByIdAdditionalpartsResponse, GetWebConfigurationpagesResponse, GetYearsResponse, PostCollectionsResponse, PostEnvironmentDirectorycontentsResponse, PostItemsByIdPlaybackinfoResponse, PostItemsByIdRemotesearchSubtitlesBySubtitleidResponse, PostItemsRemotesearchBookResponse, PostItemsRemotesearchBoxsetResponse, PostItemsRemotesearchGameResponse, PostItemsRemotesearchMovieResponse, PostItemsRemotesearchMusicalbumResponse, PostItemsRemotesearchMusicartistResponse, PostItemsRemotesearchMusicvideoResponse, PostItemsRemotesearchPersonResponse, PostItemsRemotesearchSeriesResponse, PostItemsRemotesearchTrailerResponse, PostLivestreamsOpenResponse, PostLivetvListingprovidersResponse, PostLivetvManageChannelsByIdDisabledResponse, PostLivetvManageChannelsByIdSortindexResponse, PostLivetvSeriestimersResponse, PostLivetvTunerhostsResponse, PostPlaylistsByIdItemsResponse, PostPlaylistsResponse, PostSyncDataResponse, PostSyncJobsResponse, PostUiCommandResponse, PostUsersAuthenticatebynameResponse, PostUsersByIdAuthenticateResponse, PostUsersByIdConnectLinkResponse, PostUsersByUseridFavoriteitemsByIdDeleteResponse, PostUsersByUseridFavoriteitemsByIdResponse, PostUsersByUseridItemsByIdHidefromresumeResponse, PostUsersByUseridItemsByIdRatingDeleteResponse, PostUsersByUseridItemsByIdRatingResponse, PostUsersByUseridPlayeditemsByIdDeleteResponse, PostUsersByUseridPlayeditemsByIdResponse, PostUsersForgotpasswordPinResponse, PostUsersForgotpasswordResponse, PostUsersNewResponse } from './types.gen';

const queryResultBaseItemDtoSchemaResponseTransformer = (data: any) => {
    if (data.Items) {
        data.Items = data.Items.map((item: any) => {
            return baseItemDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

const baseItemDtoSchemaResponseTransformer = (data: any) => {
    if (data.DateCreated) {
        data.DateCreated = new Date(data.DateCreated);
    }
    if (data.DateModified) {
        data.DateModified = new Date(data.DateModified);
    }
    if (data.SyncStatus) {
        data.SyncStatus = syncJobItemStatusSchemaResponseTransformer(data.SyncStatus);
    }
    if (data.Video3DFormat) {
        data.Video3DFormat = video3dFormatSchemaResponseTransformer(data.Video3DFormat);
    }
    if (data.PremiereDate) {
        data.PremiereDate = new Date(data.PremiereDate);
    }
    if (data.ExternalUrls) {
        data.ExternalUrls = data.ExternalUrls.map((item: any) => {
            return externalUrlSchemaResponseTransformer(item);
        });
    }
    if (data.MediaSources) {
        data.MediaSources = data.MediaSources.map((item: any) => {
            return mediaSourceInfoSchemaResponseTransformer(item);
        });
    }
    if (data.GameSystemId) {
        data.GameSystemId = BigInt(data.GameSystemId.toString());
    }
    if (data.RunTimeTicks) {
        data.RunTimeTicks = BigInt(data.RunTimeTicks.toString());
    }
    if (data.Size) {
        data.Size = BigInt(data.Size.toString());
    }
    if (data.RemoteTrailers) {
        data.RemoteTrailers = data.RemoteTrailers.map((item: any) => {
            return mediaUrlSchemaResponseTransformer(item);
        });
    }
    if (data.ProviderIds) {
        data.ProviderIds = providerIdDictionarySchemaResponseTransformer(data.ProviderIds);
    }
    if (data.People) {
        data.People = data.People.map((item: any) => {
            return baseItemPersonSchemaResponseTransformer(item);
        });
    }
    if (data.Studios) {
        data.Studios = data.Studios.map((item: any) => {
            return nameLongIdPairSchemaResponseTransformer(item);
        });
    }
    if (data.GenreItems) {
        data.GenreItems = data.GenreItems.map((item: any) => {
            return nameLongIdPairSchemaResponseTransformer(item);
        });
    }
    if (data.TagItems) {
        data.TagItems = data.TagItems.map((item: any) => {
            return nameLongIdPairSchemaResponseTransformer(item);
        });
    }
    if (data.UserData) {
        data.UserData = userItemDataDtoSchemaResponseTransformer(data.UserData);
    }
    if (data.AirDays) {
        data.AirDays = data.AirDays.map((item: any) => {
            return dayOfWeekSchemaResponseTransformer(item);
        });
    }
    if (data.ArtistItems) {
        data.ArtistItems = data.ArtistItems.map((item: any) => {
            return nameIdPairSchemaResponseTransformer(item);
        });
    }
    if (data.Composers) {
        data.Composers = data.Composers.map((item: any) => {
            return nameIdPairSchemaResponseTransformer(item);
        });
    }
    if (data.AlbumArtists) {
        data.AlbumArtists = data.AlbumArtists.map((item: any) => {
            return nameIdPairSchemaResponseTransformer(item);
        });
    }
    if (data.MediaStreams) {
        data.MediaStreams = data.MediaStreams.map((item: any) => {
            return mediaStreamSchemaResponseTransformer(item);
        });
    }
    if (data.Chapters) {
        data.Chapters = data.Chapters.map((item: any) => {
            return chapterInfoSchemaResponseTransformer(item);
        });
    }
    if (data.LocationType) {
        data.LocationType = locationTypeSchemaResponseTransformer(data.LocationType);
    }
    if (data.EndDate) {
        data.EndDate = new Date(data.EndDate);
    }
    if (data.LockedFields) {
        data.LockedFields = data.LockedFields.map((item: any) => {
            return metadataFieldsSchemaResponseTransformer(item);
        });
    }
    if (data.ImageOrientation) {
        data.ImageOrientation = drawingImageOrientationSchemaResponseTransformer(data.ImageOrientation);
    }
    if (data.StartDate) {
        data.StartDate = new Date(data.StartDate);
    }
    if (data.TimerType) {
        data.TimerType = liveTvTimerTypeSchemaResponseTransformer(data.TimerType);
    }
    if (data.CurrentProgram) {
        data.CurrentProgram = baseItemDtoSchemaResponseTransformer(data.CurrentProgram);
    }
    return data;
};

const mediaSourceInfoSchemaResponseTransformer = (data: any) => {
    if (data.Chapters) {
        data.Chapters = data.Chapters.map((item: any) => {
            return chapterInfoSchemaResponseTransformer(item);
        });
    }
    if (data.Protocol) {
        data.Protocol = mediaProtocolSchemaResponseTransformer(data.Protocol);
    }
    if (data.EncoderProtocol) {
        data.EncoderProtocol = mediaProtocolSchemaResponseTransformer(data.EncoderProtocol);
    }
    if (data.Type) {
        data.Type = mediaSourceTypeSchemaResponseTransformer(data.Type);
    }
    if (data.ProbeProtocol) {
        data.ProbeProtocol = mediaProtocolSchemaResponseTransformer(data.ProbeProtocol);
    }
    if (data.Size) {
        data.Size = BigInt(data.Size.toString());
    }
    if (data.RunTimeTicks) {
        data.RunTimeTicks = BigInt(data.RunTimeTicks.toString());
    }
    if (data.ContainerStartTimeTicks) {
        data.ContainerStartTimeTicks = BigInt(data.ContainerStartTimeTicks.toString());
    }
    if (data.WallClockStart) {
        data.WallClockStart = new Date(data.WallClockStart);
    }
    if (data.Video3DFormat) {
        data.Video3DFormat = video3dFormatSchemaResponseTransformer(data.Video3DFormat);
    }
    if (data.MediaStreams) {
        data.MediaStreams = data.MediaStreams.map((item: any) => {
            return mediaStreamSchemaResponseTransformer(item);
        });
    }
    if (data.Timestamp) {
        data.Timestamp = transportStreamTimestampSchemaResponseTransformer(data.Timestamp);
    }
    return data;
};

const chapterInfoSchemaResponseTransformer = (data: any) => {
    if (data.StartPositionTicks) {
        data.StartPositionTicks = BigInt(data.StartPositionTicks.toString());
    }
    if (data.MarkerType) {
        data.MarkerType = markerTypeSchemaResponseTransformer(data.MarkerType);
    }
    return data;
};

const mediaStreamSchemaResponseTransformer = (data: any) => {
    if (data.StreamStartTimeTicks) {
        data.StreamStartTimeTicks = BigInt(data.StreamStartTimeTicks.toString());
    }
    if (data.Type) {
        data.Type = mediaStreamTypeSchemaResponseTransformer(data.Type);
    }
    if (data.DeliveryMethod) {
        data.DeliveryMethod = subtitleDeliveryMethodSchemaResponseTransformer(data.DeliveryMethod);
    }
    if (data.Protocol) {
        data.Protocol = mediaProtocolSchemaResponseTransformer(data.Protocol);
    }
    if (data.ExtendedVideoType) {
        data.ExtendedVideoType = extendedVideoTypesSchemaResponseTransformer(data.ExtendedVideoType);
    }
    if (data.ExtendedVideoSubType) {
        data.ExtendedVideoSubType = extendedVideoSubTypesSchemaResponseTransformer(data.ExtendedVideoSubType);
    }
    if (data.SubtitleLocationType) {
        data.SubtitleLocationType = subtitleLocationTypeSchemaResponseTransformer(data.SubtitleLocationType);
    }
    return data;
};

const baseItemPersonSchemaResponseTransformer = (data: any) => {
    if (data.Type) {
        data.Type = personTypeSchemaResponseTransformer(data.Type);
    }
    return data;
};

const nameLongIdPairSchemaResponseTransformer = (data: any) => {
    if (data.Id) {
        data.Id = BigInt(data.Id.toString());
    }
    return data;
};

const userItemDataDtoSchemaResponseTransformer = (data: any) => {
    if (data.PlaybackPositionTicks) {
        data.PlaybackPositionTicks = BigInt(data.PlaybackPositionTicks.toString());
    }
    if (data.LastPlayedDate) {
        data.LastPlayedDate = new Date(data.LastPlayedDate);
    }
    return data;
};

export const getArtistsResponseTransformer = async (data: any): Promise<GetArtistsResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

const queryResultUserLibraryTagItemSchemaResponseTransformer = (data: any) => {
    if (data.Items) {
        data.Items = data.Items.map((item: any) => {
            return userLibraryTagItemSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getAudiocodecsResponseTransformer = async (data: any): Promise<GetAudiocodecsResponse> => {
    data = queryResultUserLibraryTagItemSchemaResponseTransformer(data);
    return data;
};

export const getAudiolayoutsResponseTransformer = async (data: any): Promise<GetAudiolayoutsResponse> => {
    data = queryResultUserLibraryTagItemSchemaResponseTransformer(data);
    return data;
};

export const getChannelsResponseTransformer = async (data: any): Promise<GetChannelsResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const postCollectionsResponseTransformer = async (data: any): Promise<PostCollectionsResponse> => {
    data = collectionsCollectionCreationResultSchemaResponseTransformer(data);
    return data;
};

export const getContainersResponseTransformer = async (data: any): Promise<GetContainersResponse> => {
    data = queryResultUserLibraryTagItemSchemaResponseTransformer(data);
    return data;
};

const queryResultDevicesDeviceInfoSchemaResponseTransformer = (data: any) => {
    if (data.Items) {
        data.Items = data.Items.map((item: any) => {
            return devicesDeviceInfoSchemaResponseTransformer(item);
        });
    }
    return data;
};

const devicesDeviceInfoSchemaResponseTransformer = (data: any) => {
    if (data.InternalId) {
        data.InternalId = BigInt(data.InternalId.toString());
    }
    if (data.DateLastActivity) {
        data.DateLastActivity = new Date(data.DateLastActivity);
    }
    return data;
};

export const getDevicesResponseTransformer = async (data: any): Promise<GetDevicesResponse> => {
    data = queryResultDevicesDeviceInfoSchemaResponseTransformer(data);
    return data;
};

export const getExtendedvideotypesResponseTransformer = async (data: any): Promise<GetExtendedvideotypesResponse> => {
    data = queryResultUserLibraryTagItemSchemaResponseTransformer(data);
    return data;
};

const featureInfoSchemaResponseTransformer = (data: any) => {
    if (data.FeatureType) {
        data.FeatureType = featureTypeSchemaResponseTransformer(data.FeatureType);
    }
    return data;
};

export const getFeaturesResponseTransformer = async (data: any): Promise<GetFeaturesResponse> => {
    data = data.map((item: any) => {
        return featureInfoSchemaResponseTransformer(item);
    });
    return data;
};

export const getGamegenresResponseTransformer = async (data: any): Promise<GetGamegenresResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getGenresResponseTransformer = async (data: any): Promise<GetGenresResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getItemsResponseTransformer = async (data: any): Promise<GetItemsResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getItemtypesResponseTransformer = async (data: any): Promise<GetItemtypesResponse> => {
    data = queryResultUserLibraryTagItemSchemaResponseTransformer(data);
    return data;
};

export const getMusicgenresResponseTransformer = async (data: any): Promise<GetMusicgenresResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

const queryResultUserLibraryOfficialRatingItemSchemaResponseTransformer = (data: any) => {
    if (data.Items) {
        data.Items = data.Items.map((item: any) => {
            return userLibraryOfficialRatingItemSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getOfficialratingsResponseTransformer = async (data: any): Promise<GetOfficialratingsResponse> => {
    data = queryResultUserLibraryOfficialRatingItemSchemaResponseTransformer(data);
    return data;
};

const packageInfoSchemaResponseTransformer = (data: any) => {
    if (data.targetSystem) {
        data.targetSystem = packageTargetSystemSchemaResponseTransformer(data.targetSystem);
    }
    if (data.expDate) {
        data.expDate = new Date(data.expDate);
    }
    if (data.versions) {
        data.versions = data.versions.map((item: any) => {
            return packageVersionInfoSchemaResponseTransformer(item);
        });
    }
    return data;
};

const packageVersionInfoSchemaResponseTransformer = (data: any) => {
    if (data.classification) {
        data.classification = packageVersionClassSchemaResponseTransformer(data.classification);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getPackagesResponseTransformer = async (data: any): Promise<GetPackagesResponse> => {
    data = data.map((item: any) => {
        return packageInfoSchemaResponseTransformer(item);
    });
    return data;
};

export const getPersonsResponseTransformer = async (data: any): Promise<GetPersonsResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const postPlaylistsResponseTransformer = async (data: any): Promise<PostPlaylistsResponse> => {
    data = playlistsPlaylistCreationResultSchemaResponseTransformer(data);
    return data;
};

export const getPluginsResponseTransformer = async (data: any): Promise<GetPluginsResponse> => {
    data = data.map((item: any) => {
        return pluginsPluginInfoSchemaResponseTransformer(item);
    });
    return data;
};

const taskInfoSchemaResponseTransformer = (data: any) => {
    if (data.State) {
        data.State = taskStateSchemaResponseTransformer(data.State);
    }
    if (data.LastExecutionResult) {
        data.LastExecutionResult = taskResultSchemaResponseTransformer(data.LastExecutionResult);
    }
    if (data.Triggers) {
        data.Triggers = data.Triggers.map((item: any) => {
            return taskTriggerInfoSchemaResponseTransformer(item);
        });
    }
    return data;
};

const taskResultSchemaResponseTransformer = (data: any) => {
    if (data.StartTimeUtc) {
        data.StartTimeUtc = new Date(data.StartTimeUtc);
    }
    if (data.EndTimeUtc) {
        data.EndTimeUtc = new Date(data.EndTimeUtc);
    }
    if (data.Status) {
        data.Status = taskCompletionStatusSchemaResponseTransformer(data.Status);
    }
    return data;
};

const taskTriggerInfoSchemaResponseTransformer = (data: any) => {
    if (data.TimeOfDayTicks) {
        data.TimeOfDayTicks = BigInt(data.TimeOfDayTicks.toString());
    }
    if (data.IntervalTicks) {
        data.IntervalTicks = BigInt(data.IntervalTicks.toString());
    }
    if (data.SystemEvent) {
        data.SystemEvent = systemEventSchemaResponseTransformer(data.SystemEvent);
    }
    if (data.DayOfWeek) {
        data.DayOfWeek = dayOfWeekSchemaResponseTransformer(data.DayOfWeek);
    }
    if (data.MaxRuntimeTicks) {
        data.MaxRuntimeTicks = BigInt(data.MaxRuntimeTicks.toString());
    }
    return data;
};

export const getScheduledtasksResponseTransformer = async (data: any): Promise<GetScheduledtasksResponse> => {
    data = data.map((item: any) => {
        return taskInfoSchemaResponseTransformer(item);
    });
    return data;
};

const sessionSessionInfoSchemaResponseTransformer = (data: any) => {
    if (data.PlayState) {
        data.PlayState = playerStateInfoSchemaResponseTransformer(data.PlayState);
    }
    if (data.AdditionalUsers) {
        data.AdditionalUsers = data.AdditionalUsers.map((item: any) => {
            return sessionUserInfoSchemaResponseTransformer(item);
        });
    }
    if (data.LastActivityDate) {
        data.LastActivityDate = new Date(data.LastActivityDate);
    }
    if (data.NowPlayingItem) {
        data.NowPlayingItem = baseItemDtoSchemaResponseTransformer(data.NowPlayingItem);
    }
    if (data.InternalDeviceId) {
        data.InternalDeviceId = BigInt(data.InternalDeviceId.toString());
    }
    if (data.TranscodingInfo) {
        data.TranscodingInfo = transcodingInfoSchemaResponseTransformer(data.TranscodingInfo);
    }
    return data;
};

const playerStateInfoSchemaResponseTransformer = (data: any) => {
    if (data.PositionTicks) {
        data.PositionTicks = BigInt(data.PositionTicks.toString());
    }
    if (data.MediaSource) {
        data.MediaSource = mediaSourceInfoSchemaResponseTransformer(data.MediaSource);
    }
    if (data.PlayMethod) {
        data.PlayMethod = playMethodSchemaResponseTransformer(data.PlayMethod);
    }
    if (data.RepeatMode) {
        data.RepeatMode = repeatModeSchemaResponseTransformer(data.RepeatMode);
    }
    if (data.SleepTimerMode) {
        data.SleepTimerMode = sleepTimerModeSchemaResponseTransformer(data.SleepTimerMode);
    }
    if (data.SleepTimerEndTime) {
        data.SleepTimerEndTime = new Date(data.SleepTimerEndTime);
    }
    return data;
};

const sessionUserInfoSchemaResponseTransformer = (data: any) => {
    if (data.UserInternalId) {
        data.UserInternalId = BigInt(data.UserInternalId.toString());
    }
    return data;
};

const transcodingInfoSchemaResponseTransformer = (data: any) => {
    if (data.TranscodeReasons) {
        data.TranscodeReasons = data.TranscodeReasons.map((item: any) => {
            return transcodeReasonSchemaResponseTransformer(item);
        });
    }
    if (data.CpuHistory) {
        data.CpuHistory = data.CpuHistory.map((item: any) => {
            return tupleDoubleDoubleSchemaResponseTransformer(item);
        });
    }
    if (data.ProcessStatistics) {
        data.ProcessStatistics = processRunMetricsProcessStatisticsSchemaResponseTransformer(data.ProcessStatistics);
    }
    if (data.VideoPipelineInfo) {
        data.VideoPipelineInfo = data.VideoPipelineInfo.map((item: any) => {
            return transcodingVpStepInfoSchemaResponseTransformer(item);
        });
    }
    return data;
};

const processRunMetricsProcessStatisticsSchemaResponseTransformer = (data: any) => {
    if (data.Metrics) {
        data.Metrics = data.Metrics.map((item: any) => {
            return processRunMetricsProcessMetricPointSchemaResponseTransformer(item);
        });
    }
    return data;
};

const transcodingVpStepInfoSchemaResponseTransformer = (data: any) => {
    if (data.StepType) {
        data.StepType = transcodingVpStepTypesSchemaResponseTransformer(data.StepType);
    }
    return data;
};

export const getSessionsResponseTransformer = async (data: any): Promise<GetSessionsResponse> => {
    data = data.map((item: any) => {
        return sessionSessionInfoSchemaResponseTransformer(item);
    });
    return data;
};

export const getStreamlanguagesResponseTransformer = async (data: any): Promise<GetStreamlanguagesResponse> => {
    data = queryResultUserLibraryTagItemSchemaResponseTransformer(data);
    return data;
};

export const getStudiosResponseTransformer = async (data: any): Promise<GetStudiosResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getSubtitlecodecsResponseTransformer = async (data: any): Promise<GetSubtitlecodecsResponse> => {
    data = queryResultUserLibraryTagItemSchemaResponseTransformer(data);
    return data;
};

export const getTagsResponseTransformer = async (data: any): Promise<GetTagsResponse> => {
    data = queryResultUserLibraryTagItemSchemaResponseTransformer(data);
    return data;
};

export const getTrailersResponseTransformer = async (data: any): Promise<GetTrailersResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getVideocodecsResponseTransformer = async (data: any): Promise<GetVideocodecsResponse> => {
    data = queryResultUserLibraryTagItemSchemaResponseTransformer(data);
    return data;
};

export const getYearsResponseTransformer = async (data: any): Promise<GetYearsResponse> => {
    data = queryResultUserLibraryTagItemSchemaResponseTransformer(data);
    return data;
};

export const getArtistsByNameResponseTransformer = async (data: any): Promise<GetArtistsByNameResponse> => {
    data = baseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getArtistsAlbumartistsResponseTransformer = async (data: any): Promise<GetArtistsAlbumartistsResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getArtistsPrefixesResponseTransformer = async (data: any): Promise<GetArtistsPrefixesResponse> => {
    data = data.map((item: any) => {
        return nameValuePairSchemaResponseTransformer(item);
    });
    return data;
};

export const getArtistsInstantmixResponseTransformer = async (data: any): Promise<GetArtistsInstantmixResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getAudiobooksNextupResponseTransformer = async (data: any): Promise<GetAudiobooksNextupResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getAuthProvidersResponseTransformer = async (data: any): Promise<GetAuthProvidersResponse> => {
    data = data.map((item: any) => {
        return nameIdPairSchemaResponseTransformer(item);
    });
    return data;
};

const mbBackupApiAllBackupsInfoSchemaResponseTransformer = (data: any) => {
    if (data.FullBackupInfo) {
        data.FullBackupInfo = mbBackupBackupInfoSchemaResponseTransformer(data.FullBackupInfo);
    }
    if (data.LightBackups) {
        data.LightBackups = data.LightBackups.map((item: any) => {
            return mbBackupBackupInfoSchemaResponseTransformer(item);
        });
    }
    return data;
};

const mbBackupBackupInfoSchemaResponseTransformer = (data: any) => {
    if (data.DateCreated) {
        data.DateCreated = new Date(data.DateCreated);
    }
    if (data.Users) {
        data.Users = data.Users.map((item: any) => {
            return nameIdPairSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getBackuprestoreBackupinfoResponseTransformer = async (data: any): Promise<GetBackuprestoreBackupinfoResponse> => {
    data = mbBackupApiAllBackupsInfoSchemaResponseTransformer(data);
    return data;
};

export const getBrandingConfigurationResponseTransformer = async (data: any): Promise<GetBrandingConfigurationResponse> => {
    data = brandingBrandingOptionsSchemaResponseTransformer(data);
    return data;
};

export const getConnectExchangeResponseTransformer = async (data: any): Promise<GetConnectExchangeResponse> => {
    data = connectConnectAuthenticationExchangeResultSchemaResponseTransformer(data);
    return data;
};

export const getDevicesOptionsResponseTransformer = async (data: any): Promise<GetDevicesOptionsResponse> => {
    data = devicesDeviceOptionsSchemaResponseTransformer(data);
    return data;
};

export const getDevicesInfoResponseTransformer = async (data: any): Promise<GetDevicesInfoResponse> => {
    data = devicesDeviceInfoSchemaResponseTransformer(data);
    return data;
};

const devicesContentUploadHistorySchemaResponseTransformer = (data: any) => {
    if (data.FilesUploaded) {
        data.FilesUploaded = data.FilesUploaded.map((item: any) => {
            return devicesLocalFileInfoSchemaResponseTransformer(item);
        });
    }
    return data;
};

const devicesLocalFileInfoSchemaResponseTransformer = (data: any) => {
    if (data.DateCreated) {
        data.DateCreated = new Date(data.DateCreated);
    }
    return data;
};

export const getDevicesCamerauploadsResponseTransformer = async (data: any): Promise<GetDevicesCamerauploadsResponse> => {
    data = devicesContentUploadHistorySchemaResponseTransformer(data);
    return data;
};

const displayPreferencesSchemaResponseTransformer = (data: any) => {
    if (data.SortOrder) {
        data.SortOrder = sortOrderSchemaResponseTransformer(data.SortOrder);
    }
    return data;
};

export const getDisplaypreferencesByIdResponseTransformer = async (data: any): Promise<GetDisplaypreferencesByIdResponse> => {
    data = displayPreferencesSchemaResponseTransformer(data);
    return data;
};

const dlnaProfilesDlnaProfileSchemaResponseTransformer = (data: any) => {
    if (data.Type) {
        data.Type = dlnaProfilesDeviceProfileTypeSchemaResponseTransformer(data.Type);
    }
    if (data.Identification) {
        data.Identification = dlnaProfilesDeviceIdentificationSchemaResponseTransformer(data.Identification);
    }
    if (data.ProtocolInfoDetection) {
        data.ProtocolInfoDetection = dlnaProfilesProtocolInfoDetectionSchemaResponseTransformer(data.ProtocolInfoDetection);
    }
    if (data.MaxStreamingBitrate) {
        data.MaxStreamingBitrate = BigInt(data.MaxStreamingBitrate.toString());
    }
    if (data.DirectPlayProfiles) {
        data.DirectPlayProfiles = data.DirectPlayProfiles.map((item: any) => {
            return directPlayProfileSchemaResponseTransformer(item);
        });
    }
    if (data.TranscodingProfiles) {
        data.TranscodingProfiles = data.TranscodingProfiles.map((item: any) => {
            return transcodingProfileSchemaResponseTransformer(item);
        });
    }
    if (data.ContainerProfiles) {
        data.ContainerProfiles = data.ContainerProfiles.map((item: any) => {
            return containerProfileSchemaResponseTransformer(item);
        });
    }
    if (data.CodecProfiles) {
        data.CodecProfiles = data.CodecProfiles.map((item: any) => {
            return codecProfileSchemaResponseTransformer(item);
        });
    }
    if (data.ResponseProfiles) {
        data.ResponseProfiles = data.ResponseProfiles.map((item: any) => {
            return responseProfileSchemaResponseTransformer(item);
        });
    }
    if (data.SubtitleProfiles) {
        data.SubtitleProfiles = data.SubtitleProfiles.map((item: any) => {
            return subtitleProfileSchemaResponseTransformer(item);
        });
    }
    return data;
};

const dlnaProfilesDeviceIdentificationSchemaResponseTransformer = (data: any) => {
    if (data.Headers) {
        data.Headers = data.Headers.map((item: any) => {
            return dlnaProfilesHttpHeaderInfoSchemaResponseTransformer(item);
        });
    }
    return data;
};

const dlnaProfilesHttpHeaderInfoSchemaResponseTransformer = (data: any) => {
    if (data.Match) {
        data.Match = dlnaProfilesHeaderMatchTypeSchemaResponseTransformer(data.Match);
    }
    return data;
};

const directPlayProfileSchemaResponseTransformer = (data: any) => {
    if (data.Type) {
        data.Type = dlnaProfileTypeSchemaResponseTransformer(data.Type);
    }
    return data;
};

const transcodingProfileSchemaResponseTransformer = (data: any) => {
    if (data.Type) {
        data.Type = dlnaProfileTypeSchemaResponseTransformer(data.Type);
    }
    if (data.TranscodeSeekInfo) {
        data.TranscodeSeekInfo = transcodeSeekInfoSchemaResponseTransformer(data.TranscodeSeekInfo);
    }
    if (data.Context) {
        data.Context = encodingContextSchemaResponseTransformer(data.Context);
    }
    return data;
};

const containerProfileSchemaResponseTransformer = (data: any) => {
    if (data.Type) {
        data.Type = dlnaProfileTypeSchemaResponseTransformer(data.Type);
    }
    if (data.Conditions) {
        data.Conditions = data.Conditions.map((item: any) => {
            return profileConditionSchemaResponseTransformer(item);
        });
    }
    return data;
};

const profileConditionSchemaResponseTransformer = (data: any) => {
    if (data.Condition) {
        data.Condition = profileConditionTypeSchemaResponseTransformer(data.Condition);
    }
    if (data.Property) {
        data.Property = profileConditionValueSchemaResponseTransformer(data.Property);
    }
    return data;
};

const codecProfileSchemaResponseTransformer = (data: any) => {
    if (data.Type) {
        data.Type = codecTypeSchemaResponseTransformer(data.Type);
    }
    if (data.Conditions) {
        data.Conditions = data.Conditions.map((item: any) => {
            return profileConditionSchemaResponseTransformer(item);
        });
    }
    if (data.ApplyConditions) {
        data.ApplyConditions = data.ApplyConditions.map((item: any) => {
            return profileConditionSchemaResponseTransformer(item);
        });
    }
    return data;
};

const responseProfileSchemaResponseTransformer = (data: any) => {
    if (data.Type) {
        data.Type = dlnaProfileTypeSchemaResponseTransformer(data.Type);
    }
    if (data.Conditions) {
        data.Conditions = data.Conditions.map((item: any) => {
            return profileConditionSchemaResponseTransformer(item);
        });
    }
    return data;
};

const subtitleProfileSchemaResponseTransformer = (data: any) => {
    if (data.Method) {
        data.Method = subtitleDeliveryMethodSchemaResponseTransformer(data.Method);
    }
    return data;
};

export const getDlnaProfileinfosResponseTransformer = async (data: any): Promise<GetDlnaProfileinfosResponse> => {
    data = data.map((item: any) => {
        return dlnaProfilesDlnaProfileSchemaResponseTransformer(item);
    });
    return data;
};

const configurationToneMappingToneMapOptionsVisibilitySchemaResponseTransformer = (data: any) => {
    if (data.OperatingSystem) {
        data.OperatingSystem = operatingSystemSchemaResponseTransformer(data.OperatingSystem);
    }
    return data;
};

export const getEncodingTonemapoptionsResponseTransformer = async (data: any): Promise<GetEncodingTonemapoptionsResponse> => {
    data = configurationToneMappingToneMapOptionsVisibilitySchemaResponseTransformer(data);
    return data;
};

const editObjectContainerSchemaResponseTransformer = (data: any) => {
    if (data.EditorRoot) {
        data.EditorRoot = editorsEditorRootSchemaResponseTransformer(data.EditorRoot);
    }
    return data;
};

const editorsEditorRootSchemaResponseTransformer = (data: any) => {
    if (data.PropertyConditions) {
        data.PropertyConditions = data.PropertyConditions.map((item: any) => {
            return conditionsPropertyConditionSchemaResponseTransformer(item);
        });
    }
    if (data.PostbackActions) {
        data.PostbackActions = data.PostbackActions.map((item: any) => {
            return actionsPostbackActionSchemaResponseTransformer(item);
        });
    }
    if (data.TitleButton) {
        data.TitleButton = editorsEditorButtonItemSchemaResponseTransformer(data.TitleButton);
    }
    if (data.EditorItems) {
        data.EditorItems = data.EditorItems.map((item: any) => {
            return editorsEditorBaseSchemaResponseTransformer(item);
        });
    }
    if (data.EditorType) {
        data.EditorType = commonEditorTypesSchemaResponseTransformer(data.EditorType);
    }
    return data;
};

const conditionsPropertyConditionSchemaResponseTransformer = (data: any) => {
    if (data.ConditionType) {
        data.ConditionType = conditionsPropertyConditionTypeSchemaResponseTransformer(data.ConditionType);
    }
    if (data.SimpleCondition) {
        data.SimpleCondition = attributesSimpleConditionSchemaResponseTransformer(data.SimpleCondition);
    }
    if (data.ValueCondition) {
        data.ValueCondition = attributesValueConditionSchemaResponseTransformer(data.ValueCondition);
    }
    return data;
};

const editorsEditorButtonItemSchemaResponseTransformer = (data: any) => {
    if (data.EditorType) {
        data.EditorType = commonEditorTypesSchemaResponseTransformer(data.EditorType);
    }
    return data;
};

const editorsEditorBaseSchemaResponseTransformer = (data: any) => {
    if (data.EditorType) {
        data.EditorType = commonEditorTypesSchemaResponseTransformer(data.EditorType);
    }
    return data;
};

export const getEncodingFulltonemapoptionsResponseTransformer = async (data: any): Promise<GetEncodingFulltonemapoptionsResponse> => {
    data = editObjectContainerSchemaResponseTransformer(data);
    return data;
};

export const getEncodingPublictonemapoptionsResponseTransformer = async (data: any): Promise<GetEncodingPublictonemapoptionsResponse> => {
    data = editObjectContainerSchemaResponseTransformer(data);
    return data;
};

export const getEncodingSubtitleoptionsResponseTransformer = async (data: any): Promise<GetEncodingSubtitleoptionsResponse> => {
    data = editObjectContainerSchemaResponseTransformer(data);
    return data;
};

export const getEncodingFfmpegoptionsResponseTransformer = async (data: any): Promise<GetEncodingFfmpegoptionsResponse> => {
    data = editObjectContainerSchemaResponseTransformer(data);
    return data;
};

export const getEncodingCodecparametersResponseTransformer = async (data: any): Promise<GetEncodingCodecparametersResponse> => {
    data = editObjectContainerSchemaResponseTransformer(data);
    return data;
};

export const getEnvironmentDefaultdirectorybrowserResponseTransformer = async (data: any): Promise<GetEnvironmentDefaultdirectorybrowserResponse> => {
    data = defaultDirectoryBrowserInfoSchemaResponseTransformer(data);
    return data;
};

const ioFileSystemEntryInfoSchemaResponseTransformer = (data: any) => {
    if (data.Type) {
        data.Type = ioFileSystemEntryTypeSchemaResponseTransformer(data.Type);
    }
    return data;
};

export const getEnvironmentDirectorycontentsResponseTransformer = async (data: any): Promise<GetEnvironmentDirectorycontentsResponse> => {
    data = data.map((item: any) => {
        return ioFileSystemEntryInfoSchemaResponseTransformer(item);
    });
    return data;
};

export const postEnvironmentDirectorycontentsResponseTransformer = async (data: any): Promise<PostEnvironmentDirectorycontentsResponse> => {
    data = data.map((item: any) => {
        return ioFileSystemEntryInfoSchemaResponseTransformer(item);
    });
    return data;
};

export const getEnvironmentNetworksharesResponseTransformer = async (data: any): Promise<GetEnvironmentNetworksharesResponse> => {
    data = data.map((item: any) => {
        return ioFileSystemEntryInfoSchemaResponseTransformer(item);
    });
    return data;
};

export const getEnvironmentDrivesResponseTransformer = async (data: any): Promise<GetEnvironmentDrivesResponse> => {
    data = data.map((item: any) => {
        return ioFileSystemEntryInfoSchemaResponseTransformer(item);
    });
    return data;
};

export const getEnvironmentNetworkdevicesResponseTransformer = async (data: any): Promise<GetEnvironmentNetworkdevicesResponse> => {
    data = data.map((item: any) => {
        return ioFileSystemEntryInfoSchemaResponseTransformer(item);
    });
    return data;
};

export const getGamegenresByNameResponseTransformer = async (data: any): Promise<GetGamegenresByNameResponse> => {
    data = baseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getGenresByNameResponseTransformer = async (data: any): Promise<GetGenresByNameResponse> => {
    data = baseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getItemsPrefixesResponseTransformer = async (data: any): Promise<GetItemsPrefixesResponse> => {
    data = data.map((item: any) => {
        return nameValuePairSchemaResponseTransformer(item);
    });
    return data;
};

export const getItemsCountsResponseTransformer = async (data: any): Promise<GetItemsCountsResponse> => {
    data = itemCountsSchemaResponseTransformer(data);
    return data;
};

const persistenceIntroDebugInfoSchemaResponseTransformer = (data: any) => {
    if (data.Id) {
        data.Id = BigInt(data.Id.toString());
    }
    if (data.Start) {
        data.Start = BigInt(data.Start.toString());
    }
    if (data.End) {
        data.End = BigInt(data.End.toString());
    }
    return data;
};

export const getItemsIntrosResponseTransformer = async (data: any): Promise<GetItemsIntrosResponse> => {
    data = data.map((item: any) => {
        return persistenceIntroDebugInfoSchemaResponseTransformer(item);
    });
    return data;
};

const libraryOptionsResultSchemaResponseTransformer = (data: any) => {
    if (data.MetadataSavers) {
        data.MetadataSavers = data.MetadataSavers.map((item: any) => {
            return libraryOptionInfoSchemaResponseTransformer(item);
        });
    }
    if (data.MetadataReaders) {
        data.MetadataReaders = data.MetadataReaders.map((item: any) => {
            return libraryOptionInfoSchemaResponseTransformer(item);
        });
    }
    if (data.SubtitleFetchers) {
        data.SubtitleFetchers = data.SubtitleFetchers.map((item: any) => {
            return libraryOptionInfoSchemaResponseTransformer(item);
        });
    }
    if (data.LyricsFetchers) {
        data.LyricsFetchers = data.LyricsFetchers.map((item: any) => {
            return libraryOptionInfoSchemaResponseTransformer(item);
        });
    }
    if (data.TypeOptions) {
        data.TypeOptions = data.TypeOptions.map((item: any) => {
            return libraryTypeOptionsSchemaResponseTransformer(item);
        });
    }
    if (data.DefaultLibraryOptions) {
        data.DefaultLibraryOptions = libraryOptionsSchemaResponseTransformer(data.DefaultLibraryOptions);
    }
    return data;
};

const libraryOptionInfoSchemaResponseTransformer = (data: any) => {
    if (data.Features) {
        data.Features = data.Features.map((item: any) => {
            return metadataFeaturesSchemaResponseTransformer(item);
        });
    }
    return data;
};

const libraryTypeOptionsSchemaResponseTransformer = (data: any) => {
    if (data.MetadataFetchers) {
        data.MetadataFetchers = data.MetadataFetchers.map((item: any) => {
            return libraryOptionInfoSchemaResponseTransformer(item);
        });
    }
    if (data.ImageFetchers) {
        data.ImageFetchers = data.ImageFetchers.map((item: any) => {
            return libraryOptionInfoSchemaResponseTransformer(item);
        });
    }
    if (data.SupportedImageTypes) {
        data.SupportedImageTypes = data.SupportedImageTypes.map((item: any) => {
            return imageTypeSchemaResponseTransformer(item);
        });
    }
    if (data.DefaultImageOptions) {
        data.DefaultImageOptions = data.DefaultImageOptions.map((item: any) => {
            return imageOptionSchemaResponseTransformer(item);
        });
    }
    return data;
};

const imageOptionSchemaResponseTransformer = (data: any) => {
    if (data.Type) {
        data.Type = imageTypeSchemaResponseTransformer(data.Type);
    }
    return data;
};

const libraryOptionsSchemaResponseTransformer = (data: any) => {
    if (data.PathInfos) {
        data.PathInfos = data.PathInfos.map((item: any) => {
            return mediaPathInfoSchemaResponseTransformer(item);
        });
    }
    if (data.TypeOptions) {
        data.TypeOptions = data.TypeOptions.map((item: any) => {
            return typeOptionsSchemaResponseTransformer(item);
        });
    }
    return data;
};

const typeOptionsSchemaResponseTransformer = (data: any) => {
    if (data.ImageOptions) {
        data.ImageOptions = data.ImageOptions.map((item: any) => {
            return imageOptionSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getLibrariesAvailableoptionsResponseTransformer = async (data: any): Promise<GetLibrariesAvailableoptionsResponse> => {
    data = libraryOptionsResultSchemaResponseTransformer(data);
    return data;
};

const libraryMediaFolderSchemaResponseTransformer = (data: any) => {
    if (data.SubFolders) {
        data.SubFolders = data.SubFolders.map((item: any) => {
            return librarySubFolderSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getLibrarySelectablemediafoldersResponseTransformer = async (data: any): Promise<GetLibrarySelectablemediafoldersResponse> => {
    data = data.map((item: any) => {
        return libraryMediaFolderSchemaResponseTransformer(item);
    });
    return data;
};

export const getLibraryMediafoldersResponseTransformer = async (data: any): Promise<GetLibraryMediafoldersResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

const liveStreamResponseSchemaResponseTransformer = (data: any) => {
    if (data.MediaSource) {
        data.MediaSource = mediaSourceInfoSchemaResponseTransformer(data.MediaSource);
    }
    return data;
};

export const postLivestreamsOpenResponseTransformer = async (data: any): Promise<PostLivestreamsOpenResponse> => {
    data = liveStreamResponseSchemaResponseTransformer(data);
    return data;
};

export const getLivetvChanneltagsResponseTransformer = async (data: any): Promise<GetLivetvChanneltagsResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getLivetvFolderResponseTransformer = async (data: any): Promise<GetLivetvFolderResponse> => {
    data = baseItemDtoSchemaResponseTransformer(data);
    return data;
};

const liveTvListingsProviderInfoSchemaResponseTransformer = (data: any) => {
    if (data.ChannelMappings) {
        data.ChannelMappings = data.ChannelMappings.map((item: any) => {
            return nameValuePairSchemaResponseTransformer(item);
        });
    }
    if (data.TvgShiftTicks) {
        data.TvgShiftTicks = BigInt(data.TvgShiftTicks.toString());
    }
    return data;
};

export const getLivetvListingprovidersResponseTransformer = async (data: any): Promise<GetLivetvListingprovidersResponse> => {
    data = data.map((item: any) => {
        return liveTvListingsProviderInfoSchemaResponseTransformer(item);
    });
    return data;
};

export const postLivetvListingprovidersResponseTransformer = async (data: any): Promise<PostLivetvListingprovidersResponse> => {
    data = liveTvListingsProviderInfoSchemaResponseTransformer(data);
    return data;
};

export const getLivetvTunerhostsResponseTransformer = async (data: any): Promise<GetLivetvTunerhostsResponse> => {
    data = data.map((item: any) => {
        return liveTvTunerHostInfoSchemaResponseTransformer(item);
    });
    return data;
};

export const postLivetvTunerhostsResponseTransformer = async (data: any): Promise<PostLivetvTunerhostsResponse> => {
    data = liveTvTunerHostInfoSchemaResponseTransformer(data);
    return data;
};

export const getLivetvInfoResponseTransformer = async (data: any): Promise<GetLivetvInfoResponse> => {
    data = liveTvLiveTvInfoSchemaResponseTransformer(data);
    return data;
};

const queryResultApiEpgRowSchemaResponseTransformer = (data: any) => {
    if (data.Items) {
        data.Items = data.Items.map((item: any) => {
            return apiEpgRowSchemaResponseTransformer(item);
        });
    }
    return data;
};

const apiEpgRowSchemaResponseTransformer = (data: any) => {
    if (data.Channel) {
        data.Channel = baseItemDtoSchemaResponseTransformer(data.Channel);
    }
    if (data.Programs) {
        data.Programs = data.Programs.map((item: any) => {
            return baseItemDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getLivetvEpgResponseTransformer = async (data: any): Promise<GetLivetvEpgResponse> => {
    data = queryResultApiEpgRowSchemaResponseTransformer(data);
    return data;
};

export const getLivetvChannelsResponseTransformer = async (data: any): Promise<GetLivetvChannelsResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

const queryResultLiveTvTimerInfoDtoSchemaResponseTransformer = (data: any) => {
    if (data.Items) {
        data.Items = data.Items.map((item: any) => {
            return liveTvTimerInfoDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

const liveTvTimerInfoDtoSchemaResponseTransformer = (data: any) => {
    if (data.Status) {
        data.Status = liveTvRecordingStatusSchemaResponseTransformer(data.Status);
    }
    if (data.RunTimeTicks) {
        data.RunTimeTicks = BigInt(data.RunTimeTicks.toString());
    }
    if (data.ProgramInfo) {
        data.ProgramInfo = baseItemDtoSchemaResponseTransformer(data.ProgramInfo);
    }
    if (data.TimerType) {
        data.TimerType = liveTvTimerTypeSchemaResponseTransformer(data.TimerType);
    }
    if (data.StartDate) {
        data.StartDate = new Date(data.StartDate);
    }
    if (data.EndDate) {
        data.EndDate = new Date(data.EndDate);
    }
    if (data.KeepUntil) {
        data.KeepUntil = liveTvKeepUntilSchemaResponseTransformer(data.KeepUntil);
    }
    return data;
};

export const getLivetvTimersResponseTransformer = async (data: any): Promise<GetLivetvTimersResponse> => {
    data = queryResultLiveTvTimerInfoDtoSchemaResponseTransformer(data);
    return data;
};

const queryResultLiveTvSeriesTimerInfoDtoSchemaResponseTransformer = (data: any) => {
    if (data.Items) {
        data.Items = data.Items.map((item: any) => {
            return liveTvSeriesTimerInfoDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

const liveTvSeriesTimerInfoDtoSchemaResponseTransformer = (data: any) => {
    if (data.Days) {
        data.Days = data.Days.map((item: any) => {
            return dayOfWeekSchemaResponseTransformer(item);
        });
    }
    if (data.Keywords) {
        data.Keywords = data.Keywords.map((item: any) => {
            return liveTvKeywordInfoSchemaResponseTransformer(item);
        });
    }
    if (data.TimerType) {
        data.TimerType = liveTvTimerTypeSchemaResponseTransformer(data.TimerType);
    }
    if (data.StartDate) {
        data.StartDate = new Date(data.StartDate);
    }
    if (data.EndDate) {
        data.EndDate = new Date(data.EndDate);
    }
    if (data.KeepUntil) {
        data.KeepUntil = liveTvKeepUntilSchemaResponseTransformer(data.KeepUntil);
    }
    return data;
};

const liveTvKeywordInfoSchemaResponseTransformer = (data: any) => {
    if (data.KeywordType) {
        data.KeywordType = liveTvKeywordTypeSchemaResponseTransformer(data.KeywordType);
    }
    return data;
};

export const getLivetvSeriestimersResponseTransformer = async (data: any): Promise<GetLivetvSeriestimersResponse> => {
    data = queryResultLiveTvSeriesTimerInfoDtoSchemaResponseTransformer(data);
    return data;
};

export const postLivetvSeriestimersResponseTransformer = async (data: any): Promise<PostLivetvSeriestimersResponse> => {
    data = liveTvSeriesTimerInfoDtoSchemaResponseTransformer(data);
    return data;
};

const liveTvGuideInfoSchemaResponseTransformer = (data: any) => {
    if (data.StartDate) {
        data.StartDate = new Date(data.StartDate);
    }
    if (data.EndDate) {
        data.EndDate = new Date(data.EndDate);
    }
    return data;
};

export const getLivetvGuideinfoResponseTransformer = async (data: any): Promise<GetLivetvGuideinfoResponse> => {
    data = liveTvGuideInfoSchemaResponseTransformer(data);
    return data;
};

const apiAvailableRecordingOptionsSchemaResponseTransformer = (data: any) => {
    if (data.RecordingFolders) {
        data.RecordingFolders = data.RecordingFolders.map((item: any) => {
            return apiNameIdDescriptionPairSchemaResponseTransformer(item);
        });
    }
    if (data.MovieRecordingFolders) {
        data.MovieRecordingFolders = data.MovieRecordingFolders.map((item: any) => {
            return apiNameIdDescriptionPairSchemaResponseTransformer(item);
        });
    }
    if (data.SeriesRecordingFolders) {
        data.SeriesRecordingFolders = data.SeriesRecordingFolders.map((item: any) => {
            return apiNameIdDescriptionPairSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getLivetvAvailablerecordingoptionsResponseTransformer = async (data: any): Promise<GetLivetvAvailablerecordingoptionsResponse> => {
    data = apiAvailableRecordingOptionsSchemaResponseTransformer(data);
    return data;
};

export const getLocalizationParentalratingsResponseTransformer = async (data: any): Promise<GetLocalizationParentalratingsResponse> => {
    data = data.map((item: any) => {
        return parentalRatingSchemaResponseTransformer(item);
    });
    return data;
};

export const getLocalizationOptionsResponseTransformer = async (data: any): Promise<GetLocalizationOptionsResponse> => {
    data = data.map((item: any) => {
        return globalizationLocalizatonOptionSchemaResponseTransformer(item);
    });
    return data;
};

export const getLocalizationCountriesResponseTransformer = async (data: any): Promise<GetLocalizationCountriesResponse> => {
    data = data.map((item: any) => {
        return globalizationCountryInfoSchemaResponseTransformer(item);
    });
    return data;
};

export const getLocalizationCulturesResponseTransformer = async (data: any): Promise<GetLocalizationCulturesResponse> => {
    data = data.map((item: any) => {
        return globalizationCultureDtoSchemaResponseTransformer(item);
    });
    return data;
};

const recommendationDtoSchemaResponseTransformer = (data: any) => {
    if (data.Items) {
        data.Items = data.Items.map((item: any) => {
            return baseItemDtoSchemaResponseTransformer(item);
        });
    }
    if (data.RecommendationType) {
        data.RecommendationType = recommendationTypeSchemaResponseTransformer(data.RecommendationType);
    }
    if (data.CategoryId) {
        data.CategoryId = BigInt(data.CategoryId.toString());
    }
    return data;
};

export const getMoviesRecommendationsResponseTransformer = async (data: any): Promise<GetMoviesRecommendationsResponse> => {
    data = data.map((item: any) => {
        return recommendationDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getMusicgenresByNameResponseTransformer = async (data: any): Promise<GetMusicgenresByNameResponse> => {
    data = baseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getMusicgenresInstantmixResponseTransformer = async (data: any): Promise<GetMusicgenresInstantmixResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

const notificationCategoryInfoSchemaResponseTransformer = (data: any) => {
    if (data.Events) {
        data.Events = data.Events.map((item: any) => {
            return notificationTypeInfoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getNotificationsTypesResponseTransformer = async (data: any): Promise<GetNotificationsTypesResponse> => {
    data = data.map((item: any) => {
        return notificationCategoryInfoSchemaResponseTransformer(item);
    });
    return data;
};

export const getPackagesUpdatesResponseTransformer = async (data: any): Promise<GetPackagesUpdatesResponse> => {
    data = data.map((item: any) => {
        return packageVersionInfoSchemaResponseTransformer(item);
    });
    return data;
};

export const getPackagesByNameResponseTransformer = async (data: any): Promise<GetPackagesByNameResponse> => {
    data = packageInfoSchemaResponseTransformer(data);
    return data;
};

export const getPersonsByNameResponseTransformer = async (data: any): Promise<GetPersonsByNameResponse> => {
    data = baseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getScheduledtasksByIdResponseTransformer = async (data: any): Promise<GetScheduledtasksByIdResponse> => {
    data = taskInfoSchemaResponseTransformer(data);
    return data;
};

export const getSessionsPlayqueueResponseTransformer = async (data: any): Promise<GetSessionsPlayqueueResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getShowsNextupResponseTransformer = async (data: any): Promise<GetShowsNextupResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getStudiosByNameResponseTransformer = async (data: any): Promise<GetStudiosByNameResponse> => {
    data = baseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getSyncTargetsResponseTransformer = async (data: any): Promise<GetSyncTargetsResponse> => {
    data = data.map((item: any) => {
        return syncTargetSchemaResponseTransformer(item);
    });
    return data;
};

const queryResultSyncJobSchemaResponseTransformer = (data: any) => {
    if (data.Items) {
        data.Items = data.Items.map((item: any) => {
            return syncJobSchemaResponseTransformer(item);
        });
    }
    return data;
};

const syncJobSchemaResponseTransformer = (data: any) => {
    if (data.Id) {
        data.Id = BigInt(data.Id.toString());
    }
    if (data.InternalTargetId) {
        data.InternalTargetId = BigInt(data.InternalTargetId.toString());
    }
    if (data.Category) {
        data.Category = syncCategorySchemaResponseTransformer(data.Category);
    }
    if (data.ParentId) {
        data.ParentId = BigInt(data.ParentId.toString());
    }
    if (data.Status) {
        data.Status = syncJobStatusSchemaResponseTransformer(data.Status);
    }
    if (data.UserId) {
        data.UserId = BigInt(data.UserId.toString());
    }
    if (data.RequestedItemIds) {
        data.RequestedItemIds = data.RequestedItemIds.map((item: any) => {
            BigInt(item.toString());
            return item;
        });
    }
    if (data.ItemId) {
        data.ItemId = BigInt(data.ItemId.toString());
    }
    if (data.DateCreated) {
        data.DateCreated = new Date(data.DateCreated);
    }
    if (data.DateLastModified) {
        data.DateLastModified = new Date(data.DateLastModified);
    }
    return data;
};

export const getSyncJobsResponseTransformer = async (data: any): Promise<GetSyncJobsResponse> => {
    data = queryResultSyncJobSchemaResponseTransformer(data);
    return data;
};

const syncJobCreationResultSchemaResponseTransformer = (data: any) => {
    if (data.Job) {
        data.Job = syncJobSchemaResponseTransformer(data.Job);
    }
    if (data.JobItems) {
        data.JobItems = data.JobItems.map((item: any) => {
            return syncJobItemSchemaResponseTransformer(item);
        });
    }
    return data;
};

const syncJobItemSchemaResponseTransformer = (data: any) => {
    if (data.Id) {
        data.Id = BigInt(data.Id.toString());
    }
    if (data.JobId) {
        data.JobId = BigInt(data.JobId.toString());
    }
    if (data.ItemId) {
        data.ItemId = BigInt(data.ItemId.toString());
    }
    if (data.MediaSource) {
        data.MediaSource = mediaSourceInfoSchemaResponseTransformer(data.MediaSource);
    }
    if (data.InternalTargetId) {
        data.InternalTargetId = BigInt(data.InternalTargetId.toString());
    }
    if (data.Status) {
        data.Status = syncJobItemStatusSchemaResponseTransformer(data.Status);
    }
    if (data.DateCreated) {
        data.DateCreated = new Date(data.DateCreated);
    }
    if (data.AdditionalFiles) {
        data.AdditionalFiles = data.AdditionalFiles.map((item: any) => {
            return itemFileInfoSchemaResponseTransformer(item);
        });
    }
    return data;
};

const itemFileInfoSchemaResponseTransformer = (data: any) => {
    if (data.Type) {
        data.Type = itemFileTypeSchemaResponseTransformer(data.Type);
    }
    if (data.ImageType) {
        data.ImageType = imageTypeSchemaResponseTransformer(data.ImageType);
    }
    return data;
};

export const postSyncJobsResponseTransformer = async (data: any): Promise<PostSyncJobsResponse> => {
    data = syncJobCreationResultSchemaResponseTransformer(data);
    return data;
};

const queryResultSyncJobItemSchemaResponseTransformer = (data: any) => {
    if (data.Items) {
        data.Items = data.Items.map((item: any) => {
            return syncJobItemSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getSyncJobitemsResponseTransformer = async (data: any): Promise<GetSyncJobitemsResponse> => {
    data = queryResultSyncJobItemSchemaResponseTransformer(data);
    return data;
};

const syncDialogOptionsSchemaResponseTransformer = (data: any) => {
    if (data.Targets) {
        data.Targets = data.Targets.map((item: any) => {
            return syncTargetSchemaResponseTransformer(item);
        });
    }
    if (data.Options) {
        data.Options = data.Options.map((item: any) => {
            return syncJobOptionSchemaResponseTransformer(item);
        });
    }
    if (data.QualityOptions) {
        data.QualityOptions = data.QualityOptions.map((item: any) => {
            return syncQualityOptionSchemaResponseTransformer(item);
        });
    }
    if (data.ProfileOptions) {
        data.ProfileOptions = data.ProfileOptions.map((item: any) => {
            return syncProfileOptionSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getSyncOptionsResponseTransformer = async (data: any): Promise<GetSyncOptionsResponse> => {
    data = syncDialogOptionsSchemaResponseTransformer(data);
    return data;
};

export const postSyncDataResponseTransformer = async (data: any): Promise<PostSyncDataResponse> => {
    data = syncDataResponseSchemaResponseTransformer(data);
    return data;
};

const serverConfigurationSchemaResponseTransformer = (data: any) => {
    if (data.ImageSavingConvention) {
        data.ImageSavingConvention = imageSavingConventionSchemaResponseTransformer(data.ImageSavingConvention);
    }
    if (data.PreferredDetectedRemoteAddressFamily) {
        data.PreferredDetectedRemoteAddressFamily = netSocketsAddressFamilySchemaResponseTransformer(data.PreferredDetectedRemoteAddressFamily);
    }
    if (data.PathSubstitutions) {
        data.PathSubstitutions = data.PathSubstitutions.map((item: any) => {
            return pathSubstitutionSchemaResponseTransformer(item);
        });
    }
    if (data.ProxyHeaderMode) {
        data.ProxyHeaderMode = proxyHeaderModeSchemaResponseTransformer(data.ProxyHeaderMode);
    }
    return data;
};

export const getSystemConfigurationResponseTransformer = async (data: any): Promise<GetSystemConfigurationResponse> => {
    data = serverConfigurationSchemaResponseTransformer(data);
    return data;
};

export const getSystemReleasenotesResponseTransformer = async (data: any): Promise<GetSystemReleasenotesResponse> => {
    data = packageVersionInfoSchemaResponseTransformer(data);
    return data;
};

export const getSystemWakeonlaninfoResponseTransformer = async (data: any): Promise<GetSystemWakeonlaninfoResponse> => {
    data = data.map((item: any) => {
        return wakeOnLanInfoSchemaResponseTransformer(item);
    });
    return data;
};

const systemInfoSchemaResponseTransformer = (data: any) => {
    if (data.SystemUpdateLevel) {
        data.SystemUpdateLevel = packageVersionClassSchemaResponseTransformer(data.SystemUpdateLevel);
    }
    if (data.CompletedInstallations) {
        data.CompletedInstallations = data.CompletedInstallations.map((item: any) => {
            return installationInfoSchemaResponseTransformer(item);
        });
    }
    if (data.WakeOnLanInfo) {
        data.WakeOnLanInfo = data.WakeOnLanInfo.map((item: any) => {
            return wakeOnLanInfoSchemaResponseTransformer(item);
        });
    }
    return data;
};

const installationInfoSchemaResponseTransformer = (data: any) => {
    if (data.UpdateClass) {
        data.UpdateClass = packageVersionClassSchemaResponseTransformer(data.UpdateClass);
    }
    return data;
};

export const getSystemInfoResponseTransformer = async (data: any): Promise<GetSystemInfoResponse> => {
    data = systemInfoSchemaResponseTransformer(data);
    return data;
};

export const getSystemEndpointResponseTransformer = async (data: any): Promise<GetSystemEndpointResponse> => {
    data = netEndPointInfoSchemaResponseTransformer(data);
    return data;
};

const uiViewInfoSchemaResponseTransformer = (data: any) => {
    if (data.ViewType) {
        data.ViewType = enumsUiViewTypeSchemaResponseTransformer(data.ViewType);
    }
    if (data.EditObjectContainer) {
        data.EditObjectContainer = genericEditIEditObjectContainerSchemaResponseTransformer(data.EditObjectContainer);
    }
    if (data.Commands) {
        data.Commands = data.Commands.map((item: any) => {
            return uiCommandSchemaResponseTransformer(item);
        });
    }
    if (data.TabPageInfos) {
        data.TabPageInfos = data.TabPageInfos.map((item: any) => {
            return uiTabPageInfoSchemaResponseTransformer(item);
        });
    }
    return data;
};

const uiCommandSchemaResponseTransformer = (data: any) => {
    if (data.CommandType) {
        data.CommandType = enumsUiCommandTypeSchemaResponseTransformer(data.CommandType);
    }
    return data;
};

export const getUiViewResponseTransformer = async (data: any): Promise<GetUiViewResponse> => {
    data = uiViewInfoSchemaResponseTransformer(data);
    return data;
};

export const postUiCommandResponseTransformer = async (data: any): Promise<PostUiCommandResponse> => {
    data = uiViewInfoSchemaResponseTransformer(data);
    return data;
};

const userDtoSchemaResponseTransformer = (data: any) => {
    if (data.DateCreated) {
        data.DateCreated = new Date(data.DateCreated);
    }
    if (data.ConnectLinkType) {
        data.ConnectLinkType = connectUserLinkTypeSchemaResponseTransformer(data.ConnectLinkType);
    }
    if (data.LastLoginDate) {
        data.LastLoginDate = new Date(data.LastLoginDate);
    }
    if (data.LastActivityDate) {
        data.LastActivityDate = new Date(data.LastActivityDate);
    }
    if (data.Configuration) {
        data.Configuration = userConfigurationSchemaResponseTransformer(data.Configuration);
    }
    if (data.Policy) {
        data.Policy = userPolicySchemaResponseTransformer(data.Policy);
    }
    if (data.UserItemShareLevel) {
        data.UserItemShareLevel = userItemShareLevelSchemaResponseTransformer(data.UserItemShareLevel);
    }
    return data;
};

const userConfigurationSchemaResponseTransformer = (data: any) => {
    if (data.SubtitleMode) {
        data.SubtitleMode = subtitlePlaybackModeSchemaResponseTransformer(data.SubtitleMode);
    }
    if (data.IntroSkipMode) {
        data.IntroSkipMode = segmentSkipModeSchemaResponseTransformer(data.IntroSkipMode);
    }
    return data;
};

const userPolicySchemaResponseTransformer = (data: any) => {
    if (data.LockedOutDate) {
        data.LockedOutDate = BigInt(data.LockedOutDate.toString());
    }
    if (data.AccessSchedules) {
        data.AccessSchedules = data.AccessSchedules.map((item: any) => {
            return accessScheduleSchemaResponseTransformer(item);
        });
    }
    if (data.BlockUnratedItems) {
        data.BlockUnratedItems = data.BlockUnratedItems.map((item: any) => {
            return unratedItemSchemaResponseTransformer(item);
        });
    }
    return data;
};

const accessScheduleSchemaResponseTransformer = (data: any) => {
    if (data.DayOfWeek) {
        data.DayOfWeek = dynamicDayOfWeekSchemaResponseTransformer(data.DayOfWeek);
    }
    return data;
};

export const getUsersPublicResponseTransformer = async (data: any): Promise<GetUsersPublicResponse> => {
    data = data.map((item: any) => {
        return userDtoSchemaResponseTransformer(item);
    });
    return data;
};

const queryResultUserDtoSchemaResponseTransformer = (data: any) => {
    if (data.Items) {
        data.Items = data.Items.map((item: any) => {
            return userDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getUsersQueryResponseTransformer = async (data: any): Promise<GetUsersQueryResponse> => {
    data = queryResultUserDtoSchemaResponseTransformer(data);
    return data;
};

export const getUsersPrefixesResponseTransformer = async (data: any): Promise<GetUsersPrefixesResponse> => {
    data = data.map((item: any) => {
        return nameIdPairSchemaResponseTransformer(item);
    });
    return data;
};

export const getUsersItemaccessResponseTransformer = async (data: any): Promise<GetUsersItemaccessResponse> => {
    data = queryResultUserDtoSchemaResponseTransformer(data);
    return data;
};

export const getUsersByIdResponseTransformer = async (data: any): Promise<GetUsersByIdResponse> => {
    data = userDtoSchemaResponseTransformer(data);
    return data;
};

const authenticationAuthenticationResultSchemaResponseTransformer = (data: any) => {
    if (data.User) {
        data.User = userDtoSchemaResponseTransformer(data.User);
    }
    if (data.SessionInfo) {
        data.SessionInfo = sessionSessionInfoSchemaResponseTransformer(data.SessionInfo);
    }
    return data;
};

export const postUsersAuthenticatebynameResponseTransformer = async (data: any): Promise<PostUsersAuthenticatebynameResponse> => {
    data = authenticationAuthenticationResultSchemaResponseTransformer(data);
    return data;
};

export const postUsersNewResponseTransformer = async (data: any): Promise<PostUsersNewResponse> => {
    data = userDtoSchemaResponseTransformer(data);
    return data;
};

const forgotPasswordResultSchemaResponseTransformer = (data: any) => {
    if (data.Action) {
        data.Action = forgotPasswordActionSchemaResponseTransformer(data.Action);
    }
    if (data.PinExpirationDate) {
        data.PinExpirationDate = new Date(data.PinExpirationDate);
    }
    return data;
};

export const postUsersForgotpasswordResponseTransformer = async (data: any): Promise<PostUsersForgotpasswordResponse> => {
    data = forgotPasswordResultSchemaResponseTransformer(data);
    return data;
};

const apiConfigurationPageInfoSchemaResponseTransformer = (data: any) => {
    if (data.ConfigurationPageType) {
        data.ConfigurationPageType = pluginsConfigurationPageTypeSchemaResponseTransformer(data.ConfigurationPageType);
    }
    if (data.Plugin) {
        data.Plugin = commonPluginsIPluginSchemaResponseTransformer(data.Plugin);
    }
    return data;
};

const commonPluginsIPluginSchemaResponseTransformer = (data: any) => {
    if (data.Version) {
        data.Version = versionSchemaResponseTransformer(data.Version);
    }
    return data;
};

export const getWebConfigurationpagesResponseTransformer = async (data: any): Promise<GetWebConfigurationpagesResponse> => {
    data = data.map((item: any) => {
        return apiConfigurationPageInfoSchemaResponseTransformer(item);
    });
    return data;
};

export const getAlbumsByIdInstantmixResponseTransformer = async (data: any): Promise<GetAlbumsByIdInstantmixResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getAlbumsByIdSimilarResponseTransformer = async (data: any): Promise<GetAlbumsByIdSimilarResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getArtistsByIdSimilarResponseTransformer = async (data: any): Promise<GetArtistsByIdSimilarResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getDlnaProfilesByIdResponseTransformer = async (data: any): Promise<GetDlnaProfilesByIdResponse> => {
    data = dlnaProfilesDlnaProfileSchemaResponseTransformer(data);
    return data;
};

export const getDlnaProfilesDefaultResponseTransformer = async (data: any): Promise<GetDlnaProfilesDefaultResponse> => {
    data = dlnaProfilesDlnaProfileSchemaResponseTransformer(data);
    return data;
};

const videoCodecBaseSchemaResponseTransformer = (data: any) => {
    if (data.CodecDeviceInfo) {
        data.CodecDeviceInfo = commonInterfacesICodecDeviceInfoSchemaResponseTransformer(data.CodecDeviceInfo);
    }
    if (data.CodecKind) {
        data.CodecKind = codecKindsSchemaResponseTransformer(data.CodecKind);
    }
    if (data.VideoMediaType) {
        data.VideoMediaType = videoMediaTypesSchemaResponseTransformer(data.VideoMediaType);
    }
    if (data.MaxBitRate) {
        data.MaxBitRate = bitRateSchemaResponseTransformer(data.MaxBitRate);
    }
    if (data.SupportedColorFormats) {
        data.SupportedColorFormats = data.SupportedColorFormats.map((item: any) => {
            return colorFormatsSchemaResponseTransformer(item);
        });
    }
    if (data.ProfileAndLevelInformation) {
        data.ProfileAndLevelInformation = data.ProfileAndLevelInformation.map((item: any) => {
            return profileLevelInformationSchemaResponseTransformer(item);
        });
    }
    if (data.Direction) {
        data.Direction = codecDirectionsSchemaResponseTransformer(data.Direction);
    }
    if (data.SecondaryFramework) {
        data.SecondaryFramework = secondaryFrameworksSchemaResponseTransformer(data.SecondaryFramework);
    }
    return data;
};

const commonInterfacesICodecDeviceInfoSchemaResponseTransformer = (data: any) => {
    if (data.Capabilities) {
        data.Capabilities = commonInterfacesICodecDeviceCapabilitiesSchemaResponseTransformer(data.Capabilities);
    }
    if (data.DriverVersion) {
        data.DriverVersion = versionSchemaResponseTransformer(data.DriverVersion);
    }
    if (data.ApiVersion) {
        data.ApiVersion = versionSchemaResponseTransformer(data.ApiVersion);
    }
    if (data.HardwareContextFramework) {
        data.HardwareContextFramework = secondaryFrameworksSchemaResponseTransformer(data.HardwareContextFramework);
    }
    return data;
};

const bitRateSchemaResponseTransformer = (data: any) => {
    if (data.bps) {
        data.bps = BigInt(data.bps.toString());
    }
    return data;
};

const profileLevelInformationSchemaResponseTransformer = (data: any) => {
    if (data.Profile) {
        data.Profile = profileInformationSchemaResponseTransformer(data.Profile);
    }
    if (data.Level) {
        data.Level = levelInformationSchemaResponseTransformer(data.Level);
    }
    return data;
};

const levelInformationSchemaResponseTransformer = (data: any) => {
    if (data.MaxBitRate) {
        data.MaxBitRate = bitRateSchemaResponseTransformer(data.MaxBitRate);
    }
    if (data.ResolutionRates) {
        data.ResolutionRates = data.ResolutionRates.map((item: any) => {
            return resolutionWithRateSchemaResponseTransformer(item);
        });
    }
    return data;
};

const resolutionWithRateSchemaResponseTransformer = (data: any) => {
    if (data.Resolution) {
        data.Resolution = resolutionSchemaResponseTransformer(data.Resolution);
    }
    return data;
};

export const getEncodingCodecinformationVideoResponseTransformer = async (data: any): Promise<GetEncodingCodecinformationVideoResponse> => {
    data = data.map((item: any) => {
        return videoCodecBaseSchemaResponseTransformer(item);
    });
    return data;
};

export const getEncodingCodecconfigurationDefaultsResponseTransformer = async (data: any): Promise<GetEncodingCodecconfigurationDefaultsResponse> => {
    data = data.map((item: any) => {
        return codecConfigurationSchemaResponseTransformer(item);
    });
    return data;
};

export const getGamesByIdSimilarResponseTransformer = async (data: any): Promise<GetGamesByIdSimilarResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getItemsByIdExternalidinfosResponseTransformer = async (data: any): Promise<GetItemsByIdExternalidinfosResponse> => {
    data = data.map((item: any) => {
        return externalIdInfoSchemaResponseTransformer(item);
    });
    return data;
};

const remoteSearchResultSchemaResponseTransformer = (data: any) => {
    if (data.ProviderIds) {
        data.ProviderIds = providerIdDictionarySchemaResponseTransformer(data.ProviderIds);
    }
    if (data.PremiereDate) {
        data.PremiereDate = new Date(data.PremiereDate);
    }
    if (data.StartDate) {
        data.StartDate = new Date(data.StartDate);
    }
    if (data.EndDate) {
        data.EndDate = new Date(data.EndDate);
    }
    if (data.AlbumArtist) {
        data.AlbumArtist = remoteSearchResultSchemaResponseTransformer(data.AlbumArtist);
    }
    if (data.Artists) {
        data.Artists = data.Artists.map((item: any) => {
            return remoteSearchResultSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const postItemsRemotesearchTrailerResponseTransformer = async (data: any): Promise<PostItemsRemotesearchTrailerResponse> => {
    data = data.map((item: any) => {
        return remoteSearchResultSchemaResponseTransformer(item);
    });
    return data;
};

export const postItemsRemotesearchBookResponseTransformer = async (data: any): Promise<PostItemsRemotesearchBookResponse> => {
    data = data.map((item: any) => {
        return remoteSearchResultSchemaResponseTransformer(item);
    });
    return data;
};

export const postItemsRemotesearchMovieResponseTransformer = async (data: any): Promise<PostItemsRemotesearchMovieResponse> => {
    data = data.map((item: any) => {
        return remoteSearchResultSchemaResponseTransformer(item);
    });
    return data;
};

export const postItemsRemotesearchSeriesResponseTransformer = async (data: any): Promise<PostItemsRemotesearchSeriesResponse> => {
    data = data.map((item: any) => {
        return remoteSearchResultSchemaResponseTransformer(item);
    });
    return data;
};

export const postItemsRemotesearchGameResponseTransformer = async (data: any): Promise<PostItemsRemotesearchGameResponse> => {
    data = data.map((item: any) => {
        return remoteSearchResultSchemaResponseTransformer(item);
    });
    return data;
};

export const postItemsRemotesearchBoxsetResponseTransformer = async (data: any): Promise<PostItemsRemotesearchBoxsetResponse> => {
    data = data.map((item: any) => {
        return remoteSearchResultSchemaResponseTransformer(item);
    });
    return data;
};

export const postItemsRemotesearchMusicvideoResponseTransformer = async (data: any): Promise<PostItemsRemotesearchMusicvideoResponse> => {
    data = data.map((item: any) => {
        return remoteSearchResultSchemaResponseTransformer(item);
    });
    return data;
};

export const postItemsRemotesearchPersonResponseTransformer = async (data: any): Promise<PostItemsRemotesearchPersonResponse> => {
    data = data.map((item: any) => {
        return remoteSearchResultSchemaResponseTransformer(item);
    });
    return data;
};

export const postItemsRemotesearchMusicalbumResponseTransformer = async (data: any): Promise<PostItemsRemotesearchMusicalbumResponse> => {
    data = data.map((item: any) => {
        return remoteSearchResultSchemaResponseTransformer(item);
    });
    return data;
};

export const postItemsRemotesearchMusicartistResponseTransformer = async (data: any): Promise<PostItemsRemotesearchMusicartistResponse> => {
    data = data.map((item: any) => {
        return remoteSearchResultSchemaResponseTransformer(item);
    });
    return data;
};

const metadataEditorInfoSchemaResponseTransformer = (data: any) => {
    if (data.ParentalRatingOptions) {
        data.ParentalRatingOptions = data.ParentalRatingOptions.map((item: any) => {
            return parentalRatingSchemaResponseTransformer(item);
        });
    }
    if (data.Countries) {
        data.Countries = data.Countries.map((item: any) => {
            return globalizationCountryInfoSchemaResponseTransformer(item);
        });
    }
    if (data.Cultures) {
        data.Cultures = data.Cultures.map((item: any) => {
            return globalizationCultureDtoSchemaResponseTransformer(item);
        });
    }
    if (data.ExternalIdInfos) {
        data.ExternalIdInfos = data.ExternalIdInfos.map((item: any) => {
            return externalIdInfoSchemaResponseTransformer(item);
        });
    }
    if (data.PersonExternalIdInfos) {
        data.PersonExternalIdInfos = data.PersonExternalIdInfos.map((item: any) => {
            return externalIdInfoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getItemsByItemidMetadataeditorResponseTransformer = async (data: any): Promise<GetItemsByItemidMetadataeditorResponse> => {
    data = metadataEditorInfoSchemaResponseTransformer(data);
    return data;
};

export const getItemsByIdInstantmixResponseTransformer = async (data: any): Promise<GetItemsByIdInstantmixResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getItemsByIdDeleteinfoResponseTransformer = async (data: any): Promise<GetItemsByIdDeleteinfoResponse> => {
    data = libraryDeleteInfoSchemaResponseTransformer(data);
    return data;
};

export const getItemsByIdSimilarResponseTransformer = async (data: any): Promise<GetItemsByIdSimilarResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getItemsByIdAncestorsResponseTransformer = async (data: any): Promise<GetItemsByIdAncestorsResponse> => {
    data = data.map((item: any) => {
        return baseItemDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getItemsByIdCriticreviewsResponseTransformer = async (data: any): Promise<GetItemsByIdCriticreviewsResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

const allThemeMediaResultSchemaResponseTransformer = (data: any) => {
    if (data.ThemeVideosResult) {
        data.ThemeVideosResult = themeMediaResultSchemaResponseTransformer(data.ThemeVideosResult);
    }
    if (data.ThemeSongsResult) {
        data.ThemeSongsResult = themeMediaResultSchemaResponseTransformer(data.ThemeSongsResult);
    }
    if (data.SoundtrackSongsResult) {
        data.SoundtrackSongsResult = themeMediaResultSchemaResponseTransformer(data.SoundtrackSongsResult);
    }
    return data;
};

const themeMediaResultSchemaResponseTransformer = (data: any) => {
    if (data.OwnerId) {
        data.OwnerId = BigInt(data.OwnerId.toString());
    }
    if (data.Items) {
        data.Items = data.Items.map((item: any) => {
            return baseItemDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getItemsByIdThememediaResponseTransformer = async (data: any): Promise<GetItemsByIdThememediaResponse> => {
    data = allThemeMediaResultSchemaResponseTransformer(data);
    return data;
};

export const getItemsByIdThemesongsResponseTransformer = async (data: any): Promise<GetItemsByIdThemesongsResponse> => {
    data = themeMediaResultSchemaResponseTransformer(data);
    return data;
};

export const getItemsByIdThemevideosResponseTransformer = async (data: any): Promise<GetItemsByIdThemevideosResponse> => {
    data = themeMediaResultSchemaResponseTransformer(data);
    return data;
};

const imageInfoSchemaResponseTransformer = (data: any) => {
    if (data.ImageType) {
        data.ImageType = imageTypeSchemaResponseTransformer(data.ImageType);
    }
    if (data.Size) {
        data.Size = BigInt(data.Size.toString());
    }
    return data;
};

export const getItemsByIdImagesResponseTransformer = async (data: any): Promise<GetItemsByIdImagesResponse> => {
    data = data.map((item: any) => {
        return imageInfoSchemaResponseTransformer(item);
    });
    return data;
};

const remoteImageResultSchemaResponseTransformer = (data: any) => {
    if (data.Images) {
        data.Images = data.Images.map((item: any) => {
            return remoteImageInfoSchemaResponseTransformer(item);
        });
    }
    return data;
};

const remoteImageInfoSchemaResponseTransformer = (data: any) => {
    if (data.Type) {
        data.Type = imageTypeSchemaResponseTransformer(data.Type);
    }
    if (data.RatingType) {
        data.RatingType = ratingTypeSchemaResponseTransformer(data.RatingType);
    }
    return data;
};

export const getItemsByIdRemoteimagesResponseTransformer = async (data: any): Promise<GetItemsByIdRemoteimagesResponse> => {
    data = remoteImageResultSchemaResponseTransformer(data);
    return data;
};

const rokuMetadataApiThumbnailSetInfoSchemaResponseTransformer = (data: any) => {
    if (data.Thumbnails) {
        data.Thumbnails = data.Thumbnails.map((item: any) => {
            return rokuMetadataApiThumbnailInfoSchemaResponseTransformer(item);
        });
    }
    return data;
};

const rokuMetadataApiThumbnailInfoSchemaResponseTransformer = (data: any) => {
    if (data.PositionTicks) {
        data.PositionTicks = BigInt(data.PositionTicks.toString());
    }
    return data;
};

export const getItemsByIdThumbnailsetResponseTransformer = async (data: any): Promise<GetItemsByIdThumbnailsetResponse> => {
    data = rokuMetadataApiThumbnailSetInfoSchemaResponseTransformer(data);
    return data;
};

const playbackInfoResponseSchemaResponseTransformer = (data: any) => {
    if (data.MediaSources) {
        data.MediaSources = data.MediaSources.map((item: any) => {
            return mediaSourceInfoSchemaResponseTransformer(item);
        });
    }
    if (data.ErrorCode) {
        data.ErrorCode = playbackErrorCodeSchemaResponseTransformer(data.ErrorCode);
    }
    return data;
};

export const getItemsByIdPlaybackinfoResponseTransformer = async (data: any): Promise<GetItemsByIdPlaybackinfoResponse> => {
    data = playbackInfoResponseSchemaResponseTransformer(data);
    return data;
};

export const postItemsByIdPlaybackinfoResponseTransformer = async (data: any): Promise<PostItemsByIdPlaybackinfoResponse> => {
    data = playbackInfoResponseSchemaResponseTransformer(data);
    return data;
};

const queryResultVirtualFolderInfoSchemaResponseTransformer = (data: any) => {
    if (data.Items) {
        data.Items = data.Items.map((item: any) => {
            return virtualFolderInfoSchemaResponseTransformer(item);
        });
    }
    return data;
};

const virtualFolderInfoSchemaResponseTransformer = (data: any) => {
    if (data.LibraryOptions) {
        data.LibraryOptions = libraryOptionsSchemaResponseTransformer(data.LibraryOptions);
    }
    return data;
};

export const getLibraryVirtualfoldersQueryResponseTransformer = async (data: any): Promise<GetLibraryVirtualfoldersQueryResponse> => {
    data = queryResultVirtualFolderInfoSchemaResponseTransformer(data);
    return data;
};

export const getLivetvProgramsByIdResponseTransformer = async (data: any): Promise<GetLivetvProgramsByIdResponse> => {
    data = baseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getLivetvTunerhostsTypesResponseTransformer = async (data: any): Promise<GetLivetvTunerhostsTypesResponse> => {
    data = data.map((item: any) => {
        return nameIdPairSchemaResponseTransformer(item);
    });
    return data;
};

export const getLivetvManageChannelsResponseTransformer = async (data: any): Promise<GetLivetvManageChannelsResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getLivetvChanneltagsPrefixesResponseTransformer = async (data: any): Promise<GetLivetvChanneltagsPrefixesResponse> => {
    data = data.map((item: any) => {
        return apiTagItemSchemaResponseTransformer(item);
    });
    return data;
};

export const getLivetvRecordingsFoldersResponseTransformer = async (data: any): Promise<GetLivetvRecordingsFoldersResponse> => {
    data = data.map((item: any) => {
        return baseItemDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getLivetvTunersDiscvoverResponseTransformer = async (data: any): Promise<GetLivetvTunersDiscvoverResponse> => {
    data = data.map((item: any) => {
        return liveTvTunerHostInfoSchemaResponseTransformer(item);
    });
    return data;
};

export const getLivetvTunersDiscoverResponseTransformer = async (data: any): Promise<GetLivetvTunersDiscoverResponse> => {
    data = data.map((item: any) => {
        return liveTvTunerHostInfoSchemaResponseTransformer(item);
    });
    return data;
};

export const getLivetvListingprovidersDefaultResponseTransformer = async (data: any): Promise<GetLivetvListingprovidersDefaultResponse> => {
    data = liveTvListingsProviderInfoSchemaResponseTransformer(data);
    return data;
};

export const getLivetvListingprovidersLineupsResponseTransformer = async (data: any): Promise<GetLivetvListingprovidersLineupsResponse> => {
    data = data.map((item: any) => {
        return nameIdPairSchemaResponseTransformer(item);
    });
    return data;
};

export const getLivetvChannelsByIdResponseTransformer = async (data: any): Promise<GetLivetvChannelsByIdResponse> => {
    data = baseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getLivetvProgramsRecommendedResponseTransformer = async (data: any): Promise<GetLivetvProgramsRecommendedResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getLivetvRecordingsSeriesResponseTransformer = async (data: any): Promise<GetLivetvRecordingsSeriesResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getLivetvRecordingsByIdResponseTransformer = async (data: any): Promise<GetLivetvRecordingsByIdResponse> => {
    data = baseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getLivetvTimersByIdResponseTransformer = async (data: any): Promise<GetLivetvTimersByIdResponse> => {
    data = liveTvTimerInfoDtoSchemaResponseTransformer(data);
    return data;
};

export const getLivetvSeriestimersByIdResponseTransformer = async (data: any): Promise<GetLivetvSeriestimersByIdResponse> => {
    data = liveTvTimerInfoDtoSchemaResponseTransformer(data);
    return data;
};

export const getLivetvTimersDefaultsResponseTransformer = async (data: any): Promise<GetLivetvTimersDefaultsResponse> => {
    data = liveTvSeriesTimerInfoDtoSchemaResponseTransformer(data);
    return data;
};

export const getLivetvRecordingsGroupsResponseTransformer = async (data: any): Promise<GetLivetvRecordingsGroupsResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getLivetvListingprovidersAvailableResponseTransformer = async (data: any): Promise<GetLivetvListingprovidersAvailableResponse> => {
    data = data.map((item: any) => {
        return apiListingProviderTypeInfoSchemaResponseTransformer(item);
    });
    return data;
};

export const getMoviesByIdSimilarResponseTransformer = async (data: any): Promise<GetMoviesByIdSimilarResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getMusicgenresByNameInstantmixResponseTransformer = async (data: any): Promise<GetMusicgenresByNameInstantmixResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getNotificationsServicesDefaultsResponseTransformer = async (data: any): Promise<GetNotificationsServicesDefaultsResponse> => {
    data = userNotificationInfoSchemaResponseTransformer(data);
    return data;
};

export const getPlaylistsByIdAddtoplaylistinfoResponseTransformer = async (data: any): Promise<GetPlaylistsByIdAddtoplaylistinfoResponse> => {
    data = playlistsAddToPlaylistInfoSchemaResponseTransformer(data);
    return data;
};

export const getPlaylistsByIdItemsResponseTransformer = async (data: any): Promise<GetPlaylistsByIdItemsResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const postPlaylistsByIdItemsResponseTransformer = async (data: any): Promise<PostPlaylistsByIdItemsResponse> => {
    data = playlistsAddToPlaylistResultSchemaResponseTransformer(data);
    return data;
};

export const getPlaylistsByIdInstantmixResponseTransformer = async (data: any): Promise<GetPlaylistsByIdInstantmixResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getShowsByIdSeasonsResponseTransformer = async (data: any): Promise<GetShowsByIdSeasonsResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getShowsByIdSimilarResponseTransformer = async (data: any): Promise<GetShowsByIdSimilarResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getSongsByIdInstantmixResponseTransformer = async (data: any): Promise<GetSongsByIdInstantmixResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getSyncJobsByIdResponseTransformer = async (data: any): Promise<GetSyncJobsByIdResponse> => {
    data = syncJobSchemaResponseTransformer(data);
    return data;
};

const syncedItemSchemaResponseTransformer = (data: any) => {
    if (data.SyncJobId) {
        data.SyncJobId = BigInt(data.SyncJobId.toString());
    }
    if (data.SyncJobDateCreated) {
        data.SyncJobDateCreated = new Date(data.SyncJobDateCreated);
    }
    if (data.SyncJobItemId) {
        data.SyncJobItemId = BigInt(data.SyncJobItemId.toString());
    }
    if (data.Item) {
        data.Item = baseItemDtoSchemaResponseTransformer(data.Item);
    }
    if (data.AdditionalFiles) {
        data.AdditionalFiles = data.AdditionalFiles.map((item: any) => {
            return itemFileInfoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getSyncItemsReadyResponseTransformer = async (data: any): Promise<GetSyncItemsReadyResponse> => {
    data = data.map((item: any) => {
        return syncedItemSchemaResponseTransformer(item);
    });
    return data;
};

export const getSystemReleasenotesVersionsResponseTransformer = async (data: any): Promise<GetSystemReleasenotesVersionsResponse> => {
    data = data.map((item: any) => {
        return packageVersionInfoSchemaResponseTransformer(item);
    });
    return data;
};

const queryResultLogFileSchemaResponseTransformer = (data: any) => {
    if (data.Items) {
        data.Items = data.Items.map((item: any) => {
            return logFileSchemaResponseTransformer(item);
        });
    }
    return data;
};

const logFileSchemaResponseTransformer = (data: any) => {
    if (data.DateCreated) {
        data.DateCreated = new Date(data.DateCreated);
    }
    if (data.DateModified) {
        data.DateModified = new Date(data.DateModified);
    }
    if (data.Size) {
        data.Size = BigInt(data.Size.toString());
    }
    return data;
};

export const getSystemLogsQueryResponseTransformer = async (data: any): Promise<GetSystemLogsQueryResponse> => {
    data = queryResultLogFileSchemaResponseTransformer(data);
    return data;
};

export const getSystemInfoPublicResponseTransformer = async (data: any): Promise<GetSystemInfoPublicResponse> => {
    data = publicSystemInfoSchemaResponseTransformer(data);
    return data;
};

const queryResultActivityLogEntrySchemaResponseTransformer = (data: any) => {
    if (data.Items) {
        data.Items = data.Items.map((item: any) => {
            return activityLogEntrySchemaResponseTransformer(item);
        });
    }
    return data;
};

const activityLogEntrySchemaResponseTransformer = (data: any) => {
    if (data.Id) {
        data.Id = BigInt(data.Id.toString());
    }
    if (data.Date) {
        data.Date = new Date(data.Date);
    }
    if (data.Severity) {
        data.Severity = loggingLogSeveritySchemaResponseTransformer(data.Severity);
    }
    return data;
};

export const getSystemActivitylogEntriesResponseTransformer = async (data: any): Promise<GetSystemActivitylogEntriesResponse> => {
    data = queryResultActivityLogEntrySchemaResponseTransformer(data);
    return data;
};

export const getTrailersByIdSimilarResponseTransformer = async (data: any): Promise<GetTrailersByIdSimilarResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getUsersByUseridSuggestionsResponseTransformer = async (data: any): Promise<GetUsersByUseridSuggestionsResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const postUsersByIdAuthenticateResponseTransformer = async (data: any): Promise<PostUsersByIdAuthenticateResponse> => {
    data = authenticationAuthenticationResultSchemaResponseTransformer(data);
    return data;
};

export const postUsersForgotpasswordPinResponseTransformer = async (data: any): Promise<PostUsersForgotpasswordPinResponse> => {
    data = pinRedeemResultSchemaResponseTransformer(data);
    return data;
};

const contentSectionSchemaResponseTransformer = (data: any) => {
    if (data.ScrollDirection) {
        data.ScrollDirection = scrollDirectionSchemaResponseTransformer(data.ScrollDirection);
    }
    if (data.ParentItem) {
        data.ParentItem = baseItemDtoSchemaResponseTransformer(data.ParentItem);
    }
    if (data.TextInfo) {
        data.TextInfo = textSectionInfoSchemaResponseTransformer(data.TextInfo);
    }
    return data;
};

const textSectionInfoSchemaResponseTransformer = (data: any) => {
    if (data.Level) {
        data.Level = notificationsNotificationLevelSchemaResponseTransformer(data.Level);
    }
    return data;
};

export const getUsersByUseridHomesectionsResponseTransformer = async (data: any): Promise<GetUsersByUseridHomesectionsResponse> => {
    data = data.map((item: any) => {
        return contentSectionSchemaResponseTransformer(item);
    });
    return data;
};

export const getUsersByUseridItemsResponseTransformer = async (data: any): Promise<GetUsersByUseridItemsResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getUsersByUseridViewsResponseTransformer = async (data: any): Promise<GetUsersByUseridViewsResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getVideosByIdAdditionalpartsResponseTransformer = async (data: any): Promise<GetVideosByIdAdditionalpartsResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

const imageProviderInfoSchemaResponseTransformer = (data: any) => {
    if (data.SupportedImages) {
        data.SupportedImages = data.SupportedImages.map((item: any) => {
            return imageTypeSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getItemsByIdRemoteimagesProvidersResponseTransformer = async (data: any): Promise<GetItemsByIdRemoteimagesProvidersResponse> => {
    data = data.map((item: any) => {
        return imageProviderInfoSchemaResponseTransformer(item);
    });
    return data;
};

export const getLivetvTunerhostsDefaultByTypeResponseTransformer = async (data: any): Promise<GetLivetvTunerhostsDefaultByTypeResponse> => {
    data = liveTvTunerHostInfoSchemaResponseTransformer(data);
    return data;
};

export const getSystemLogsByNameLinesResponseTransformer = async (data: any): Promise<GetSystemLogsByNameLinesResponse> => {
    data = queryResultStringSchemaResponseTransformer(data);
    return data;
};

export const getUsersByUseridItemsResumeResponseTransformer = async (data: any): Promise<GetUsersByUseridItemsResumeResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getUsersByUseridItemsLatestResponseTransformer = async (data: any): Promise<GetUsersByUseridItemsLatestResponse> => {
    data = data.map((item: any) => {
        return baseItemDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getUsersByUseridItemsByIdResponseTransformer = async (data: any): Promise<GetUsersByUseridItemsByIdResponse> => {
    data = baseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getUsersByUseridItemsRootResponseTransformer = async (data: any): Promise<GetUsersByUseridItemsRootResponse> => {
    data = baseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const deleteUsersByUseridFavoriteitemsByIdResponseTransformer = async (data: any): Promise<DeleteUsersByUseridFavoriteitemsByIdResponse> => {
    data = userItemDataDtoSchemaResponseTransformer(data);
    return data;
};

export const postUsersByUseridFavoriteitemsByIdResponseTransformer = async (data: any): Promise<PostUsersByUseridFavoriteitemsByIdResponse> => {
    data = userItemDataDtoSchemaResponseTransformer(data);
    return data;
};

export const deleteUsersByUseridPlayeditemsByIdResponseTransformer = async (data: any): Promise<DeleteUsersByUseridPlayeditemsByIdResponse> => {
    data = userItemDataDtoSchemaResponseTransformer(data);
    return data;
};

export const postUsersByUseridPlayeditemsByIdResponseTransformer = async (data: any): Promise<PostUsersByUseridPlayeditemsByIdResponse> => {
    data = userItemDataDtoSchemaResponseTransformer(data);
    return data;
};

export const postUsersByIdConnectLinkResponseTransformer = async (data: any): Promise<PostUsersByIdConnectLinkResponse> => {
    data = connectUserLinkResultSchemaResponseTransformer(data);
    return data;
};

const remoteSubtitleInfoSchemaResponseTransformer = (data: any) => {
    if (data.DateCreated) {
        data.DateCreated = new Date(data.DateCreated);
    }
    return data;
};

export const getItemsByIdRemotesearchSubtitlesByLanguageResponseTransformer = async (data: any): Promise<GetItemsByIdRemotesearchSubtitlesByLanguageResponse> => {
    data = data.map((item: any) => {
        return remoteSubtitleInfoSchemaResponseTransformer(item);
    });
    return data;
};

export const postItemsByIdRemotesearchSubtitlesBySubtitleidResponseTransformer = async (data: any): Promise<PostItemsByIdRemotesearchSubtitlesBySubtitleidResponse> => {
    data = subtitlesSubtitleDownloadResultSchemaResponseTransformer(data);
    return data;
};

const queryResultChannelManagementInfoSchemaResponseTransformer = (data: any) => {
    if (data.Items) {
        data.Items = data.Items.map((item: any) => {
            return channelManagementInfoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const postLivetvManageChannelsByIdDisabledResponseTransformer = async (data: any): Promise<PostLivetvManageChannelsByIdDisabledResponse> => {
    data = queryResultChannelManagementInfoSchemaResponseTransformer(data);
    return data;
};

export const postLivetvManageChannelsByIdSortindexResponseTransformer = async (data: any): Promise<PostLivetvManageChannelsByIdSortindexResponse> => {
    data = queryResultChannelManagementInfoSchemaResponseTransformer(data);
    return data;
};

export const getUsersByUseridSectionsBySectionidItemsResponseTransformer = async (data: any): Promise<GetUsersByUseridSectionsBySectionidItemsResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const getUsersByUseridItemsByIdSpecialfeaturesResponseTransformer = async (data: any): Promise<GetUsersByUseridItemsByIdSpecialfeaturesResponse> => {
    data = data.map((item: any) => {
        return baseItemDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getUsersByUseridItemsByIdLocaltrailersResponseTransformer = async (data: any): Promise<GetUsersByUseridItemsByIdLocaltrailersResponse> => {
    data = data.map((item: any) => {
        return baseItemDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getUsersByUseridItemsByIdIntrosResponseTransformer = async (data: any): Promise<GetUsersByUseridItemsByIdIntrosResponse> => {
    data = queryResultBaseItemDtoSchemaResponseTransformer(data);
    return data;
};

export const postUsersByUseridFavoriteitemsByIdDeleteResponseTransformer = async (data: any): Promise<PostUsersByUseridFavoriteitemsByIdDeleteResponse> => {
    data = userItemDataDtoSchemaResponseTransformer(data);
    return data;
};

export const deleteUsersByUseridItemsByIdRatingResponseTransformer = async (data: any): Promise<DeleteUsersByUseridItemsByIdRatingResponse> => {
    data = userItemDataDtoSchemaResponseTransformer(data);
    return data;
};

export const postUsersByUseridItemsByIdRatingResponseTransformer = async (data: any): Promise<PostUsersByUseridItemsByIdRatingResponse> => {
    data = userItemDataDtoSchemaResponseTransformer(data);
    return data;
};

export const postUsersByUseridItemsByIdHidefromresumeResponseTransformer = async (data: any): Promise<PostUsersByUseridItemsByIdHidefromresumeResponse> => {
    data = userItemDataDtoSchemaResponseTransformer(data);
    return data;
};

export const postUsersByUseridPlayeditemsByIdDeleteResponseTransformer = async (data: any): Promise<PostUsersByUseridPlayeditemsByIdDeleteResponse> => {
    data = userItemDataDtoSchemaResponseTransformer(data);
    return data;
};

export const postUsersByUseridItemsByIdRatingDeleteResponseTransformer = async (data: any): Promise<PostUsersByUseridItemsByIdRatingDeleteResponse> => {
    data = userItemDataDtoSchemaResponseTransformer(data);
    return data;
};
